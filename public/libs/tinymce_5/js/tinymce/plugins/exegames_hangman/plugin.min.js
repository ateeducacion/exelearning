/**
 * plugin.min.js
 *
 * Released under Attribution-ShareAlike 4.0 International License.
 * Author: Ignacio Gros (http://gros.es/) for http://exelearning.net/
 *
 * License: http://creativecommons.org/licenses/by-sa/4.0/
 */

/**
 * Hangman Game for eXeLearning
 * To be used with the files in this folder: /scripts/exe_games/
 */

/**
 * tinymce 5
 */

tinymce.PluginManager.add('exegames_hangman', function (editor, url) {

	let $ = tinymce.dom.DomQuery;

	let accesibility = _("Please enable JavaScript to play this game.");
	let default_abc = _("abcdefghijklmnopqrstuvwxyz");
	let capital = true;
	let caseSense = false;
	let hintValues = [];
	let wordValues = [];

	let hintKey = [];
	let wordKey = [];

	let iniData = {};

	function SetDefaultData() {

		accesibility = _("Please enable JavaScript to play this game.");
		default_abc = _("abcdefghijklmnopqrstuvwxyz");
		capital = true;
		caseSense = false;

		for (var i = 0; i < exeHangManGame.wordsNo; i++) {
			hintValues[i] = '';
			wordValues[i] = '';
		}

	}

	function UpdateInitialData() {

		iniData = {
			hangman_letters: default_abc,
			js_msg: accesibility,
			include_capital_letters: capital,
			case_sensitive: caseSense

		}
		for (var i = 0; i < exeHangManGame.wordsNo; i++) {
			if (hintValues[i] != '' && hintValues[i] != null) {
				hintKey[i] = 'hangman_hint_' + i;
				iniData[hintKey[i]] = hintValues[i];
			}
			if (wordValues[i] != '' && wordValues[i] != null) {
				wordKey[i] = 'hangman_word_' + i;
				iniData[wordKey[i]] = wordValues[i];
			}
		}

		return iniData;
	}

	function setDialogSize() {
		let divDialog = $('div.tox-dialog');
		tinymce.DOM.setStyles(divDialog, { 'width': 800 });

		let divBody = $('div.tox-dialog__body').eq(0);
		tinymce.DOM.setStyles(divBody, { 'display': 'grid', 'grid-template-columns': '1fr' });

		let divNavbar = $('div.tox-dialog__body-nav').eq(0);
		tinymce.DOM.removeClass(divNavbar, 'tox-dialog__body-nav');
		tinymce.DOM.setStyle(divNavbar, 'margin-top', 10);

		for (let i = 0; i < divNavbar.children().length; i++) {
			tinymce.DOM.setStyles(divNavbar.children().eq(i), { 'margin-left': 20 });
		}

		let divDialogBody = $('div.tox-dialog__body-content');
		tinymce.DOM.setStyles(divDialogBody, { 'max-height': 600 });
	}

	function setCustomAttribs() {
		// div main form
		let divMain = $('div.tox-form').eq(0);

		//div input
		let divInput = divMain.children().eq(0);
		tinymce.DOM.setStyles(divInput, { 'display': 'flex', 'margin-bottom': 10 });
		tinymce.DOM.setStyles(divInput.children().eq(0), { 'width': 250, 'padding': '8px 0' });
		tinymce.DOM.setStyles(divInput.children().eq(1), { 'display': 'flex', 'width': '100%' });

		//div checkboxes
		let divCheckboxes = divMain.children().eq(1);
		tinymce.DOM.setStyles(divCheckboxes, { 'display': 'flex', 'margin-bottom': 10 });
		tinymce.DOM.setStyle(divCheckboxes.children().eq(1), 'margin-left', 15);

		//div label
		let divText = divMain.children().eq(2);
		tinymce.DOM.setStyle(divText, 'margin-bottom', 10);
		tinymce.DOM.setStyle(divText.children().eq(0), 'font-weight', 'bold');

		// div words and hints
		let divWH = divMain.children().eq(3);
		tinymce.DOM.setStyle(divWH, 'margin-bottom', 10);
		let rows = divWH.children();

		for (let i = 0; i < rows.length; i++) {
			let row = divWH.children().eq(i);
			tinymce.DOM.setStyle(row, 'display', 'flex');

			let divNumber = row.children().eq(0);
			tinymce.DOM.setStyles(divNumber, { 'text-align': 'right', 'min-width': 30, 'min-height': 40 });
			let divWord = row.children().eq(1);
			tinymce.DOM.setStyles(divWord, { 'margin-left': 15, 'min-height': 40 });
			let divInputWord = row.children().eq(2);
			tinymce.DOM.setStyle(divInputWord, 'margin-left', 15);
			let divHint = row.children().eq(3);
			tinymce.DOM.setStyles(divHint, { 'margin-left': 15, 'min-height': 40 });
			let divInputHint = row.children().eq(4);
			tinymce.DOM.setStyle(divInputHint, 'margin-left', 15);

			let labelNumber = divNumber.children().eq(0);
			tinymce.DOM.setStyles(labelNumber, { 'padding': '8px 0' });

			let labelWord = divWord.children().eq(0);
			tinymce.DOM.setStyles(labelWord, { 'padding': '8px 0' });

			let labelHint = divHint.children().eq(0);
			tinymce.DOM.setStyles(labelHint, { 'padding': '8px 0' });

			let inputWord = divInputWord.children().eq(0);
			tinymce.DOM.setAttrib(inputWord, 'size', "20");

			let inputHint = divInputHint.children().eq(0);
			tinymce.DOM.setAttrib(inputHint, 'size', "40");

		}

	}

	function setAttribsAccess() {

		let divRequire = $('div.tox-form__group').eq(0);
		let labelRequire = divRequire.children().eq(0);

		tinymce.DOM.setStyle(labelRequire, 'font-weight', 'bold');

		let divs = $('div.tox-form__group');

		for (let i = 1; i < divs.length; i++) {
			tinymce.DOM.setStyle(divs.eq(i), 'margin-bottom', 5);
		}
	}

	var exeHangManGame = {

		wordsNo: 15, // Max. words

		getWordsForm: function () {

			var items = [];

			for (var i = 0; i < exeHangManGame.wordsNo; i++) {

				var item = {
					type: 'panel',
					label: 'items',
					items: [
						{
							type: 'label',
							label: (i + 1) + ".",
							items: []
						},
						{
							type: 'label',
							label: _('Word') + ":",
							items: []
						},
						{
							type: 'input',
							name: 'hangman_word_' + i,
							inputmode: 'text'
						},
						{
							type: 'label',
							label: _('Definition') + ":",
							items: []
						},
						{
							type: 'input',
							name: 'hangman_hint_' + i,
							inputmode: 'text'
						}
					]
				}

				items.push(item);

			}

			return {
				type: 'panel',
				items: items
			}

		},

		// Open the dialog
		open: function () {

			var body =
			{
				title: 'body',
				type: 'tabpanel',
				tabs: [
					// General tab
					{
						title: _('General'),
						name: 'general',
						items: [
							{
								type: 'input',
								name: 'hangman_letters',
								label: _("Alphabet to Select From") + ":",
							},
							{
								type: 'panel',
								items: [
									{
										type: 'checkbox',
										name: 'include_capital_letters',
										label: _('Automatically include capital letters'),
										disabled: false
									},
									{
										type: 'checkbox',
										name: 'case_sensitive',
										label: _('Case sensitive'),
										disabled: false
									}
								]
							},
							{
								type: 'label',
								label: _('Word to guess') + " / " + _('Hint or definition') + ":",
								items: []
							},
							exeHangManGame.getWordsForm()
						]
					},

					// Accessibility tab
					{
						title: _('Accessibility'),
						name: 'accessibility',
						items: [
							{
								type: 'label',
								label: _("These games require JavaScript."),
								items: []
							},
							{
								type: 'label',
								label: _("This is the message that the users with no JavaScript will see:"),
								items: []
							},
							{
								type: 'input',
								name: 'js_msg',
							},
							{
								type: 'label',
								label: _("You can change it at any time."),
								items: []
							}
						]
					},

					// Instructions tab
					{
						title: _('Instructions'),
						name: 'instructions',
						items: [
							{
								type: 'htmlpanel',
								html: '\
								<ol style="margin-left:25px;" class="tox-label">\
									<li style="margin-bottom:5px">'+ _("Write the list of letters and/or numbers to choose from.") + '</li>\
									<li style="margin-bottom:5px">'+ _("You may include capital letters or they can be automatically included.") + '</li>\
									<li style="margin-bottom:5px">'+ _("Choose if you want the game to be case sensitive.") + '</li>\
									<li style="margin-bottom:5px">'+ _("Add at least one word to guess (question or definition + word).") + '</li>\
									<li style="margin-bottom:5px">'+ _("You may delete the game from the editor itself.") + '</li>\
								</ol>\
								<p style="margin-top:15px; font-weight:bold;" class="tox-label">'+ _("Don't forget to check the Accessibility tab.") + '</p>\
							'
							}
						]
					}
				]
			};
			exeHangManGame.checkEditorMode();

			win = editor.windowManager.open({
				title: _("Hangman Game"),
				body: body,
				bodyType: 'tabpanel',
				initialData: UpdateInitialData(),
				buttons: [
					{
						type: 'cancel',
						text: _('Cancel')
					},
					{
						type: 'submit',
						text: _('Ok'),
						primary: true
					},
				],
				size: 'medium',
				onTabChange: function (api, details) {
					switch (details.newTabName) {
						case 'general':
							setCustomAttribs();
							break;
						case 'accessibility':
							setAttribsAccess();
							break;
						case 'instructions':
							break;

					}
				},
				onClose: function () {
					SetDefaultData();
				},
				onSubmit: function (api) {
					exeHangManGame.insert(api);
				},
			});

			setCustomAttribs();
			setDialogSize();

		},

		checkEditorMode: function () {

			// Set the default values
			exeHangManGame.mode = "create"; // Create or edit

			var elm = editor.selection.getNode();
			var e = jQuery(elm);
			var isElement = false;
			var parents = e.parents(".exe-hangman");

			if (parents.length > 0) {
				exeHangManGame.mode = "edit";
			} else {
				// IE gets the whole block instead of a part of it
				if (e.hasClass("exe-game") && e.hasClass("exe-hangman")) {
					exeHangManGame.mode = "edit";
					isElement = true;
					parents = e;
				}
			}

			// Edition
			if (exeHangManGame.mode == 'edit') {
				if (parents.length != 1 && !isElement) {
					editor.windowManager.alert(_('Error recovering data'));
					return false;
				}
				exeHangManGame.currentGame = parents;
				exeHangManGame.loadPreviousValues(parents);
			}

		},

		loadPreviousValues: function (e) {

			// Get the letters to choose from
			var letters = jQuery(".exe-hangman-letters", e).html();
			if (letters == "") {
				editor.windowManager.alert(_('Error recovering data'));
				return false;
			}
			default_abc = letters;

			var c = e.attr("class");

			// Automatically include capital letters 
			var checked = false;
			if (c.indexOf("add-capital-letters") != -1) checked = true;
			capital = checked;

			// Case sensitive
			checked = false;
			if (c.indexOf("case-sensitive") != -1) checked = true;
			caseSense = checked;

			// Get the hints and words
			var hints = jQuery("dt", e);
			var words = jQuery("dd", e);

			if (hints.length != words.length) {
				editor.windowManager.alert(_('Error recovering data'));
				return false;
			}

			for (var z = 0; z < hints.length; z++) {
				hintValues[z] = hints[z].innerHTML;
				wordValues[z] = exeHangManGame.decode64(words[z].innerHTML);
			}

			// Accessibility
			var msg = jQuery(".exe-game-warning", e).html();
			if (msg != "") {
				accesibility = msg;
			}

		},

		insert: function (api) {

			// Check the JavaScript disabled message 
			var noJS = api.getData().js_msg;
			if (noJS == "") {
				editor.windowManager.alert(_('Provide a warning to users who have JavaScript disabled (Accessibility).'));
				return false;
			}

			var words = [];

			// Check if it has letters to choose from
			var letters = api.getData().hangman_letters;
			if (letters.length == 0) {
				editor.windowManager.alert(_('Please write the Alphabet to Select From'));
				return false;
			}

			for (var i = 0; i < exeHangManGame.wordsNo; i++) {
				let temp_hm_hint = 'hangman_hint_' + i;
				var dt = api.getData()[temp_hm_hint];
				let temp_hm_word = 'hangman_word_' + i;
				var dd = api.getData()[temp_hm_word];

				// Hint with no word
				if (dt != "") {
					if (dd == "") {
						editor.windowManager.alert(_('A word to guess is missing'));
						return false;
					}
					// Word with no hint
				} else if (dd != "") {
					if (dt == "") {
						editor.windowManager.alert(_('A hint or definition is missing'));
						return false;
					}
				}
				// OK
				if (dt != "" && dd != "") {
					words.push([dt, dd]);
				}
			}

			// No words!
			if (words.length == 0) {
				editor.windowManager.alert(_('Please add at least one word to guess'));
				return false;
			}

			// OK (at least one word with hint or definition)

			// Compose the HTML
			var html = "";
			var css = "exe-game exe-hangman";
			if (api.getData().include_capital_letters) css += " add-capital-letters";
			if (api.getData().case_sensitive) css += " case-sensitive";
			html += '<div class="exe-game-content">\n';
			html += '<p class="exe-hangman-letters">' + letters + '</p>\n';
			html += '<dl>\n';
			for (var x = 0; x < words.length; x++) {
				html += '<dt>' + words[x][0] + '</dt>\n';
				html += '<dd>' + exeHangManGame.encode64(words[x][1]) + '</dd>\n';
			}
			html += '</dl>\n';
			html += '</div>\n';
			html += '<p class="exe-game-warning">' + noJS + '</p>';

			// Create or update the game
			if (exeHangManGame.mode == "create") {
				html = '<div class="' + css + '">\n' + html + '</div>\n<br />';
				editor.execCommand('mceInsertContent', false, html);
			} else {
				var e = exeHangManGame.currentGame;
				e.attr("class", css).html(html);
			}

			// Add undo + Close the editor
			editor.undoManager.add();
			editor.windowManager.close();

		}, // Insert

		// Base64 encoder/decoder
		// https://jsfiddle.net/gabrieleromanato/qaght/
		_keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
		encode64: function (input) {
			var output = "";
			var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
			var i = 0;
			input = this._utf8_encode(input);
			while (i < input.length) {
				chr1 = input.charCodeAt(i++);
				chr2 = input.charCodeAt(i++);
				chr3 = input.charCodeAt(i++);
				enc1 = chr1 >> 2;
				enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
				enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
				enc4 = chr3 & 63;
				if (isNaN(chr2)) {
					enc3 = enc4 = 64;
				} else if (isNaN(chr3)) {
					enc4 = 64;
				}
				output = output + this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) + this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);
			}
			return output;
		},

		decode64: function (input) {
			var output = "";
			var chr1, chr2, chr3;
			var enc1, enc2, enc3, enc4;
			var i = 0;
			input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
			while (i < input.length) {
				enc1 = this._keyStr.indexOf(input.charAt(i++));
				enc2 = this._keyStr.indexOf(input.charAt(i++));
				enc3 = this._keyStr.indexOf(input.charAt(i++));
				enc4 = this._keyStr.indexOf(input.charAt(i++));
				chr1 = (enc1 << 2) | (enc2 >> 4);
				chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
				chr3 = ((enc3 & 3) << 6) | enc4;
				output = output + String.fromCharCode(chr1);
				if (enc3 != 64) {
					output = output + String.fromCharCode(chr2);
				}
				if (enc4 != 64) {
					output = output + String.fromCharCode(chr3);
				}
			}
			output = this._utf8_decode(output);
			return output;
		},

		_utf8_encode: function (string) {
			string = string.replace(/\r\n/g, "\n");
			var utftext = "";
			for (var n = 0; n < string.length; n++) {
				var c = string.charCodeAt(n);
				if (c < 128) {
					utftext += String.fromCharCode(c);
				}
				else if ((c > 127) && (c < 2048)) {
					utftext += String.fromCharCode((c >> 6) | 192);
					utftext += String.fromCharCode((c & 63) | 128);
				}
				else {
					utftext += String.fromCharCode((c >> 12) | 224);
					utftext += String.fromCharCode(((c >> 6) & 63) | 128);
					utftext += String.fromCharCode((c & 63) | 128);
				}
			}
			return utftext;
		},

		_utf8_decode: function (utftext) {
			var string = "";
			var i = 0;
			var c = c1 = c2 = 0;
			while (i < utftext.length) {
				c = utftext.charCodeAt(i);
				if (c < 128) {
					string += String.fromCharCode(c);
					i++;
				} else if ((c > 191) && (c < 224)) {
					c2 = utftext.charCodeAt(i + 1);
					string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
					i += 2;
				} else {
					c2 = utftext.charCodeAt(i + 1);
					c3 = utftext.charCodeAt(i + 2);
					string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
					i += 3;
				}
			}
			return string;
		}

	}

	editor.ui.registry.addIcon('exegames_hangman', `
	<?xml version="1.0" encoding="utf-8"?>
	<!-- Generator: Adobe Illustrator 16.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
	<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
	<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
		 width="24px" height="24px" viewBox="0 0 24 24" enable-background="new 0 0 24 24" xml:space="preserve">
	<desc>Created with Sketch.</desc>
	<g>
		<rect x="19.054" y="11.347" width="1.291" height="1.291"/>
		<polygon points="19.134,15.221 17.843,15.221 17.843,13.898 16.552,13.898 16.552,11.347 19.054,11.347 19.054,10.056 
			16.552,10.056 16.552,8.725 17.843,8.725 17.843,4.851 16.451,4.851 16.451,3.625 16.451,3.592 16.451,2.333 7.448,2.333 
			7.448,2.298 4.865,2.298 4.865,19.15 3.574,19.15 3.574,20.41 2.283,20.41 2.283,21.701 10.03,21.701 10.03,20.41 8.739,20.41 
			8.739,19.15 7.448,19.15 7.448,3.625 15.16,3.625 15.16,4.851 13.97,4.851 13.97,8.725 15.261,8.725 15.261,10.056 12.598,10.056 
			12.598,11.347 15.261,11.347 15.261,15.18 16.552,15.18 16.552,16.481 17.843,16.481 17.843,17.803 19.114,17.803 19.114,19.033 
			20.405,19.033 20.405,16.451 19.134,16.451 	"/>
		<rect x="20.425" y="17.742" width="1.292" height="1.291"/>
		<rect x="11.307" y="11.347" width="1.291" height="1.291"/>
		<polygon points="13.949,15.221 12.658,15.221 12.658,16.451 11.387,16.451 11.387,19.033 12.679,19.033 12.679,17.803 
			13.949,17.803 13.949,16.481 15.24,16.481 15.24,13.898 13.949,13.898 	"/>
		<rect x="10.075" y="17.742" width="1.291" height="1.291"/>
	</g>
	</svg>`);

	editor.ui.registry.addToggleButton('exegames_hangman', {
		icon: 'exegames_hangman',
		tooltip: _("Hangman Game"),
		// image: url + '/img/exegames_hangman.png',
		onAction: function () {
			exeHangManGame.open();
		},
	});
	
	editor.ui.registry.addMenuItem('exegames_hangman', {
		icon: 'exegames_hangman',
		text: _("Hangman Game"),
		// image: url + '/img/exegames_hangman.png',
		context: 'insert',
		onAction: exeHangManGame.open
	});

	editor.on('init', function (e) {

		editor.dom.loadCSS(url + "/css/content.css");

		// jQuery is required
		if (typeof (jQuery) != 'function') {
			alert(_('Hangman Game') + ": " + _('jQuery is required'));
			return false;
		}

		// CSS - Game name in the right language
		var d = editor.getDoc();
		var s = '<style type="text/css">';
		s += '.exe-game.exe-hangman:before{content:"' + _('Hangman Game') + '"}';
		s += '</style>';
		jQuery("HEAD", d).append(s);

	});

});
