/**
 * plugin.min.js
 *
 * Released under Attribution-ShareAlike 4.0 International License.
 * Author: Ignacio Gros (http://gros.es/) for http://exelearning.net/
 *
 * License: http://creativecommons.org/licenses/by-sa/4.0/
 * Based in OtherXtras by José Ramón Jiménez Reyes for http://exelearning.net/
 */

/**
 * TinyMCE plugin to create blockquotes with cite and (optional) make them look nice
 * Don't forget to add some styles to theme/site so the code has the same appearance everywhere (see eXe's base.css file)
 */
tinymce.PluginManager.add('blockquoteandcite', function (editor, url) {

	let inQuote = false;
	let actualStyled = true;
	let actualBlockquote = '';
	let actualBlockquoteLang = '';
	let actualAuthor = '';
	let actualAuthorLang = '';

	function getInitialData() {
		let data = '';

		data = {
			styled: actualStyled,
			blockquote: actualBlockquote,
			blockquotelang: actualBlockquoteLang,
			author: actualAuthor,
			authorlang: actualAuthorLang

		}
		return data;
	}

	function setDefaultValues() {
		inQuote = false;
		actualStyled = true;
		actualBlockquote = '';
		actualBlockquoteLang = '';
		actualAuthor = '';
		actualAuthorLang = '';
	}

	function setDialogSize() {
		let divDialog = $('div.tox-dialog');
		tinymce.DOM.setStyles(divDialog, { 'min-width': 600 });

		let divDialogBody = $('div.tox-dialog__body-content');
		tinymce.DOM.setStyles(divDialogBody, { 'max-height': 600 });
	}

	function setGenTabStyle() {

		let divsInput = $('div.tox-form__group');

		for (let i = 0; i < divsInput.length; i++) {
			tinymce.DOM.setStyles(divsInput.eq(i), { 'margin-top': 5 });
			if(i == 0){
				tinymce.DOM.setStyles(divsInput.eq(i).children().eq(1), { 'min-height': 120 });
			}
			if (i == 1 || i == 2 || i == 3) {
				tinymce.DOM.setStyles(divsInput.eq(i), { 'display': 'flex', 'margin-top': 5 });
				tinymce.DOM.setStyles(divsInput.eq(i).children().eq(0), { 'min-width': 180, 'padding': '8px 0' });
				tinymce.DOM.setStyles(divsInput.eq(i).children().eq(1), { 'display': 'flex', 'width': '100%' });
			}
		}
	}

	var BlockQuoteAndCite = {

		isQuote: false,

		open: function () {
			if (inQuote) {
				BlockQuoteAndCite.getValues();
			}
			// Open the window and load the previous values
			win = editor.windowManager.open({
				title: _('Quote With Authorship'),
				body: {
					type: 'panel',
					items: [
						{
							type: 'checkbox',
							name: 'styled',
							label: _('Include Styles (improves presentation)')
						},
						{
							type: 'textarea',
							name: 'blockquote',
							label: _('Quote')

						},
						{
							type: 'input',
							name: 'blockquotelang',
							label: _('Quote Language')
						},
						{
							type: 'input',
							name: 'author',
							label: _('Authorship')
						},
						{
							type: 'input',
							name: 'authorlang',
							label: _('Authorship Language')
						},
						{
							type: 'label',
							label: _('Specify the languages only if they are different from the rest of the content.'),
							items: []
						},
						{
							type: 'label',
							label: _('Use a two-letter ISO 639-1 code like "en", "es", "fr" or "de".'),
							items: []
						}
					]
				},
				size: 'normal',
				buttons: [
					{
						type: 'cancel',
						name: 'cancel',
						text: 'Cancel'
					},
					{
						type: 'submit',
						name: 'save',
						text: 'Save',
						primary: true
					}
				],
				initialData: getInitialData(),
				onSubmit: function (api) {
					// Insert content when the window form is submitted
					BlockQuoteAndCite.insert(api.getData());
					return false;
				},
				onClose: function () {
					setDefaultValues();
				}
			});


			setDialogSize();
			setGenTabStyle();

		}, // open

		// Load the previous values (if needed)
		getValues: function () {

			var node = editor.selection.getNode();
			var nodeName = node.nodeName.toLowerCase();

			var blockquote;

			if (nodeName == "cite" || nodeName == "p") {
				blockquote = editor.dom.getParent(node, 'blockquote');
				if (blockquote) {
					var blockquoteClass = blockquote.className;
					if (blockquoteClass.indexOf("exe-quote-cite") != -1) {
						// This is a blockquote with cite
						BlockQuoteAndCite.isQuote = true;
					}
				}

			} else if (nodeName == "blockquote") {
				if (node.className.indexOf("exe-quote-cite") != -1) {
					// This is a blockquote with cite
					BlockQuoteAndCite.isQuote = true;
					blockquote = node;
				}
			}

			// This is not a blockquote with cite, so we just quit 
			if (!BlockQuoteAndCite.isQuote) return;

			// Save the block to update it onsubmit
			BlockQuoteAndCite.block = blockquote;

			// Get the paragraph inside the blockquote tag
			var p = blockquote.getElementsByTagName("P");
			if (p.length > 0) {
				p = p[0];
				// Quote
				actualBlockquote = p.innerHTML;
				// Quote language
				if (blockquote.lang) {
					actualBlockquoteLang = blockquote.lang;
				}
			}

			// Get the cite tag
			var cite = blockquote.getElementsByTagName("CITE");
			if (cite.length > 0) {
				cite = cite[0];
				// Cite
				actualAuthor = cite.innerHTML;
				// Cite language
				if (cite.lang) {
					actualAuthorLang = cite.lang;
				}
			}

			// Disable Include Styles (improves presentation) if needed
			if (blockquote.className.indexOf("styled-qc") == -1) {
				actualStyled = false;
			}

		}, // getValues

		insert: function (data) {

			// Get the values
			var q = data.blockquote;
			var a = data.author;

			// The quote and the author are required
			if (q == "") {
				editor.windowManager.alert(_('Please write a quote'));
				return false;
			}

			// Get the rest of the values
			var qL = data.blockquotelang;
			var aL = data.authorlang;
			var styled = data.styled;

			// Get the HTML code
			var cssClass = "exe-quote-cite";
			if (styled) cssClass += " styled-qc";
			var h = '<blockquote class="' + cssClass + '"';
			if (qL != "") h += ' lang="' + qL + '"';
			h += '><p>' + q + '</p>';
			if (a != "") {
				h = h + '<cite';
				if (aL != "") h = h + ' lang="' + aL + '"';
				h = h + '>' + a + '</cite>';
			}
			h += '</blockquote>';

			// Insert or update
			if (!BlockQuoteAndCite.isQuote) {
				// Insert a new blockquote with cite
				h += "&nbsp;";
				editor.execCommand('mceInsertContent', false, h);
			} else {
				// Update the blockquote with cite (remove the previuos one, then add the new one)
				editor.dom.remove(BlockQuoteAndCite.block);
				editor.execCommand('mceInsertContent', false, h);
			}

			// Close the editor
			editor.windowManager.close();

		}, // insert

		activateButton: function (node) {

			var nodeName = node.nodeName;
			var activate = false;
			var parentBlockQuote = editor.dom.getParent(node, 'blockquote');

			if (nodeName == "BLOCKQUOTE" && node.className.indexOf("exe-quote-cite") != -1) {
				activate = true;
				inQuote = true;
			}
			else if ((nodeName == "P" || nodeName == "CITE") && (parentBlockQuote && parentBlockQuote.className.indexOf("exe-quote-cite") != -1)) {
				activate = true;
				inQuote = true;
			}

			return activate;

		}

	} // BlockQuoteAndCite

	editor.ui.registry.addIcon('blockquoteandcite', `
	<?xml version="1.0" encoding="utf-8"?>
	<!-- Generator: Adobe Illustrator 16.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
	<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
	<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
		 width="24px" height="24px" viewBox="0 0 24 24" enable-background="new 0 0 24 24" xml:space="preserve">
	<desc>Created with Sketch.</desc>
	<g>
		<g>
			<path fill-rule="evenodd" clip-rule="evenodd" d="M4.222,11.49C4.243,11.246,4.259,11,4.286,10.758
				c0.15-1.285,0.488-2.509,1.198-3.609c0.356-0.553,0.8-1.026,1.337-1.407c0.258-0.184,0.52-0.361,0.781-0.538
				c0.044-0.03,0.099-0.044,0.148-0.065C7.76,5.147,7.769,5.155,7.778,5.164c-0.024,0.063-0.041,0.13-0.073,0.19
				C7.456,5.813,7.194,6.266,6.956,6.73c-0.438,0.85-0.77,1.74-0.951,2.682c-0.006,0.03-0.01,0.062-0.016,0.099
				c0.169-0.035,0.33-0.075,0.491-0.099c1.161-0.178,2.361,0.531,2.769,1.629c0.429,1.159,0.062,2.361-0.941,3.083
				c-1.097,0.789-2.723,0.539-3.536-0.543c-0.303-0.402-0.485-0.848-0.534-1.349c-0.002-0.027-0.011-0.055-0.016-0.082
				C4.222,11.93,4.222,11.71,4.222,11.49z"/>
			<path fill-rule="evenodd" clip-rule="evenodd" d="M15.153,12.194c-0.057,0.241-0.094,0.49-0.177,0.72
				c-0.407,1.137-1.649,1.848-2.838,1.639c-1.099-0.193-1.936-0.994-2.136-2.066c-0.047-0.254-0.057-0.517-0.053-0.775
				c0.013-0.875,0.134-1.736,0.378-2.578c0.281-0.973,0.696-1.879,1.385-2.638c0.195-0.216,0.409-0.419,0.636-0.598
				c0.313-0.246,0.648-0.464,0.975-0.691c0.045-0.031,0.1-0.046,0.149-0.069c0.01,0.007,0.02,0.015,0.028,0.022
				c-0.021,0.063-0.037,0.132-0.068,0.19c-0.219,0.402-0.447,0.8-0.662,1.205c-0.444,0.842-0.793,1.722-0.998,2.655
				c-0.021,0.1-0.039,0.199-0.057,0.285c0.253-0.036,0.5-0.092,0.749-0.103c0.771-0.029,1.429,0.244,1.963,0.796
				c0.407,0.42,0.641,0.925,0.708,1.507c0.004,0.023,0.013,0.048,0.018,0.071C15.153,11.91,15.153,12.052,15.153,12.194z"/>
		</g>
		<rect x="10.528" y="16.971" fill-rule="evenodd" clip-rule="evenodd" width="9.25" height="1.891"/>
	</g>
	</svg>`);

	editor.ui.registry.addToggleButton('blockquoteandcite', {
		tooltip: _('Quote With Authorship'),
		// image: url + '/img/blockquoteandcite.png',
		icon: "blockquoteandcite",
		// text: "BQ",
		onAction: function () {
			BlockQuoteAndCite.open();
		},
		onSetup: function (buttonApi) {
			var editorEventCallback = function (eventApi) {
				buttonApi.setActive(BlockQuoteAndCite.activateButton(eventApi.element));
			};
			editor.on('NodeChange', editorEventCallback);
			return function (buttonApi) {
				editor.off('NodeChange', editorEventCallback);
			}
		}
	});

	editor.ui.registry.addMenuItem('blockquoteandcite', {
		text: _('Quote With Authorship'),
		// image: url + '/img/blockquoteandcite.png',
		icon: "blockquoteandcite",
		onAction: function () {
			BlockQuoteAndCite.open();
		}
	});

	editor.on('init', function (e) {
		editor.dom.loadCSS(url + "/css/content.css");
	});

});