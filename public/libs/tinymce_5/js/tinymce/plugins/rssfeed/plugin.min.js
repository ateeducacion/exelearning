tinymce.PluginManager.add('rssfeed', function (editor, url) {

	function setDialogStyle() {
		let divDialog = tinymce.dom.DomQuery('div.tox-dialog').eq(0);
		tinymce.DOM.setStyles(divDialog, { 'min-width': 700 });

		let divs = tinymce.dom.DomQuery('div.tox-form').children();

		let divLine1 = divs.eq(0);
		tinymce.DOM.setStyles(divLine1, { 'display': 'flex', 'margin-top': 5 });

		let divURL = divLine1.children().eq(0);
		tinymce.DOM.setStyles(divURL, { 'display': 'flex', 'margin-right': 5, 'width': '100%' });
		tinymce.DOM.setStyles(divURL.children().eq(0), { 'min-width': 120, 'padding': '8px 0' });
		tinymce.DOM.setStyles(divURL.children().eq(1), { 'display': 'flex', 'width': '100%' });

		let divMaxFeeds = divLine1.children().eq(1);
		tinymce.DOM.setStyles(divMaxFeeds, { 'display': 'flex', 'margin-left': 5 });
		tinymce.DOM.setStyles(divMaxFeeds.children().eq(0), { 'min-width': 120, 'padding': '8px 0' });
		tinymce.DOM.setStyles(divMaxFeeds.children().eq(1), { 'display': 'flex', 'width': 150 });

		let divLine2 = divs.eq(1);
		tinymce.DOM.setStyles(divLine2, { 'display': 'flex', 'margin-top': 5 });

		let divTitle = divLine2.children().eq(0);
		let divEmphasis = divLine2.children().eq(1);

		tinymce.DOM.setStyles(divTitle, { 'display': 'flex', 'margin-right': 5, 'width': '100%' });
		tinymce.DOM.setStyles(divTitle.children().eq(0), { 'min-width': 120, 'padding': '8px 0' });
		tinymce.DOM.setStyles(divTitle.children().eq(1), { 'display': 'flex', 'width': '100%' });

		tinymce.DOM.setStyles(divEmphasis, { 'display': 'flex', 'margin-left': 5 });
		tinymce.DOM.setStyles(divEmphasis.children().eq(0), { 'min-width': 120, 'padding': '8px 0' });
		tinymce.DOM.setStyles(divEmphasis.children().eq(1), { 'display': 'flex', 'width': 150 });

	}

	RSSFeedDialog = {

		getFeed: function (api){
			let rssURL = api.getData().rssurl;
			let numberFeeds = api.getData().maxfeeds;
			let titleFeed = api.getData().titlefeed;
			let someEmphasis = api.getData().emphasis;

			let html = '';
			if (titleFeed == ''){
				html = `<div class=${someEmphasis}><ul>`;
			}else{
				html = `<header class=${someEmphasis}><div>${titleFeed}</div></header><div class=${someEmphasis}><ul>`;
			}
			fetch(rssURL)
				.then(response => response.text())
				.then(str => new window.DOMParser().parseFromString(str, "text/xml"))
				.then(data => {
					const items = data.querySelectorAll("item");
					if(numberFeeds< items.length && numberFeeds != ''){
						for(let i=0; i<numberFeeds; i++){
							html += `
								<li>
									<a href="${items[i].querySelector("link").innerHTML}" target="_blank" rel="noopener">
									${items[i].querySelector("title").innerHTML}
									</a>
								</li>
							`;
						}
					}
					else{
						items.forEach(el => {
							html += `
								<li>
									<a href="${el.querySelector("link").innerHTML}" target="_blank" rel="noopener">
									${el.querySelector("title").innerHTML}
									</a>
								</li>
							`;
						});
					}
					html += `</ul></div>`;
					RSSFeedDialog.insert(html);
				});
		},


		insert: function (html) {
			let editor = tinyMCE.activeEditor;
			editor.insertContent(html);
			editor.execCommand("mceEndUndoLevel");
			editor.windowManager.close();
		},

		open: function () {

			win = editor.windowManager.open({
				title: _('Dialog Window'),
				body: {
					type: 'panel',
					items: [
						{
							type: 'panel',
							items: [
								{
									type: 'input',
									name: 'rssurl',
									label: _('Feed URL')
								},
								{
									type: 'input',
									name: 'maxfeeds',
									label: _('Maximum feeds')
								}
							]
						},
						{
							type: 'panel',
							items: [
								{
									type: 'input',
									name: 'titlefeed',
									label: _('Title')
								},
								{
									type: 'listbox',
									name: 'emphasis',
									label: _('Emphasis'), // Translation: Destacado
									items: [
										// values: classes to add to the main div
										{ text: _('No emphasis'), value: 'emphasis0' }, // Translation: Sin destacar
										{ text: _('Some emphasis'), value: 'emphasis1' }, // Translation: Destacado moderado
									]
								}
							]
						}
					]
				},
				buttons: [
					{
						type: 'cancel',
						name: 'cancel',
						text: 'Cancel'
					},
					{
						type: 'submit',
						name: 'save',
						text: 'Save',
						primary: true
					}
				],
				initialData: {
					emphasis: 'emphasis0'
				},
				onSubmit: function (api) {
					RSSFeedDialog.getFeed(api);
				}
			});
			setDialogStyle();
		},

	} // RSSFeedDialog

	editor.ui.registry.addIcon('rssfeed', '<svg xmlns="http://www.w3.org/2000/svg" height="24" width="24"><path d="M5 21Q4.175 21 3.587 20.413Q3 19.825 3 19Q3 18.175 3.587 17.587Q4.175 17 5 17Q5.825 17 6.412 17.587Q7 18.175 7 19Q7 19.825 6.412 20.413Q5.825 21 5 21ZM17 21Q17 18.1 15.9 15.562Q14.8 13.025 12.888 11.112Q10.975 9.2 8.438 8.1Q5.9 7 3 7V4Q6.525 4 9.625 5.338Q12.725 6.675 15.025 8.975Q17.325 11.275 18.663 14.375Q20 17.475 20 21ZM11 21Q11 17.675 8.662 15.338Q6.325 13 3 13V10Q5.3 10 7.3 10.863Q9.3 11.725 10.788 13.212Q12.275 14.7 13.137 16.7Q14 18.7 14 21Z"/></svg>');

	editor.ui.registry.addButton('rssfeed', {
		tooltip: _('RSS Feed'),
		icon: "rssfeed",
		onAction: RSSFeedDialog.open,

	});

	editor.ui.registry.addMenuItem('rssfeed', {
		text: _('RSS Feed'),
		icon: 'rssfeed',
		onAction: RSSFeedDialog.open,
		context: 'insert'
	});

	// editor.on('init', function (e) {
	// 	editor.dom.loadCSS(url + "/css/content.css");

	// });

});