/**
 * Copyright (c) Tiny Technologies, Inc. All rights reserved.
 * Licensed under the LGPL or a commercial license.
 * For LGPL see License.txt in the project root for license information.
 * For commercial licenses see https://www.tiny.cloud/
 *
 * Version: 5.10.3 (2022-02-09)
 */

(function () {
    'use strict';

    // global values
    let actObject = '';
    let actualMedia = '';
    let actualContainer = '';
    let actualFigureClass = '';
    // generalTab
    let generalType = ''; // values: '', 'video', 'audio', 'iframe', 'embed'
    let generalSource = '';
    let generalWidth = '';
    let generalHeight = '';
    let generalJsPlayer = false;
    let generalControls = true;
    let generalAutoplay = false;
    let generalAutoplayMuted = false;
    // attributionTab
    let mediaHeader = '';
    let mediaTitle = '';
    let mediaTitleLink = '';
    let authorName = '';
    let authorNameLink = '';
    let captionLicense = ''; // values: '', 'pd', 'gnu-gpl', 'CC0', 'CC-BY', 'CC-BY-SA', 'CC-BY-ND', 'CC-BY-NC', 'CC-BY-NC-SA', 'CC-BY-NC-ND', 'copyright', 'custom'
    let customCaptionLicense = '';
    // attributesTab
    let attrID = '';
    let attrClass = '';
    let attrStyle = '';
    // subtitlesTab
    let attrSrt1 = '';

    function SetDefaulData() {
        actObject = '';
        actualMedia = '';
        actualContainer = '';
        // actualFigureClass = '';
        // generalTab
        generalType = '';
        generalSource = '';
        generalWidth = '';
        generalHeight = '';
        generalJsPlayer = false;
        generalControls = true;
        generalAutoplay = false;
        generalAutoplayMuted = false;
        // attributionTab
        mediaHeader = '';
        mediaTitle = '';
        mediaTitleLink = '';
        authorName = '';
        authorNameLink = '';
        captionLicense = '';
        customCaptionLicense = '';
        // attributesTab
        attrID = '';
        attrClass = '';
        attrStyle = '';
        // subtitlesTab
        attrSrt1 = '';
    };

    function SetInitialData() {
        return {
            // generalTab
            generaltype: generalType,
            source: {
                value: generalSource
            },
            dimensions: {
                width: generalWidth,
                height: generalHeight
            },
            jsplayer: generalJsPlayer,
            usecontrols: generalControls,
            autoplay: generalAutoplay,
            muted: generalAutoplayMuted,
            //attributionTab
            mediaheader: mediaHeader,
            mediatitle: mediaTitle,
            mediatitlelink: mediaTitleLink,
            authorname: authorName,
            authornamelink: authorNameLink,
            captionlicense: captionLicense,
            customcaptionlicense: customCaptionLicense,
            //attributesTab
            idattribute: attrID,
            cssclass: attrClass,
            cssstyle: attrStyle,
            //subtitlesTab
            attrsrt1: {
                value: attrSrt1
            }
        }
    }

    function setDialogStyle() {
        let divDialog = $('div.tox-dialog').eq(0);
        tinymce.DOM.setStyles(divDialog, { 'min-width': 600 });

        let divBody = $('div.tox-dialog__body').eq(0);
        tinymce.DOM.setStyles(divBody, { 'display': 'grid', 'grid-template-columns': '1fr' });

        let divNavbar = $('div.tox-dialog__body-nav').eq(0);
        tinymce.DOM.removeClass(divNavbar, 'tox-dialog__body-nav');
        tinymce.DOM.setStyle(divNavbar, 'margin-top', 10);

        for (let i = 0; i < divNavbar.children().length; i++) {
            tinymce.DOM.setStyles(divNavbar.children().eq(i), { 'margin-left': 20 });
        }

        let divBodyContent = $('div.tox-dialog__body-content').eq(0);
        tinymce.DOM.setStyles(divBodyContent, { 'max-height': 400 });
    }

    function setGenTabStyle() {

        let divBodyForm = $('div.tox-form').eq(0);
        let divsChilds = divBodyForm.children();

        for (let i = 0; i < 2; i++) {
            tinymce.DOM.setStyles(divsChilds.eq(i), { 'display': 'flex', 'margin-top': 5 });
            tinymce.DOM.setStyles(divsChilds.eq(i).children().eq(0), { 'min-width': 180, 'padding': '8px 0' });
            tinymce.DOM.setStyles(divsChilds.eq(i).children().eq(1), { 'display': 'flex', 'width': '100%' });
        }

        // divsChilds.eq(0).hide();//hide listbox type

        let comboTypes = divsChilds.eq(0).children().eq(1);
        tinymce.DOM.setAttrib(comboTypes, 'id', 'exemedia-type');

        let divDimensions = divBodyForm.children().eq(2);
        tinymce.DOM.setStyles(divDimensions, { 'margin-top': 5 });

        // hide label width and height and block
        let divWidth = divDimensions.children().eq(0).children().eq(0);
        let labelWidth = divWidth.children().eq(0);
        labelWidth.hide();
        let inputWidth = divWidth.children().eq(1);

        let divHeight = divDimensions.children().eq(0).children().eq(1);
        let labelHeight = divHeight.children().eq(0);
        labelHeight.hide();
        let inputHeight = divHeight.children().eq(1);

        let divBlock = divDimensions.children().eq(0).children().eq(2);
        let labelBlock = divBlock.children().eq(0);
        labelBlock.hide();

        // Add label block dimensions
        let labelBlockDimensions = tinymce.DOM.create('label', { 'class': 'tox-label' }, _('Constrain proportions'));
        let divBlockDimensions = tinymce.DOM.create('div', { 'class': 'tox-form__group' }, labelBlockDimensions);
        divBlock.after(divBlockDimensions);

        // Add label X
        let labelX = tinymce.DOM.create('label', { 'class': 'tox-label' }, 'x');
        let divLabelX = tinymce.DOM.create('div', { 'class': 'tox-form__group', 'style': 'min-width: 8px; padding: 8px 0; margin-left: 5px' }, labelX);
        divWidth.after(divLabelX);

        // Add label dimensions
        let labelDimensions = tinymce.DOM.create('label', { 'class': 'tox-label' }, _('Dimensions'));
        let divLabelDimensions = tinymce.DOM.create('div', { 'class': 'tox-form__group', 'style': 'min-width: 176px' }, labelDimensions);
        divWidth.before(divLabelDimensions);

        let checkboxesOptions = $('label.tox-checkbox');
        checkboxesOptions.wrapAll('<div class="tox-form__group">');

        let divOptions = divBodyForm.children().eq(3);
        tinymce.DOM.setStyles(divOptions, { 'display': 'flex', 'margin-top': 5 });
        tinymce.DOM.setStyles(divOptions.children().eq(0), { 'min-width': 173, 'padding': '45px 0' });
        tinymce.DOM.setStyles(divOptions.children().eq(1), { 'border-left': 0 });

        let jsPlayerLabel = divOptions.children().eq(1).children().eq(0);
        tinymce.DOM.setAttribs(jsPlayerLabel, { 'title': 'Improving browser compatibility with some file formats' });

    }

    function setAttributionTabStyle() {

        let divHeader = $('div.tox-form__group').eq(0);

        tinymce.DOM.setStyles(divHeader, { 'display': 'flex', 'margin-top': 5 });
        tinymce.DOM.setStyles(divHeader.children().eq(0), { 'min-width': 100, 'padding': '8px 0' });
        tinymce.DOM.setStyles(divHeader.children().eq(1), { 'width': '100%' });

        let divFooter = $('div.tox-form__group').eq(1);
        tinymce.DOM.setStyles(divFooter, { 'border': '1px solid #666', 'padding': '0px 10px 10px 10px', 'margin-top': 10 });

        let divLegend = divFooter.children().eq(0);
        tinymce.DOM.setStyles(divLegend, { 'width': 'fit-content', 'padding-left': 10, 'position': 'relative', 'top': '-10px', 'left': '0px', 'background-color': 'white' });

        let newFooter = $('div.tox-form__group');
        for (let i = 1; i < newFooter.children().length; i++) {
            tinymce.DOM.setStyles(newFooter.children().eq(i), { 'display': 'flex' });
            tinymce.DOM.setStyles(newFooter.children().eq(i).children().eq(0), { 'min-width': 200, 'padding': '8px 0' });
            tinymce.DOM.setStyles(newFooter.children().eq(i).children().eq(1), { 'width': '100%' });
        }

    }

    function setAttribsTabStyle() {
      
        let divsInput = $('div.tox-form__group');

        for (let i = 0; i < divsInput.length; i++) {
            tinymce.DOM.setStyles(divsInput.eq(i), { 'display': 'flex', 'margin-top': 5 });
            tinymce.DOM.setStyles(divsInput.eq(i).children().eq(0), { 'min-width': 150, 'padding': '8px 0' });
            tinymce.DOM.setStyles(divsInput.eq(i).children().eq(1), { 'display': 'flex', 'width': '100%' });
        }
    }
    
    function isLocalPDF(src){
      return src.startsWith("files/tmp/") && src.endsWith(".pdf");
    }

    function SetNewEmbedData(api, type) {
        let embedContent = '';

        let src = api.getData().source.value;
        let widthValue = api.getData().dimensions.width;
        let heightValue = api.getData().dimensions.height;

        if (widthValue === '' || heightValue === '') {
            if (src.indexOf("https://mediateca.educa.madrid.org/audio/")==0) {
              // Mediateca EducaMadrid (audios)
              api.setData({ 'dimensions': { width: "420", height: "44" } });
              widthValue = '420';
              heightValue = '44';
            } else {
              api.setData({ 'dimensions': { width: "300", height: "150" } });
              widthValue = '300';
              heightValue = '150';
            }
        }

        let width = `width ="${widthValue}"`;
        let height = `height="${heightValue}"`;

        if (type === 'video') {
            embedContent = `<video ${width} ${height} controls ="controls"><source src="${src}"/></video>`;
        }
        else if (type === 'audio') {
            api.setData({ 'dimensions': { width: "", height: "" } });
            embedContent = `<audio controls ="controls" src="${src}"></audio>`;
        }
        else if (type === 'iframe') {
            embedContent = `<iframe ${width} ${height} controls="controls" src="${src}"></iframe>`;
        }
        else if (isLocalPDF(src)) {
            embedContent = `<embed ${width} ${height} src="${src}" type="application/pdf"></embed>`;
        }        
        return embedContent;
    }

    function GetActualData(editor) {
        
        actualMedia = editor.selection.getNode();
        actualContainer = actualMedia.parentNode;

        if (actualMedia.getAttribute("data-mce-object") !== null) {
            generalType = actualMedia.getAttribute("data-mce-object");
        }

        if (actualContainer != null&&actualContainer.nodeName=="FIGURE") {

            // mediaHeader
            let actHeader = jQuery(".header",actualContainer);
            let actHeaderHTML = '';
            if (actHeader.length==1) {
                actHeaderHTML = actHeader.text();
            }
            
            // mediaTitle and mediaTitleLink
            let actTitle = jQuery(".title",actualContainer);
            let actTitleHTML = '';
            let actLinkTitleHTML = '';
            if (actTitle.length==1) {
                actTitleHTML = actTitle.text();
                if (actTitle.prop("tagName")=="A") actLinkTitleHTML = actTitle.attr("href");
            }
            
            // authorName and authorNameLink
            let actAuthor = jQuery(".author",actualContainer);
            let actAuthorHTML = '';
            let actLinkAuthorHTML = '';
            if (actAuthor.length==1) {
                actAuthorHTML = actAuthor.text();
                if (actAuthor.prop("tagName")=="A") actLinkAuthorHTML = actAuthor.attr("href");
            }
            
            // captionlicense
            var license = jQuery(".license",actualContainer);
            if (license.length==1) {
              
              var licenseText = license.text().replace("(","").replace(")","").replace(_("License")+": ","");
              // var licenseField = win.find("#captionlicense")[0];
              
              // CC0
              if (licenseText=="CC0") {
                captionLicense = "CC0";
              }
              // CC-BY, CC-BY-SA, CC-BY-ND, CC-BY-NC, CC-BY-NC-SA, CC-BY-NC-ND
              else if (licenseText.indexOf("CC ")==0) {
                captionLicense = licenseText.replace(/ /g,'-').toUpperCase();
              } 
              // GNU/GPL
              else if (licenseText=="GNU/GPL") {
                captionLicense = "gnu-gpl";
              }
              // GFDL
              else if (licenseText=="GFDL") {
                captionLicense = "gfdl";
              }
              // Public Domain
              else if (licenseText==_("Public Domain")) {
                captionLicense = "pd";
              }
              // Standard YouTube License
              else if (licenseText==_("Standard YouTube License")) {
                captionLicense = "standard-youtube";
              }
              // All Rights Reserved
              else if (licenseText==_("All Rights Reserved") || licenseText==_("License")+": "+_("All Rights Reserved")) {
                captionLicense = "copyright";
              }
              // Custom license
              else if (licenseText!="") {
                // editor.windowManager.alert(_('Please check the "License" field'));
                var customLicense = jQuery(".custom-license",actualContainer);
                var customLicenseHTML = "";
                if (customLicense.length==1) {
                  licenseText = customLicense.html();
                } else {
                  // Needed if you add a custom license text and you add a link to that text in TinyMCE (span.custom-license might be removed)
                  licenseText = license.html().replace('<span class="sep">(</span>','').replace('<span class="sep">)</span>','');
                }
                customCaptionLicense = licenseText;
                captionLicense = "custom";
              }
              
            }
            
            // Alignment
            actualFigureClass = '';
            if (actualContainer.className.indexOf("exe-figure exe-media")==0) {
              actualFigureClass = actualContainer.className;
              actualFigureClass = actualFigureClass.split(" ");
              // Remove any license CSS class (it'll be added when saving)
              let tmpFigureClass = "";
              for (let x=0;x<actualFigureClass.length;x++) {
                if (actualFigureClass[x].indexOf("license-")!=0) tmpFigureClass += actualFigureClass[x]+" ";
              }
              actualFigureClass = tmpFigureClass.trim();
            }

            // Store the required values
            mediaHeader = actHeaderHTML;
            mediaTitle = actTitleHTML;
            mediaTitleLink = actLinkTitleHTML;
            authorName = actAuthorHTML;
            authorNameLink = actLinkAuthorHTML;

        } // / Is in figure
        
        
        // src, width and height
        actObject = editor.dom.getAttrib(actualMedia, 'data-mce-object', '');
        if (actObject == 'iframe') {
            let actIframe = tinymce.dom.DomQuery(actualMedia).children()[0];
            generalSource = editor.dom.getAttrib(actIframe, 'src', '');
            generalWidth = editor.dom.getAttrib(actIframe, 'width', '');
            generalHeight = editor.dom.getAttrib(actIframe, 'height', '');
        } else if (actObject == 'video') {
            let actVideo = tinymce.dom.DomQuery(actualMedia).children()[0];
            generalWidth = editor.dom.getAttrib(actVideo, 'width', '');
            generalHeight = editor.dom.getAttrib(actVideo, 'height', '');
            let actSource = tinymce.dom.DomQuery(actVideo).children()[0];
            generalSource = editor.dom.getAttrib(actSource, 'src', '');
        } else if (actObject == 'audio') {
            let actAudio = tinymce.dom.DomQuery(actualMedia).children()[0];
            generalSource = editor.dom.getAttrib(actAudio, 'src', '');
        } else if (actObject == 'embed') {
            let actEmbed = tinymce.dom.DomQuery(actualMedia)[0];
            generalWidth = editor.dom.getAttrib(actEmbed, 'width', '');
            generalHeight = editor.dom.getAttrib(actEmbed, 'height', '');                
            generalSource = editor.dom.getAttrib(actEmbed, 'data-mce-p-src', '');
        }

        // JavaScript Player
        generalJsPlayer = false;
        if (editor.dom.getAttrib(actualMedia, 'data-mce-p-class', '').includes('mediaelement')) {
            generalJsPlayer = true;
        }
        
        // Controls
        generalControls = false;
        if (editor.dom.getAttrib(actualMedia, 'data-mce-p-controls', '') == 'controls') {
            generalControls = true;
        }
        
        // Auto-play
        generalAutoplay = false;
        generalAutoplayMuted = false;
        if (
            editor.dom.getAttrib(actualMedia, 'data-mce-p-autoplay', '') == 'autoplay' ||
            editor.dom.getAttrib(actualContainer, 'data-mce-p-autoplay', '') == 'autoplay'
        ) {
            generalAutoplay = true;
            if (
                editor.dom.getAttrib(actualMedia, 'data-mce-p-muted', '') == 'muted' ||
                editor.dom.getAttrib(actualContainer, 'data-mce-p-muted', '') == 'muted'
            ) {
                generalAutoplayMuted = true;
            }
        }
        
        // ID, style and CSS class
        attrID = editor.dom.getAttrib(actualMedia, 'data-mce-p-id', '');
        attrClass = editor.dom.getAttrib(actualMedia, 'data-mce-p-class', '');
        attrClass = attrClass.replace("mediaelement","").trim();
        attrStyle = jQuery(actualMedia).attr("style") || editor.dom.getAttrib(actualMedia, 'data-mce-style', '');
        
        // Subtitles
        attrSrt1 = $("track",actualMedia).attr("src") || "";

    }

    function getTabContent() {
        return [
            {
                type: 'input',
                label: _("Header"),
                name: 'mediaheader'
            },
            {
                type: 'label',
                label: _('Footer caption'),
                items: [
                    {
                        type: 'input',
                        label: _("Title"),
                        name: 'mediatitle'
                    },
                    {
                        type: 'input',
                        label: _("Title Link"),
                        name: 'mediatitlelink'
                    },
                    {
                        type: 'input',
                        label: _("Source/Author"),
                        name: 'authorname'
                    },
                    {
                        type: 'input',
                        label: _("Source/Author Link"),
                        name: 'authornamelink'
                    },
                    {
                        type: 'listbox',
                        name: 'captionlicense',
                        label: _("License"),
                        items: [
                            { text: _("Choose a license..."), value: '' },
                            { text: _("Public Domain"), value: 'pd' },
                            { text: "GNU/GPL", value: 'gnu-gpl' },
                            { text: "GFDL", value: 'gfdl'},
                            { text: "Creative Commons (" + _("Public Domain") + ")", value: 'CC0' },
                            { text: "Creative Commons BY", value: 'CC-BY' },
                            { text: "Creative Commons BY-SA", value: 'CC-BY-SA' },
                            { text: "Creative Commons BY-ND", value: 'CC-BY-ND' },
                            { text: "Creative Commons BY-NC", value: 'CC-BY-NC' },
                            { text: "Creative Commons BY-NC-SA", value: 'CC-BY-NC-SA' },
                            { text: "Creative Commons BY-NC-ND", value: 'CC-BY-NC-ND' },
                            { text: _("Standard YouTube License"), value: 'standard-youtube'},
                            { text: "Copyright (" + _("All Rights Reserved") + ")", value: 'copyright' },
                            { text: _("Custom license"), value: 'custom' }       
                        ]
                    },
                    {
                        type: 'input',
                        name: 'customcaptionlicense',
                        label: _("Custom license"),
                        disabled: true
                    }
                ]
            }
        ]
    }

    var global$9 = tinymce.util.Tools.resolve('tinymce.PluginManager');

    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    var typeOf = function (x) {
        var t = typeof x;
        if (x === null) {
            return 'null';
        } else if (t === 'object' && (Array.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'Array')) {
            return 'array';
        } else if (t === 'object' && (String.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'String')) {
            return 'string';
        } else {
            return t;
        }
    };
    var isType = function (type) {
        return function (value) {
            return typeOf(value) === type;
        };
    };
    var isString = isType('string');
    var isObject = isType('object');
    var isArray = isType('array');
    var isNullable = function (a) {
        return a === null || a === undefined;
    };
    var isNonNullable = function (a) {
        return !isNullable(a);
    };

    var noop = function () {
    };
    var constant = function (value) {
        return function () {
            return value;
        };
    };
    var identity = function (x) {
        return x;
    };
    var never = constant(false);
    var always = constant(true);

    var none = function () {
        return NONE;
    };
    var NONE = function () {
        var call = function (thunk) {
            return thunk();
        };
        var id = identity;
        var me = {
            fold: function (n, _s) {
                return n();
            },
            isSome: never,
            isNone: always,
            getOr: id,
            getOrThunk: call,
            getOrDie: function (msg) {
                throw new Error(msg || 'error: getOrDie called on none.');
            },
            getOrNull: constant(null),
            getOrUndefined: constant(undefined),
            or: id,
            orThunk: call,
            map: none,
            each: noop,
            bind: none,
            exists: never,
            forall: always,
            filter: function () {
                return none();
            },
            toArray: function () {
                return [];
            },
            toString: constant('none()')
        };
        return me;
    }();
    var some = function (a) {
        var constant_a = constant(a);
        var self = function () {
            return me;
        };
        var bind = function (f) {
            return f(a);
        };
        var me = {
            fold: function (n, s) {
                return s(a);
            },
            isSome: always,
            isNone: never,
            getOr: constant_a,
            getOrThunk: constant_a,
            getOrDie: constant_a,
            getOrNull: constant_a,
            getOrUndefined: constant_a,
            or: self,
            orThunk: self,
            map: function (f) {
                return some(f(a));
            },
            each: function (f) {
                f(a);
            },
            bind: bind,
            exists: bind,
            forall: bind,
            filter: function (f) {
                return f(a) ? me : NONE;
            },
            toArray: function () {
                return [a];
            },
            toString: function () {
                return 'some(' + a + ')';
            }
        };
        return me;
    };
    var from = function (value) {
        return value === null || value === undefined ? NONE : some(value);
    };
    var Optional = {
        some: some,
        none: none,
        from: from
    };

    var nativePush = Array.prototype.push;
    var each$1 = function (xs, f) {
        for (var i = 0, len = xs.length; i < len; i++) {
            var x = xs[i];
            f(x, i);
        }
    };
    var flatten = function (xs) {
        var r = [];
        for (var i = 0, len = xs.length; i < len; ++i) {
            if (!isArray(xs[i])) {
                throw new Error('Arr.flatten item ' + i + ' was not an array, input: ' + xs);
            }
            nativePush.apply(r, xs[i]);
        }
        return r;
    };

    var Cell = function (initial) {
        var value = initial;
        var get = function () {
            return value;
        };
        var set = function (v) {
            value = v;
        };
        return {
            get: get,
            set: set
        };
    };

    var keys = Object.keys;
    var hasOwnProperty = Object.hasOwnProperty;
    var each = function (obj, f) {
        var props = keys(obj);
        for (var k = 0, len = props.length; k < len; k++) {
            var i = props[k];
            var x = obj[i];
            f(x, i);
        }
    };
    var get$1 = function (obj, key) {
        return has(obj, key) ? Optional.from(obj[key]) : Optional.none();
    };
    var has = function (obj, key) {
        return hasOwnProperty.call(obj, key);
    };

    var getScripts = function (editor) {
        return editor.getParam('media_scripts');
    };
    var getAudioTemplateCallback = function (editor) {
        return editor.getParam('audio_template_callback');
    };
    var getVideoTemplateCallback = function (editor) {
        return editor.getParam('video_template_callback');
    };
    var hasLiveEmbeds = function (editor) {
        return editor.getParam('media_live_embeds', true);
    };
    var shouldFilterHtml = function (editor) {
        return editor.getParam('media_filter_html', true);
    };
    var getUrlResolver = function (editor) {
        return editor.getParam('media_url_resolver');
    };
    var hasAltSource = function (editor) {
        return editor.getParam('media_alt_source', true);
    };
    var hasPoster = function (editor) {
        return editor.getParam('media_poster', true);
    };
    var hasDimensions = function (editor) {
        return editor.getParam('media_dimensions', true);
    };

    var global$8 = tinymce.util.Tools.resolve('tinymce.util.Tools');

    var global$7 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');

    var global$6 = tinymce.util.Tools.resolve('tinymce.html.SaxParser');

    var getVideoScriptMatch = function (prefixes, src) {
        if (prefixes) {
            for (var i = 0; i < prefixes.length; i++) {
                if (src.indexOf(prefixes[i].filter) !== -1) {
                    return prefixes[i];
                }
            }
        }
    };

    var DOM$1 = global$7.DOM;
    var trimPx = function (value) {
        return value.replace(/px$/, '');
    };
    var getEphoxEmbedData = function (attrs) {
        var style = attrs.map.style;
        var styles = style ? DOM$1.parseStyle(style) : {};
        return {
            type: 'ephox-embed-iri',
            source: attrs.map['data-ephox-embed-iri'],
            altsource: '',
            poster: '',
            width: get$1(styles, 'max-width').map(trimPx).getOr(''),
            height: get$1(styles, 'max-height').map(trimPx).getOr('')
        };
    };
    var htmlToData = function (prefixes, html) {
        var isEphoxEmbed = Cell(false);
        var data = {};
        global$6({
            validate: false,
            allow_conditional_comments: true,
            start: function (name, attrs) {
                if (isEphoxEmbed.get()); else if (has(attrs.map, 'data-ephox-embed-iri')) {
                    isEphoxEmbed.set(true);
                    data = getEphoxEmbedData(attrs);
                } else {
                    if (!data.source && name === 'param') {
                        data.source = attrs.map.movie;
                    }
                    if (name === 'iframe' || name === 'object' || name === 'embed' || name === 'video' || name === 'audio') {
                        if (!data.type) {
                            data.type = name;
                        }
                        data = global$8.extend(attrs.map, data);
                    }
                    if (name === 'script') {
                        var videoScript = getVideoScriptMatch(prefixes, attrs.map.src);
                        if (!videoScript) {
                            return;
                        }
                        data = {
                            type: 'script',
                            source: attrs.map.src,
                            width: String(videoScript.width),
                            height: String(videoScript.height)
                        };
                    }
                    if (name === 'source') {
                        if (!data.source) {
                            data.source = attrs.map.src;
                        } else if (!data.altsource) {
                            data.altsource = attrs.map.src;
                        }
                    }
                    if (name === 'img' && !data.poster) {
                        data.poster = attrs.map.src;
                    }
                }
            }
        }).parse(html);
        data.source = data.source || data.src || data.data;
        data.altsource = data.altsource || '';
        data.poster = data.poster || '';
        return data;
    };

    var guess = function (url) {
        var mimes = {
            mp3: 'audio/mpeg',
            m4a: 'audio/x-m4a',
            wav: 'audio/wav',
            mp4: 'video/mp4',
            webm: 'video/webm',
            ogg: 'video/ogg',
            swf: 'application/x-shockwave-flash'
        };
        var fileEnd = url.toLowerCase().split('.').pop();
        var mime = mimes[fileEnd];
        return mime ? mime : '';
    };

    var global$5 = tinymce.util.Tools.resolve('tinymce.html.Schema');

    var global$4 = tinymce.util.Tools.resolve('tinymce.html.Writer');

    var DOM = global$7.DOM;
    var addPx = function (value) {
        return /^[0-9.]+$/.test(value) ? value + 'px' : value;
    };
    var setAttributes = function (attrs, updatedAttrs) {
        each(updatedAttrs, function (val, name) {
            var value = '' + val;
            if (attrs.map[name]) {
                var i = attrs.length;
                while (i--) {
                    var attr = attrs[i];
                    if (attr.name === name) {
                        if (value) {
                            attrs.map[name] = value;
                            attr.value = value;
                        } else {
                            delete attrs.map[name];
                            attrs.splice(i, 1);
                        }
                    }
                }
            } else if (value) {
                attrs.push({
                    name: name,
                    value: value
                });
                attrs.map[name] = value;
            }
        });
    };
    var updateEphoxEmbed = function (data, attrs) {
        var style = attrs.map.style;
        var styleMap = style ? DOM.parseStyle(style) : {};
        styleMap['max-width'] = addPx(data.width);
        styleMap['max-height'] = addPx(data.height);
        setAttributes(attrs, { style: DOM.serializeStyle(styleMap) });
    };
    var sources = [
        'source',
        'altsource'
    ];
    var updateHtml = function (html, data, updateAll) {
        var writer = global$4();
        var isEphoxEmbed = Cell(false);
        var sourceCount = 0;
        var hasImage;
        global$6({
            validate: false,
            allow_conditional_comments: true,
            comment: function (text) {
                writer.comment(text);
            },
            cdata: function (text) {
                writer.cdata(text);
            },
            text: function (text, raw) {
                writer.text(text, raw);
            },
            start: function (name, attrs, empty) {
                if (isEphoxEmbed.get()); else if (has(attrs.map, 'data-ephox-embed-iri')) {
                    isEphoxEmbed.set(true);
                    updateEphoxEmbed(data, attrs);
                } else {
                    switch (name) {
                        case 'video':
                        case 'object':
                        case 'embed':
                        case 'img':
                        case 'iframe':
                            if (data.height !== undefined && data.width !== undefined) {
                                setAttributes(attrs, {
                                    width: data.width,
                                    height: data.height
                                });
                            }
                            break;
                    }
                    if (updateAll) {
                        switch (name) {
                            case 'video':
                                setAttributes(attrs, {
                                    poster: data.poster,
                                    src: ''
                                });
                                if (data.altsource) {
                                    setAttributes(attrs, { src: '' });
                                }
                                break;
                            case 'iframe':
                                setAttributes(attrs, { src: data.source });
                                break;
                            case 'source':
                                if (sourceCount < 2) {
                                    setAttributes(attrs, {
                                        src: data[sources[sourceCount]],
                                        type: data[sources[sourceCount] + 'mime']
                                    });
                                    if (!data[sources[sourceCount]]) {
                                        return;
                                    }
                                }
                                sourceCount++;
                                break;
                            case 'img':
                                if (!data.poster) {
                                    return;
                                }
                                hasImage = true;
                                break;
                        }
                    }
                }
                writer.start(name, attrs, empty);
            },
            end: function (name) {
                if (!isEphoxEmbed.get()) {
                    if (name === 'video' && updateAll) {
                        for (var index = 0; index < 2; index++) {
                            if (data[sources[index]]) {
                                var attrs = [];
                                attrs.map = {};
                                if (sourceCount <= index) {
                                    setAttributes(attrs, {
                                        src: data[sources[index]],
                                        type: data[sources[index] + 'mime']
                                    });
                                    writer.start('source', attrs, true);
                                }
                            }
                        }
                    }
                    if (data.poster && name === 'object' && updateAll && !hasImage) {
                        var imgAttrs = [];
                        imgAttrs.map = {};
                        setAttributes(imgAttrs, {
                            src: data.poster,
                            width: data.width,
                            height: data.height
                        });
                        writer.start('img', imgAttrs, true);
                    }
                }
                writer.end(name);
            }
        }, global$5({})).parse(html);
        return writer.getContent();
    };

    var urlPatterns = [
        {
            regex: /youtu\.be\/([\w\-_\?&=.]+)/i,
            type: 'iframe',
            w: 560,
            h: 314,
            url: 'www.youtube.com/embed/$1',
            allowFullscreen: true
        },
        {
            regex: /youtube\.com(.+)v=([^&]+)(&([a-z0-9&=\-_]+))?/i,
            type: 'iframe',
            w: 560,
            h: 314,
            url: 'www.youtube.com/embed/$2?$4',
            allowFullscreen: true
        },
        {
            regex: /youtube.com\/embed\/([a-z0-9\?&=\-_]+)/i,
            type: 'iframe',
            w: 560,
            h: 314,
            url: 'www.youtube.com/embed/$1',
            allowFullscreen: true
        },
        {
            regex: /vimeo\.com\/([0-9]+)/,
            type: 'iframe',
            w: 425,
            h: 350,
            url: 'player.vimeo.com/video/$1?title=0&byline=0&portrait=0&color=8dc7dc',
            allowFullscreen: true
        },
        {
            regex: /vimeo\.com\/(.*)\/([0-9]+)/,
            type: 'iframe',
            w: 425,
            h: 350,
            url: 'player.vimeo.com/video/$2?title=0&amp;byline=0',
            allowFullscreen: true
        },
        {
            regex: /maps\.google\.([a-z]{2,3})\/maps\/(.+)msid=(.+)/,
            type: 'iframe',
            w: 425,
            h: 350,
            url: 'maps.google.com/maps/ms?msid=$2&output=embed"',
            allowFullscreen: false
        },
        {
            regex: /dailymotion\.com\/video\/([^_]+)/,
            type: 'iframe',
            w: 480,
            h: 270,
            url: 'www.dailymotion.com/embed/video/$1',
            allowFullscreen: true
        },
        {
            regex: /dai\.ly\/([^_]+)/,
            type: 'iframe',
            w: 480,
            h: 270,
            url: 'www.dailymotion.com/embed/video/$1',
            allowFullscreen: true
        },
        // Mediateca EducaMadrid
        {
            regex: /mediateca\.educa\.madrid\.org\/(.*)\/([^_]+)/,
            type: 'iframe',
            w: 560,
            h: 314,
            url: 'mediateca.educa.madrid.org/$1/$2',
            allowFullscreen: true
        }
    ];
    var getProtocol = function (url) {
        var protocolMatches = url.match(/^(https?:\/\/|www\.)(.+)$/i);
        if (protocolMatches && protocolMatches.length > 1) {
            return protocolMatches[1] === 'www.' ? 'https://' : protocolMatches[1];
        } else {
            return 'https://';
        }
    };
    var getUrl = function (pattern, url) {
        var protocol = getProtocol(url);
        var match = pattern.regex.exec(url);
        var newUrl = protocol + pattern.url;
        var _loop_1 = function (i) {
            newUrl = newUrl.replace('$' + i, function () {
                return match[i] ? match[i] : '';
            });
        };
        for (var i = 0; i < match.length; i++) {
            _loop_1(i);
        }
        return newUrl.replace(/\?$/, '');
    };
    var matchPattern = function (url) {
        var patterns = urlPatterns.filter(function (pattern) {
            return pattern.regex.test(url);
        });
        if (patterns.length > 0) {
            return global$8.extend({}, patterns[0], { url: getUrl(patterns[0], url) });
        } else {
            return null;
        }
    };

    var getIframeHtml = function (data) {
        var allowFullscreen = data.allowfullscreen ? ' allowFullscreen="1"' : '';
        return '<iframe src="' + data.source + '" width="' + data.width + '" height="' + data.height + '"' + allowFullscreen + '></iframe>';
    };
    var getFlashHtml = function (data) {
        var html = '<object data="' + data.source + '" width="' + data.width + '" height="' + data.height + '" type="application/x-shockwave-flash">';
        if (data.poster) {
            html += '<img src="' + data.poster + '" width="' + data.width + '" height="' + data.height + '" />';
        }
        html += '</object>';
        return html;
    };
    var getAudioHtml = function (data, audioTemplateCallback) {
        if (audioTemplateCallback) {
            return audioTemplateCallback(data);
        } else {
            return '<audio controls="controls" src="' + data.source + '">' + (data.altsource ? '\n<source src="' + data.altsource + '"' + (data.altsourcemime ? ' type="' + data.altsourcemime + '"' : '') + ' />\n' : '') + '</audio>';
        }
    };
    var getVideoHtml = function (data, videoTemplateCallback) {
        var allowFullscreen = data.allowfullscreen ? ' allowFullscreen="1"' : '';
        if (videoTemplateCallback) {
            return videoTemplateCallback(data);
        } else {
            if (isLocalPDF(data.source)) {
              if (generalType=='iframe') {
                return '<iframe src="' + data.source + '" width="' + data.width + '" height="' + data.height + '"' + allowFullscreen + '></iframe>';                
              }
              return '<embed width="' + data.width + '" height="' + data.height + '" src="' + data.source + '" type="application/pdf"></embed>'
            } else if (generalType=='iframe') {
                return '<iframe src="' + data.source + '" width="' + data.width + '" height="' + data.height + '"' + allowFullscreen + '></iframe>';                
            }
            return '<video width="' + data.width + '" height="' + data.height + '"' + (data.poster ? ' poster="' + data.poster + '"' : '') + ' controls="controls">\n' + '<source src="' + data.source + '"' + (data.sourcemime ? ' type="' + data.sourcemime + '"' : '') + ' />\n' + (data.altsource ? '<source src="' + data.altsource + '"' + (data.altsourcemime ? ' type="' + data.altsourcemime + '"' : '') + ' />\n' : '') + '</video>';
        }
    };
    var getScriptHtml = function (data) {
        return '<script src="' + data.source + '"></script>';
    };
    var dataToHtml = function (editor, dataIn) {
        var data = global$8.extend({}, dataIn);
        if (!data.source) {
            global$8.extend(data, htmlToData(getScripts(editor), data.embed));
            if (!data.source) {
                return '';
            }
        }
        if (!data.altsource) {
            data.altsource = '';
        }
        if (!data.poster) {
            data.poster = '';
        }
        data.source = editor.convertURL(data.source, 'source');
        data.altsource = editor.convertURL(data.altsource, 'source');
        data.sourcemime = guess(data.source);
        data.altsourcemime = guess(data.altsource);
        data.poster = editor.convertURL(data.poster, 'poster');
        var pattern = matchPattern(data.source);
        if (pattern) {
            data.source = pattern.url;
            data.type = pattern.type;
            data.allowfullscreen = pattern.allowFullscreen;
            data.width = data.width || String(pattern.w);
            data.height = data.height || String(pattern.h);
        }
        if (data.embed) {
            return updateHtml(data.embed, data, true);
        } else {
            var videoScript = getVideoScriptMatch(getScripts(editor), data.source);
            if (videoScript) {
                data.type = 'script';
                data.width = String(videoScript.width);
                data.height = String(videoScript.height);
            }
            var audioTemplateCallback = getAudioTemplateCallback(editor);
            var videoTemplateCallback = getVideoTemplateCallback(editor);
            data.width = data.width || '300';
            data.height = data.height || '150';
            global$8.each(data, function (value, key) {
                data[key] = editor.dom.encode('' + value);
            });
            if (data.type === 'iframe') {
                return getIframeHtml(data);
            } else if (data.sourcemime === 'application/x-shockwave-flash') {
                return getFlashHtml(data);
            } else if (data.sourcemime.indexOf('audio') !== -1) {
                return getAudioHtml(data, audioTemplateCallback);
            } else if (data.type === 'script') {
                return getScriptHtml(data);
            } else {
                return getVideoHtml(data, videoTemplateCallback);
            }
        }
    };

    var isMediaElement = function (element) {
        return element.hasAttribute('data-mce-object') || element.hasAttribute('data-ephox-embed-iri');
    };
    var setup$2 = function (editor) {
        editor.on('click keyup touchend', function () {
            var selectedNode = editor.selection.getNode();
            if (selectedNode && editor.dom.hasClass(selectedNode, 'mce-preview-object')) {
                if (editor.dom.getAttrib(selectedNode, 'data-mce-selected')) {
                    selectedNode.setAttribute('data-mce-selected', '2');
                }
            }
        });
        editor.on('ObjectSelected', function (e) {
            var objectType = e.target.getAttribute('data-mce-object');
            if (objectType === 'script') {
                e.preventDefault();
            }
        });
        editor.on('ObjectResized', function (e) {
            var target = e.target;
            if (target.getAttribute('data-mce-object')) {
                var html = target.getAttribute('data-mce-html');
                if (html) {
                    html = unescape(html);
                    target.setAttribute('data-mce-html', escape(updateHtml(html, {
                        width: String(e.width),
                        height: String(e.height)
                    })));
                }
            }
        });
    };

    var global$3 = tinymce.util.Tools.resolve('tinymce.util.Promise');

    var cache = {};
    var embedPromise = function (data, dataToHtml, handler) {
        return new global$3(function (res, rej) {
            var wrappedResolve = function (response) {
                if (response.html) {
                    cache[data.source] = response;
                }
                return res({
                    url: data.source,
                    html: response.html ? response.html : dataToHtml(data)
                });
            };
            if (cache[data.source]) {
                wrappedResolve(cache[data.source]);
            } else {
                handler({ url: data.source }, wrappedResolve, rej);
            }
        });
    };
    var defaultPromise = function (data, dataToHtml) {
        return global$3.resolve({
            html: dataToHtml(data),
            url: data.source
        });
    };
    var loadedData = function (editor) {
        return function (data) {
            return dataToHtml(editor, data);
        };
    };
    var getEmbedHtml = function (editor, data) {
        var embedHandler = getUrlResolver(editor);
        return embedHandler ? embedPromise(data, loadedData(editor), embedHandler) : defaultPromise(data, loadedData(editor));
    };
    var isCached = function (url) {
        return has(cache, url);
    };

    var extractMeta = function (sourceInput, data) {
        return get$1(data, sourceInput).bind(function (mainData) {
            return get$1(mainData, 'meta');
        });
    };
    var getValue = function (data, metaData, sourceInput) {
        return function (prop) {
            var _a;
            var getFromData = function () {
                return get$1(data, prop);
            };
            var getFromMetaData = function () {
                return get$1(metaData, prop);
            };
            var getNonEmptyValue = function (c) {
                return get$1(c, 'value').bind(function (v) {
                    return v.length > 0 ? Optional.some(v) : Optional.none();
                });
            };
            var getFromValueFirst = function () {
                return getFromData().bind(function (child) {
                    return isObject(child) ? getNonEmptyValue(child).orThunk(getFromMetaData) : getFromMetaData().orThunk(function () {
                        return Optional.from(child);
                    });
                });
            };
            var getFromMetaFirst = function () {
                return getFromMetaData().orThunk(function () {
                    return getFromData().bind(function (child) {
                        return isObject(child) ? getNonEmptyValue(child) : Optional.from(child);
                    });
                });
            };
            return _a = {}, _a[prop] = (prop === sourceInput ? getFromValueFirst() : getFromMetaFirst()).getOr(''), _a;
        };
    };
    var getDimensions = function (data, metaData) {
        var dimensions = {};
        get$1(data, 'dimensions').each(function (dims) {
            each$1([
                'width',
                'height'
            ], function (prop) {
                get$1(metaData, prop).orThunk(function () {
                    return get$1(dims, prop);
                }).each(function (value) {
                    return dimensions[prop] = value;
                });
            });
        });
        return dimensions;
    };
    var unwrap = function (data, sourceInput) {
        var metaData = sourceInput ? extractMeta(sourceInput, data).getOr({}) : {};
        var get = getValue(data, metaData, sourceInput);
        return __assign(__assign(__assign(__assign(__assign({}, get('source')), get('altsource')), get('poster')), get('embed')), getDimensions(data, metaData));
    };
    var wrap = function (data) {
        var wrapped = __assign(__assign({}, data), {
            source: { value: get$1(data, 'source').getOr('') },
            altsource: { value: get$1(data, 'altsource').getOr('') },
            poster: { value: get$1(data, 'poster').getOr('') }
        });
        each$1([
            'width',
            'height'
        ], function (prop) {
            get$1(data, prop).each(function (value) {
                var dimensions = wrapped.dimensions || {};
                dimensions[prop] = value;
                wrapped.dimensions = dimensions;
            });
        });
        return wrapped;
    };
    var handleError = function (editor) {
        return function (error) {
            var errorMessage = error && error.msg ? 'Media embed handler error: ' + error.msg : 'Media embed handler threw unknown error.';
            editor.notificationManager.open({
                type: 'error',
                text: errorMessage
            });
        };
    };
    var snippetToData = function (editor, embedSnippet) {
        return htmlToData(getScripts(editor), embedSnippet);
    };
    var getEditorData = function (editor) {
        var element = editor.selection.getNode();
        var snippet = isMediaElement(element) ? editor.serializer.serialize(element, { selection: true }) : '';
        return __assign({ embed: snippet }, htmlToData(getScripts(editor), snippet));
    };
    var addEmbedHtml = function (api, editor) {
        return function (response) {
            if (isString(response.url) && response.url.trim().length > 0) {
                var html = response.html;
                var snippetData = snippetToData(editor, html);

                var nuData = __assign(__assign({}, snippetData), {
                    source: response.url,
                    embed: html
                });
                api.setData(wrap(nuData));
            }
        };
    };
    var selectPlaceholder = function (editor, beforeObjects) {
        var afterObjects = editor.dom.select('*[data-mce-object]');
        for (var i = 0; i < beforeObjects.length; i++) {
            for (var y = afterObjects.length - 1; y >= 0; y--) {
                if (beforeObjects[i] === afterObjects[y]) {
                    afterObjects.splice(y, 1);
                }
            }
        }
        editor.selection.select(afterObjects[0]);
    };
    var handleInsert = function (editor, html) {
        // Add the FIGURE and other properties if needed:
        html = getCustomHTML(html);
        // Get the current element
        var elm = editor.selection.getNode();
        // See if it's a FIGURE
        var elmParent = elm.parentElement;
        if (typeof elmParent=='object'&&elmParent.nodeName=="FIGURE") {
          jQuery(elmParent).before("%exemedia_tmp_figure%");
          editor.dom.remove(elmParent);
          editor.setContent(editor.getContent().replace("%exemedia_tmp_figure%",html));
          return false;
        }
        // If it's not a FIGURE:
        var beforeObjects = editor.dom.select('*[data-mce-object]');
        let extra = "<br>";
        if (elm.nextElementSibling&&elm.nextElementSibling.nodeName&&elm.nextElementSibling.nodeName=="BR") extra = ""; 
        editor.insertContent(html+extra);
        selectPlaceholder(editor, beforeObjects);
        editor.nodeChanged();
    };
    
    var getCustomHTML = function(html){
      // Extra attributes
      let tmpDiv = $("<div></div>");
      // JavaScript player and autoplay
      if (generalJsPlayer==true || generalAutoplay==true) {
        if (html.indexOf('<video')==0||html.indexOf('<audio')==0) {
          tmpDiv.html(html);
          let dest = jQuery("video,audio",tmpDiv);
          if (generalJsPlayer==true) dest.addClass("mediaelement");
          if (generalAutoplay==true) dest.attr("exe-autoplay","exe-autoplay");
          if (generalAutoplayMuted==true) dest.attr("muted","muted");
          html = tmpDiv.html();
          html = html.replace('exe-autoplay="exe-autoplay"','autoplay="autoplay"')
        }
      }
      // Subtitles
      if (attrSrt1!="") {
          html = html.replace('</video>','<track label="'+_("Subtitles")+'" kind="subtitles" src="'+attrSrt1+'" /></video>')
      }
      if (attrID!="" || attrClass!="" || attrStyle!="") {
        tmpDiv.html(html);
        let elm = jQuery("video,audio,iframe,embed",tmpDiv);
        if (attrID!="") elm.attr("id",attrID.replace(/ /g,""));
        if (attrClass!="") elm.addClass(attrClass);
        if (attrStyle!="") elm.attr("style",attrStyle);
        html = tmpDiv.html();
      }
      // Mediateca EducaMadrid
      let mDomain = "https://mediateca.educa.madrid.org/";
      if (html.indexOf('<iframe')==0&&html.indexOf(mDomain)!=-1) {
        tmpDiv.html(html);
        let mIframe = jQuery("iframe",tmpDiv);
        let mIframeSrc = mIframe.attr("src");
        if (mIframeSrc.indexOf(mDomain)==0) {
          var tmp = mIframeSrc;
              tmp = tmp.split("?");
              tmp = tmp[0];
              tmp = tmp.split("&");
              tmp = tmp[0];
              tmp = tmp.split("#");
              tmp = tmp[0];
              tmp = tmp.split("/");
          if (tmp.length>4) {
            tmp = mDomain+tmp[3]+"/"+tmp[4]+"/fs";
            mIframe.attr("src",tmp);
            html = tmpDiv.html();
          }
        }
        // / Mediateca EducaMadrid
      }
      let res = "";
      if (mediaHeader != '' || authorName != '' || authorNameLink != '' || mediaTitle != '' || mediaTitleLink != '' || captionLicense != '') {
        
        let mediaWidth = 560;
        let mediaHeight = 300;        
        
        var hText = "";
        var cText = "";
        var license = "";
        
        var figureTag = "figure";
        var headerFigcaptionTag = "figcaption";
        var footerFigcaptionTag = "figcaption";            
        
        // Header
        if (mediaHeader!="") {
          hText = "<"+headerFigcaptionTag+" class='figcaption header'><strong>"+mediaHeader+"</strong></"+headerFigcaptionTag+">";
        }
        
        // Author and link
        if (authorName!="") {
          if (authorNameLink!="") {
            cText+="<a href='"+authorNameLink+"' target='_blank' class='author'>"+authorName+"</a>";
          } else {
            cText+="<span class='author'>"+authorName+"</span>";
          }
        } else {
          if (authorNameLink!="") {
            cText+="<a href='"+authorNameLink+"' target='_blank' class='author'>"+authorNameLink+"</a>";
          }
        }
        
        // Title and link
        if (mediaTitle!="") {
          if (cText!="") cText+=". ";
          if (mediaTitleLink!="") {
            cText+="<a href='"+mediaTitleLink+"' target='_blank' class='title'><em>"+mediaTitle+"</em></a>";
          } else {
            cText+="<span class='title'><em>"+mediaTitle+"</em></span>";
          }
        } else {
          if (mediaTitleLink!="") {
            if (cText!="") cText+=" - ";
            cText+="<a href='"+mediaTitleLink+"' target='_blank' class='title'><em>"+mediaTitleLink+"</em></a>";
          }
        }
        
        // License (to review):
        var licenseLang = "en";
        var ccLink = "http://creativecommons.org/licenses/";
        var w = window.opener;
        if (!w) w = window.parent;
        if (w && w.document.getElementsByTagName) {
          var lang = w.document.getElementsByTagName("HTML")[0].lang;
          if (lang && lang != "") licenseLang = lang;
          if (lang!="en") ccLink += "?lang="+lang;
        }  
        
        if (captionLicense!="") {
          
          if (captionLicense=="custom") {
            // license = win.find("#customcaptionlicense")[0].value();
            license = customCaptionLicense;
          } else if (captionLicense=="pd") {
            license = "<span>"+_("Public Domain")+"</span>";
          } else if (captionLicense=="gnu-gpl") {
            license = "<a href='http://www.gnu.org/licenses/gpl.html' rel='license nofollow' target='_blank'>GNU/GPL</a>";
          } else if (captionLicense=="gfdl") {
            license = "<a href='https://www.gnu.org/licenses/fdl-1.3.html' rel='license nofollow' target='_blank'>GFDL</a>";
          } else if (captionLicense=="CC0") {
            license = "<a href='http://creativecommons.org/publicdomain/zero/1.0/deed."+licenseLang+"' rel='license nofollow' target='_blank' title='Creative Commons (CC0)'>CC0</a>";
          } else if (captionLicense=="standard-youtube") {
            license = "<a href='https://www.youtube.com/static?template=terms' rel='license nofollow' target='_blank'>"+_("Standard YouTube License")+"</a>";
          } else if (captionLicense=="copyright") {
            license = "<span>"+_("All Rights Reserved")+"</span>";
          } else {
            license = "<a href='"+ccLink+"' rel='license nofollow' target='_blank' title='"+captionLicense.replace("CC-","Creative Commons ")+"'>"+captionLicense.replace("CC-","CC ")+"</a>";
          }

          if (license!="") {
            if (captionLicense=="custom") license = '<span class="custom-license">'+license+'</span>';
            if (cText!="") {
              license = ' <span class="license"><span class="sep">(</span>'+license+'<span class="sep">)</span></span>';
            } else {
              license = '<span class="license"><span class="tit">'+_("License")+": </span>"+license+"</span>";
            }
          }
          
        }
        
        // Use the "exealign" plugin to control the alignment
        var cssClass = "exe-figure exe-media position-center";
        if (actualFigureClass!="") cssClass = actualFigureClass; // Use the previous alignment
        if (captionLicense!="") cssClass += " license-"+captionLicense;
        
        // Update the media width (data.width is not available)
        if (html.indexOf(' width="')!=-1) {
          var newMediaWidth = html.split(' width="')[1].split('"')[0];
          if (!isNaN(newMediaWidth)) mediaWidth = newMediaWidth;
        }
        if (html.indexOf("<audio ")==0) {
          tmpDiv.html(html);
          let mIAudio = jQuery("audio",tmpDiv);
          let mIAudioWidth = mIAudio.attr("width");
          if (mIAudioWidth) mediaWidth = mIAudioWidth;
          let mIAudioCSSWidth = mIAudio.css("width");
          if (mIAudioCSSWidth.indexOf("px")!=-1) {
            mIAudioCSSWidth = mIAudioCSSWidth.replace("px","");
            mIAudioCSSWidth = parseInt(mIAudioCSSWidth);
            if (isNaN(mIAudioCSSWidth) || mIAudioCSSWidth<1) mediaWidth = "";
            else mediaWidth = mIAudioCSSWidth;
          }
        }
        if (mediaWidth=="") mediaWidth = 300; // audio
        var extraStyle="width:"+mediaWidth+"px;";

        var fText = "";
        if (cText!="" || license!="") fText = "<"+footerFigcaptionTag+" class='figcaption'>"+cText+license+"</"+footerFigcaptionTag+">";

        res = "<"+figureTag+" class='"+cssClass+"' style='"+extraStyle+"'>"+hText+html+fText+"</"+figureTag+">";
      } else {
        res = html;
      }
      return res;
    } // / getCustomHTML
    
    var submitForm = function (prevData, newData, editor) {
        newData.embed = updateHtml(newData.embed, newData);
        if (newData.embed && (prevData.source === newData.source || isCached(newData.source))) {
            handleInsert(editor, newData.embed);
        } else {
            getEmbedHtml(editor, newData).then(function (response) {
                handleInsert(editor, response.html);
            }).catch(handleError(editor));
        }
    };
    var showDialog = function (editor) {
        GetActualData(editor);
        var editorData = getEditorData(editor);
        var currentData = Cell(editorData);
        var initialData = wrap(editorData);
        // Set SetInitialData
        $.extend(initialData, SetInitialData());
        var handleSource = function (prevData, api) {
            var serviceData = unwrap(api.getData(), 'source');
            if (prevData.source !== serviceData.source) {
                addEmbedHtml(win, editor)({
                    url: serviceData.source,
                    html: ''
                });
                getEmbedHtml(editor, serviceData).then(addEmbedHtml(win, editor)).catch(handleError(editor));
            }
        };
        var handleEmbed = function (api) {
            var data = unwrap(api.getData());
            var dataFromEmbed = snippetToData(editor, data.embed);
            api.setData(wrap(dataFromEmbed));
        };
        var handleUpdate = function (api, sourceInput) {
            var data = unwrap(api.getData(), sourceInput);
            var embed = dataToHtml(editor, data);
            api.setData(wrap(__assign(__assign({}, data), { embed: embed })));
        };
        // attributesTab
        var attributesTab = {
            title: _('Attributes'),
            name: 'attributes',
            items: [
                {
                    type: 'input', name: 'idattribute', label: _('ID')
                },
                {
                    type: 'input', name: 'cssclass', label: _('CSS class')
                },
                {
                    type: 'input', name: 'cssstyle', label: _('Style')
                }
            ]
        };
        // attributionTab
        var attributionTab = {
            title: _("Title and Attribution"),
            name: 'attribution',
            items: getTabContent()
        };
        // generalTab
        // options checkboxes
        let mediaCheckboxes = [{
            type: 'label',
            name: 'options',
            label: _('Options'),
            items: [
                { name: 'usecontrols', type: 'checkbox', label: _("Use Controls") },
                { name: 'jsplayer', type: 'checkbox', label: _("Use JavaScript player") },
                { name: 'autoplay', type: 'checkbox', label: _("Autoplay") },
                { name: 'muted', type: 'checkbox', label: _("Muted autoplay (recommended)") }
            ]
        }];
        // type listbox
        let mediaListbox = [{
            name: 'generaltype',
            type: 'selectbox',
            label: _('Type'),
            items: [
                { text: _('Detect automatically'), value: '' },
                { text: _('Video'), value: 'video' },
                { text: _('Audio'), value: 'audio' },
                { text: 'iframe', value: 'iframe' },
                { text: 'embed', value: 'embed' }
            ]
        }];
        var mediaInput = [{
            name: 'source',
            type: 'urlinput',
            filetype: 'media',
            label: _('Source'),
            placeholder : _("Choose a file or paste a link (URL)")
        }];
        var sizeInput = !hasDimensions(editor) ? [] : [{
            type: 'sizeinput',
            name: 'dimensions',
            label: 'Constrain proportions',
            constrain: true
        }];
        var generalTab = {
            title: 'General',
            name: 'general',
            items: flatten([
                mediaListbox,
                mediaInput,
                sizeInput,
                mediaCheckboxes
            ])
        };
        var embedTextarea = {
            type: 'textarea',
            name: 'embed',
            label: 'Paste your embed code below:'
        };
        var embedTab = {
            title: 'Embed',
            name: 'embedtab',
            items: [embedTextarea]
        };
        var advancedFormItems = [];
        if (hasAltSource(editor)) {
            advancedFormItems.push({
                name: 'altsource',
                type: 'urlinput',
                filetype: 'media',
                label: 'Alternative source URL'
            });
        }
        if (hasPoster(editor)) {
            advancedFormItems.push({
                name: 'poster',
                type: 'urlinput',
                filetype: 'image',
                label: 'Media poster (Image URL)'
            });
        }
        var advancedTab = {
            title: 'Advanced',
            name: 'advanced',
            items: advancedFormItems
        };
        var mediaSrt1Input = [{
            name: 'attrsrt1',
            type: 'urlinput',
            filetype: 'media',
            label: _('Subtitles') + ' (srt / vtt)',
            placeholder : _("Choose a file")
        }];
        var subtitlesTab = {
            title: _('Subtitles'),
            name: 'subtitles',
            items: mediaSrt1Input
        };
        var tabs = [
            generalTab,
            // To review embedTab,
            attributionTab,
            attributesTab,
            subtitlesTab
        ];
        if (advancedFormItems.length > 0) {
            tabs.push(advancedTab);
        }
        var body = {
            type: 'tabpanel',
            tabs: tabs
        };
        var win = editor.windowManager.open({
            title: _('Insert/Edit Media'),
            size: 'normal',
            body: body,
            buttons: [
                {
                    type: 'cancel',
                    name: 'cancel',
                    text: _('Cancel')
                },
                {
                    type: 'submit',
                    name: 'save',
                    text: _('Save'),
                    primary: true
                }
            ],
            onSubmit: function (api) {
                var serviceData = unwrap(api.getData());
                submitForm(currentData.get(), serviceData, editor);
                api.close();
            },
            onTabChange: function (api, details) {
                switch (details.newTabName) {
                    case 'general':
                        setGenTabStyle();
                        break;
                    case 'attribution':
                        setAttributionTabStyle();
                        // atribucion, habilitar licencia personalizada al inicio
                        if (api.getData().captionlicense === 'custom') {
                            api.enable('customcaptionlicense');
                        }
                        break;
                    case 'attributes':
                    case 'subtitles':
                        setAttribsTabStyle();
                        break;
                }
            },
            onChange: function (api, details) {
                switch (details.name) {
                    case 'source':
                        handleSource(currentData.get(), api);
                        let selectedType = api.getData().generaltype;
                        api.setData({ embed: SetNewEmbedData(api, selectedType) });
                        document.getElementById("exemedia-type").children[0].value = '';
                        document.getElementById("exemedia-type").children[0].value = selectedType;
                        break;
                    case 'embed':
                        handleEmbed(api);
                        break;
                    case 'dimensions':
                    case 'altsource':
                    case 'poster':
                        handleUpdate(api, details.name);
                        break;
                    case 'idattribute':
                        attrID = api.getData().idattribute;
                        break;
                    case 'cssclass':
                        attrClass = api.getData().cssclass;
                        break;
                    case 'cssstyle':
                        attrStyle = api.getData().cssstyle;
                        break;
                    case 'jsplayer':
                        generalJsPlayer = api.getData().jsplayer;
                        break;
                    case 'usecontrols':
                        generalControls = api.getData().usecontrols;
                        break;
                    case 'autoplay':
                        generalAutoplay = api.getData().autoplay;
                        if (generalAutoplay) {
                            $(".tox-checkbox").eq(3).css("visibility","visible");
                            $(".tox-checkbox input").prop("checked",true);
                            generalAutoplayMuted = true;
                        } else {
                            $(".tox-checkbox").eq(3).css("visibility","hidden");
                        }
                        break;
                    case 'muted':
                        generalAutoplayMuted = api.getData().muted;
                        break;
                    case 'captionlicense':
                        if (api.getData().captionlicense === 'custom') {
                            api.enable('customcaptionlicense');
                        } else {
                            api.disable('customcaptionlicense');
                            api.setData({ customcaptionlicense: '' });
                        }
                        captionLicense = api.getData().captionlicense;
                        break;
                    case 'customcaptionlicense':
                        customCaptionLicense = api.getData().customcaptionlicense;
                        break;
                    case 'mediaheader':
                        mediaHeader = api.getData().mediaheader;
                        break;
                    case 'mediatitle':
                        mediaTitle = api.getData().mediatitle;
                        break;
                    case 'mediatitlelink':
                        mediaTitleLink = api.getData().mediatitlelink;
                        break;
                    case 'authorname':
                        authorName = api.getData().authorname;
                        break;
                    case 'authornamelink':
                        authorNameLink = api.getData().authornamelink;
                        break;
                    case 'generaltype':
                        let type = api.getData().generaltype;
                        generalType = type;
                        api.setData({ embed: SetNewEmbedData(api, type) });

                        // api.setData({source: api.getData().source});
                        // win.find('#embed').value(dataToHtml(win.toJSON(), false)); // false isDataEmbed (we want the code to be updated)
                        break;
                    case 'attrsrt1':
                        attrSrt1 = api.getData().attrsrt1.value;
                        break;
                }
                currentData.set(unwrap(api.getData()));
            },
            initialData: initialData,
            onClose: function () {
                setTimeout(() => {
                    SetDefaulData();
                }, 500);
            }
        });
        // Muted option hidden by default
        if (generalAutoplay!=true) $(".tox-checkbox").eq(3).css("visibility","hidden");
    };

    var get = function (editor) {
        var showDialog$1 = function () {
            showDialog(editor);
        };
        return { showDialog: showDialog$1 };
    };

    var register$1 = function (editor) {
        var showDialog$1 = function () {
            
            // Is in figure?
            var elm = editor.selection.getNode();
            var figure = editor.dom.getParents(elm, '.exe-figure');
            var isIframe = false;
            if (elm.nodeName=="SPAN" && elm.className && elm.className.indexOf("mce-preview-object")!=-1) isIframe = true;
            if (figure.length==1 && elm.nodeName!="IMG" && !isIframe) {
              var figureHTML = figure[0].innerHTML;
              // When it's a figure containing an media element you have to select that element to open the dialog
              // Otherwise the "Title and Attribution" panel will not load the previous values
              if (figureHTML.indexOf('<iframe')!=-1 || figureHTML.indexOf('<video')!=-1 || figureHTML.indexOf('<audio')!=-1 || figureHTML.indexOf('<img data-mc')!=-1) {
                editor.windowManager.alert(_('Please select the media file to edit it'));
                return false;
              }
            }
            
            showDialog(editor);

            // Set styles
            setDialogStyle();
            setGenTabStyle();

        };
        editor.addCommand('mceMedia', showDialog$1);
    };

    var global$2 = tinymce.util.Tools.resolve('tinymce.html.Node');

    var global$1 = tinymce.util.Tools.resolve('tinymce.Env');

    var global = tinymce.util.Tools.resolve('tinymce.html.DomParser');

    var sanitize = function (editor, html) {
        if (shouldFilterHtml(editor) === false) {
            return html;
        }
        var writer = global$4();
        var blocked;
        global$6({
            validate: false,
            allow_conditional_comments: false,
            comment: function (text) {
                if (!blocked) {
                    writer.comment(text);
                }
            },
            cdata: function (text) {
                if (!blocked) {
                    writer.cdata(text);
                }
            },
            text: function (text, raw) {
                if (!blocked) {
                    writer.text(text, raw);
                }
            },
            start: function (name, attrs, empty) {
                blocked = true;
                if (name === 'script' || name === 'noscript' || name === 'svg') {
                    return;
                }
                for (var i = attrs.length - 1; i >= 0; i--) {
                    var attrName = attrs[i].name;
                    if (attrName.indexOf('on') === 0) {
                        delete attrs.map[attrName];
                        attrs.splice(i, 1);
                    }
                    if (attrName === 'style') {
                        attrs[i].value = editor.dom.serializeStyle(editor.dom.parseStyle(attrs[i].value), name);
                    }
                }
                writer.start(name, attrs, empty);
                blocked = false;
            },
            end: function (name) {
                if (blocked) {
                    return;
                }
                writer.end(name);
            }
        }, global$5({})).parse(html);
        return writer.getContent();
    };

    var isLiveEmbedNode = function (node) {
        var name = node.name;
        return name === 'iframe' || name === 'video' || name === 'audio';
    };
    var getDimension = function (node, styles, dimension, defaultValue) {
        if (defaultValue === void 0) {
            defaultValue = null;
        }
        var value = node.attr(dimension);
        if (isNonNullable(value)) {
            return value;
        } else if (!has(styles, dimension)) {
            return defaultValue;
        } else {
            return null;
        }
    };
    var setDimensions = function (node, previewNode, styles) {
        var useDefaults = previewNode.name === 'img' || node.name === 'video';
        var defaultWidth = useDefaults ? '300' : null;
        var fallbackHeight = node.name === 'audio' ? '30' : '150';
        var defaultHeight = useDefaults ? fallbackHeight : null;
        previewNode.attr({
            width: getDimension(node, styles, 'width', defaultWidth),
            height: getDimension(node, styles, 'height', defaultHeight)
        });
    };
    var appendNodeContent = function (editor, nodeName, previewNode, html) {
        var newNode = global({
            forced_root_block: false,
            validate: false
        }, editor.schema).parse(html, { context: nodeName });
        while (newNode.firstChild) {
            previewNode.append(newNode.firstChild);
        }
    };
    var createPlaceholderNode = function (editor, node) {
        var name = node.name;
        var placeHolder = new global$2('img', 1);
        placeHolder.shortEnded = true;
        retainAttributesAndInnerHtml(editor, node, placeHolder);
        setDimensions(node, placeHolder, {});

        placeHolder.attr({
            'style': node.attr('style'),
            'src': global$1.transparentSrc,
            'data-mce-object': name,
            'class': 'mce-object mce-object-' + name
        });

        return placeHolder;
    };
    var createPreviewNode = function (editor, node) {
        var name = node.name;
        var previewWrapper = new global$2('span', 1);

        previewWrapper.attr({
            'contentEditable': 'false',
            'style': node.attr('style'),
            'data-mce-object': name,
            'class': 'mce-preview-object mce-object-' + name
        });
        retainAttributesAndInnerHtml(editor, node, previewWrapper);
        var styles = editor.dom.parseStyle(node.attr('style'));
        var previewNode = new global$2(name, 1);
        setDimensions(node, previewNode, styles);
        previewNode.attr({
            src: node.attr('src'),
            style: node.attr('style'),
            class: node.attr('class')
        });
        if (name === 'iframe') {
            previewNode.attr({
                allowfullscreen: node.attr('allowfullscreen'),
                frameborder: '0'
            });
        } else {
            var attrs = [
                'controls',
                'crossorigin',
                'currentTime',
                'loop',
                'muted',
                'poster',
                'preload'
            ];
            each$1(attrs, function (attrName) {
                previewNode.attr(attrName, node.attr(attrName));
            });
            var sanitizedHtml = previewWrapper.attr('data-mce-html');
            if (isNonNullable(sanitizedHtml)) {
                appendNodeContent(editor, name, previewNode, unescape(sanitizedHtml));
            }
        }
        var shimNode = new global$2('span', 1);
        shimNode.attr('class', 'mce-shim');
        previewWrapper.append(previewNode);
        previewWrapper.append(shimNode);
        return previewWrapper;
    };
    var retainAttributesAndInnerHtml = function (editor, sourceNode, targetNode) {
        var attribs = sourceNode.attributes;
        var ai = attribs.length;
        while (ai--) {
            var attrName = attribs[ai].name;
            var attrValue = attribs[ai].value;
            if (attrName !== 'width' && attrName !== 'height' && attrName !== 'style') {
                if (attrName === 'data' || attrName === 'src') {
                    attrValue = editor.convertURL(attrValue, attrName);
                }
                targetNode.attr('data-mce-p-' + attrName, attrValue);
            }
        }
        var innerHtml = sourceNode.firstChild && sourceNode.firstChild.value;
        if (innerHtml) {
            targetNode.attr('data-mce-html', escape(sanitize(editor, innerHtml)));
            targetNode.firstChild = null;
        }
    };
    var isPageEmbedWrapper = function (node) {
        var nodeClass = node.attr('class');
        return nodeClass && /\btiny-pageembed\b/.test(nodeClass);
    };
    var isWithinEmbedWrapper = function (node) {
        while (node = node.parent) {
            if (node.attr('data-ephox-embed-iri') || isPageEmbedWrapper(node)) {
                return true;
            }
        }
        return false;
    };
    var placeHolderConverter = function (editor) {
        return function (nodes) {
            var i = nodes.length;
            var node;
            var videoScript;
            while (i--) {
                node = nodes[i];
                if (!node.parent) {
                    continue;
                }
                if (node.parent.attr('data-mce-object')) {
                    continue;
                }
                if (node.name === 'script') {
                    videoScript = getVideoScriptMatch(getScripts(editor), node.attr('src'));
                    if (!videoScript) {
                        continue;
                    }
                }
                if (videoScript) {
                    if (videoScript.width) {
                        node.attr('width', videoScript.width.toString());
                    }
                    if (videoScript.height) {
                        node.attr('height', videoScript.height.toString());
                    }
                }
                if (isLiveEmbedNode(node) && hasLiveEmbeds(editor) && global$1.ceFalse) {
                    if (!isWithinEmbedWrapper(node)) {
                        node.replace(createPreviewNode(editor, node));
                    }
                } else {
                    if (!isWithinEmbedWrapper(node)) {
                        node.replace(createPlaceholderNode(editor, node));
                    }
                }
            }
        };
    };

    var setup$1 = function (editor) {
        editor.on('preInit', function () {
            var specialElements = editor.schema.getSpecialElements();
            global$8.each('video audio iframe object'.split(' '), function (name) {
                specialElements[name] = new RegExp('</' + name + '[^>]*>', 'gi');
            });
            var boolAttrs = editor.schema.getBoolAttrs();
            global$8.each('webkitallowfullscreen mozallowfullscreen allowfullscreen'.split(' '), function (name) {
                boolAttrs[name] = {};
            });
            editor.parser.addNodeFilter('iframe,video,audio,object,embed,script', placeHolderConverter(editor));
            editor.serializer.addAttributeFilter('data-mce-object', function (nodes, name) {
                var i = nodes.length;
                var node;
                var realElm;
                var ai;
                var attribs;
                var innerHtml;
                var innerNode;
                var realElmName;
                var className;
                while (i--) {
                    node = nodes[i];
                    if (!node.parent) {
                        continue;
                    }
                    realElmName = node.attr(name);
                    realElm = new global$2(realElmName, 1);
                    if (realElmName !== 'audio' && realElmName !== 'script') {
                        className = node.attr('class');
                        if (className && className.indexOf('mce-preview-object') !== -1) {
                            realElm.attr({
                                width: node.firstChild.attr('width'),
                                height: node.firstChild.attr('height')
                            });
                        } else {
                            realElm.attr({
                                width: node.attr('width'),
                                height: node.attr('height')
                            });
                        }
                    }
                    realElm.attr({ style: node.attr('style') });
                    attribs = node.attributes;
                    ai = attribs.length;
                    while (ai--) {
                        var attrName = attribs[ai].name;
                        if (attrName.indexOf('data-mce-p-') === 0) {
                            realElm.attr(attrName.substr(11), attribs[ai].value);
                        }
                    }
                    if (realElmName === 'script') {
                        realElm.attr('type', 'text/javascript');
                    }
                    innerHtml = node.attr('data-mce-html');
                    if (innerHtml) {
                        innerNode = new global$2('#text', 3);
                        innerNode.raw = true;
                        innerNode.value = sanitize(editor, unescape(innerHtml));
                        realElm.append(innerNode);
                    }
                    node.replace(realElm);
                }
            });
        });
        editor.on('SetContent', function () {
            editor.$('span.mce-preview-object').each(function (index, elm) {
                var $elm = editor.$(elm);
                if ($elm.find('span.mce-shim').length === 0) {
                    $elm.append('<span class="mce-shim"></span>');
                }
            });
        });
    };

    var setup = function (editor) {
        editor.on('ResolveName', function (e) {
            var name;
            if (e.target.nodeType === 1 && (name = e.target.getAttribute('data-mce-object'))) {
                e.name = name;
            }
        });
    };

    var register = function (editor) {
        var onAction = function () {
            return editor.execCommand('mceMedia');
        };
        editor.ui.registry.addToggleButton('exemedia', {
            tooltip: _('Insert/Edit media'),
            icon: 'embed',
            onAction: onAction,
            onSetup: function (buttonApi) {
                var selection = editor.selection;
                buttonApi.setActive(isMediaElement(selection.getNode()));
                return selection.selectorChangedWithUnbind('img[data-mce-object],span[data-mce-object],div[data-ephox-embed-iri]', buttonApi.setActive).unbind;
            }
        });
        editor.ui.registry.addMenuItem('exemedia', {
            icon: 'embed',
            text: 'Media...',
            onAction: onAction
        });
    };

    function Plugin() {
        global$9.add('exemedia', function (editor) {
            register$1(editor);
            register(editor);
            setup(editor);
            setup$1(editor);
            setup$2(editor);
            return get(editor);
        });
    }

    Plugin();

}());