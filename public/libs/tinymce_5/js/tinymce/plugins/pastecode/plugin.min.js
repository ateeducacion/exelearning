/**
 * plugin.min.js
 *
 * Released under Attribution-ShareAlike 4.0 International License.
 * Author: Ignacio Gros (http://gros.es/) for http://exelearning.net/
 *
 * License: http://creativecommons.org/licenses/by-sa/4.0/
 */

/**
 * Insert HTML code or HTML code as text
 * Don't forget to add some styles to theme/site so the code has the same appearance everywhere (see eXe's base.css file)
 * Syntax highlighting options to be used with /exe/webui/scripts/exe_highlighter/ (Prism, by Lea Verou, under the MIT license)
 */
tinymce.PluginManager.add('pastecode', function (editor, url) {

	let $ = tinymce.dom.DomQuery;

	function setCodeAttribs() {

		let divMain = $('div.tox-form').eq(0);

		// add id to checkboxes 
		let firsline = divMain.children().eq(0);
		tinymce.DOM.setStyles(firsline, { 'display': 'flex' });
		let checkboxWrapper = firsline.children().eq(0);
		let checkboxHighlight = firsline.children().eq(1);

		tinymce.DOM.setAttrib(checkboxWrapper, { 'id': 'wrapper' });
		tinymce.DOM.setAttrib(checkboxHighlight, { 'id': 'highlight' });
		// tinymce.DOM.setStyle(checkboxHighlight, 'display', 'flex' );

		// add id to container options
		let containerHighlightOptions = divMain.children().eq(1);
		tinyMCE.DOM.setAttrib(containerHighlightOptions, 'id', 'highlightOptions');
		tinymce.DOM.setStyles(containerHighlightOptions, { 'display': 'flex', 'flex-direction': 'column', 'text-align': 'left', 'padding-top': 10, 'min-height': 80 });

		// AÃ±adimos css a las filas 

		let firstChild = containerHighlightOptions.children().eq(0);
		tinyMCE.DOM.setAttrib(firstChild, 'id', 'highlightOptionsA');
		tinyMCE.DOM.setStyles(firstChild, { 'display': 'flex', 'text-align': 'left' });
		let secondChild = containerHighlightOptions.children().eq(1);
		tinyMCE.DOM.setAttrib(secondChild, 'id', 'highlightOptionsB');
		tinyMCE.DOM.setStyles(secondChild, { 'display': 'flex', 'text-align': 'left', 'padding-top': 15 });

		for (let i = 0; i < firstChild.children().length; i++) {
			if (i != 0) {
				tinymce.DOM.setStyle(firstChild.children().eq(i), 'margin-left', 15);
			}
			if (i == 1 || i == 3) {
				tinymce.DOM.setStyle(firstChild.children().eq(i), 'min-width', 150);
			}
			else {
				tinymce.DOM.setStyle(firstChild.children().eq(i), 'padding', '8px 0');
			}
		}

		for (let i = 0; i < secondChild.children().length; i++) {
			if (i != 0) {
				tinymce.DOM.setStyle(secondChild.children().eq(i), 'margin-left', 15);
			}
			if (i == 2) {
				tinymce.DOM.setStyle(secondChild.children().eq(i), 'width', 150);
			} else if (i == 1 || i == 3) {
				tinymce.DOM.setStyle(secondChild.children().eq(i), 'padding', '8px 0');
			}
		}

		// add id highlightLang y highlightTheme
		let listboxLang = firstChild.children().eq(1).children().eq(0);
		tinyMCE.DOM.setAttrib(listboxLang, 'id', 'highlightLang');

		let listboxTheme = firstChild.children().eq(3).children().eq(0);
		tinyMCE.DOM.setAttrib(listboxTheme, 'id', 'highlightTheme');


		// add id highlightLineNo y highlightLines
		let checkboxLineN = secondChild.children().eq(0);
		tinyMCE.DOM.setAttrib(checkboxLineN, 'id', 'highlightLineNo');
		let inputLines = secondChild.children().eq(2).children().eq(0);
		tinyMCE.DOM.setAttrib(inputLines, 'id', 'highlightLines');

		tinyMCE.DOM.setStyle(divMain.children().eq(2), 'padding-top', 10);
		// add id to textarea
		let divHtmlSource = divMain.children().eq(3);
		tinyMCE.DOM.setStyle(divHtmlSource, 'padding-top', 10);
		let textareaHtmlSource = divHtmlSource.children().eq(0);
		tinymce.DOM.setAttrib(textareaHtmlSource, { 'id': 'htmlSource' });
		tinymce.DOM.setStyles(textareaHtmlSource, { 'min-height': 200 });

	}

	function setHTMLAttribs() {

		// add id to textarea
		let divHtmlSource = $('div.tox-form__group').eq(1);
		let textareaHtmlSource = divHtmlSource.children().eq(0);
		tinymce.DOM.setAttrib(textareaHtmlSource, { 'id': 'htmlSource' });

	}

	
	PasteCodeDialog = {
		
		actualWrapper: true,
		actualHighlight: false,
		actualHighlightLang: '',
		actualHighlightTheme: '',
		actualHighlightLineNo: false,
		actualHighlightLines: '',
		actualHtmlSource: '',
	
		getInitialData:function () {
			let data = {
				wrapper: PasteCodeDialog.actualWrapper,
				highlight: PasteCodeDialog.actualHighlight,
				highlightLang: PasteCodeDialog.actualHighlightLang,
				highlightTheme: PasteCodeDialog.actualHighlightTheme,
				highlightLineNo: PasteCodeDialog.actualHighlightLineNo,
				highlightLines: PasteCodeDialog.actualHighlightLines,
				htmlSource: PasteCodeDialog.actualHtmlSource
			}
	
			return data;
		},
	
		setDefaultData: function() {
			PasteCodeDialog.actualWrapper = true;
			PasteCodeDialog.actualHighlight = false;
			PasteCodeDialog.actualHighlightLang = '';
			PasteCodeDialog.actualHighlightTheme = '';
			PasteCodeDialog.actualHighlightLineNo = false;
			PasteCodeDialog.actualHighlightLines = '';
			PasteCodeDialog.actualHtmlSource = '';
		},

		// Load the previous values (if needed)
		getValues: function () {

			// PasteCodeDialog.toggle("highlightOptions", false);

			var sel = tinyMCE.activeEditor.selection;
			var v = sel.getContent({ format: 'text' });
			var node = sel.getNode();

			this.initialValue = v;
			this.isCodeTag = false;
			this.isInPRE = false;
			this.isWrapped = false;

			if (node.nodeName == "CODE") {
				this.isCodeTag = true;
				var c = node.innerHTML;
				c = c.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>');
				v = c;
				// var wrapper = win.find('#wrapper')[0];
				// Check if it's  <pre><code></code></pre> and if it has wrapper
				var pre = node.parentNode;
				if (pre.nodeName == "PRE") {

					this.isInPRE = true;
					// wrapper.checked(false);
					PasteCodeDialog.actualWrapper = false;

					var block = pre.parentNode.parentNode;
					var k = block.className;
					if (block.nodeName == "DIV" && (k == "pre-code" || k.indexOf("highlighted-code") == 0)) {
						this.isWrapped = true;
						// wrapper.checked(true);
						PasteCodeDialog.actualWrapper = true;

						// Syntax highlighting
						if (k.indexOf("highlighted-code") == 0) {
							// win.find('#highlight')[0].checked(true);
							PasteCodeDialog.actualHighlight = true;
							// Check the highlighting options
							// CSS classes example: highlighted-code code-style-2 language-js line-numbers hightlight-1-2and5
							if (k.indexOf(" code-style-2") != -1) {
								// win.find('#highlightTheme')[0].value("code-style-2"); // Dark
								PasteCodeDialog.actualHighlightTheme = "code-style-2"; // Dark
							}
							if (k.indexOf(" language-") != -1) {
								var lang = k.split("language-");
								if (lang.length > 1) {
									lang = lang[1].split(" ");
									lang = lang[0];
									if (lang != "") {
										// win.find('#highlightLang')[0].value(lang);
										PasteCodeDialog.actualHighlightLang = lang;
									}
								}
							}
							if (k.indexOf(" line-numbers") != -1) {
								// win.find('#highlightLineNo')[0].checked(true);
								PasteCodeDialog.actualHighlightLineNo = true;
							}
							if (k.indexOf(" hightlight-") != -1) {
								var lines = k.split(" hightlight-");
								if (lines.length > 1) {
									lines = lines[1].split(" ");
									lines = lines[0];
									if (lines != "") {
										lines = lines.replace(/\and/g, ',');
										// win.find('#highlightLines')[0].value(lines);
										PasteCodeDialog.actualHighlightLines = lines;
									}
								}
							}
						} // / Syntax highlighting

					}

				} else {
					// wrapper.checked(false);
					PasteCodeDialog.actualWrapper = false;
				}
			} else {
				// New code
				// Get hre previous preferences
				if (PasteCodeDialog.getCookie("PasteCodeDialogPreference_Wrapper")==0) {
					// win.find('#wrapper')[0].checked(false);
					PasteCodeDialog.actualWrapper = false;
				} else {
					if (PasteCodeDialog.getCookie("PasteCodeDialogPreference_Highlight")==1) {
						// win.find('#highlight')[0].checked(true);
						PasteCodeDialog.actualHighlight = true;
					}
					var PasteCodeDialogPreference_HighlightLang = PasteCodeDialog.getCookie("PasteCodeDialogPreference_HighlightLang");
					if (PasteCodeDialogPreference_HighlightLang!='') {
						// win.find('#highlightLang')[0].value(PasteCodeDialogPreference_HighlightLang);
						PasteCodeDialog.actualHighlightLang = PasteCodeDialogPreference_HighlightLang;
					}
					var PasteCodeDialogPreference_HighlightTheme = PasteCodeDialog.getCookie("PasteCodeDialogPreference_HighlightTheme");
					if (PasteCodeDialogPreference_HighlightTheme!='') {
						// win.find('#highlightTheme')[0].value("code-style-2"); // Dark
						PasteCodeDialog.actualHighlightTheme = "code-style-2"; // Dark
					} else {
						PasteCodeDialog.actualHighlightTheme = "";
					}
					if (PasteCodeDialog.getCookie("PasteCodeDialogPreference_HighlightLines")==1) {
						// win.find('#highlightLineNo')[0].checked(true);
						PasteCodeDialog.actualHighlightLineNo = true;
					}
				}
			}
			// win.find('#htmlSource')[0].value(v);
			PasteCodeDialog.actualHtmlSource = v;
		},
		
		setCookie: function(cname, cvalue) {
			var d = new Date();
			d.setTime(d.getTime() + (30*24*60*60*1000));
			var expires = "expires="+ d.toUTCString();
			document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/;SameSite=Lax";
		},

		getCookie : function(cname) {
			var name = cname + "=";
			var decodedCookie = decodeURIComponent(document.cookie);
			var ca = decodedCookie.split(';');
			for(var i=0;i<ca.length;i++) {
				var c = ca[i];
				while (c.charAt(0) == ' ') c = c.substring(1);
				if (c.indexOf(name) == 0) return c.substring(name.length, c.length);
			}
			return "";
		},

		// Create or update the content
		insert: function (content) {
			
			// Cookies (default values)
			var PasteCodeDialogPreference_Wrapper = 0;
			var PasteCodeDialogPreference_Highlight = 0;
			var PasteCodeDialogPreference_HighlightLang = "";
			var PasteCodeDialogPreference_HighlightTheme = "";
			var PasteCodeDialogPreference_HighlightLines = 0;				

			if (content == "") return "";

			var editor = tinyMCE.activeEditor;

			// Code (the content)
			var t = content.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
			var extra = "";
			if (!this.isCodeTag) extra = "<br />";
			var c = "<pre><code>" + t + "</code></pre>" + extra;

			// Include wrapper if checked
			// var wrapper = win.find('#wrapper')[0].checked();
			var wrapper = PasteCodeDialog.actualWrapper;

			if (wrapper) {

				var defaultClass = "pre-code"; // No syntax highlighting

				// var highlight = win.find('#highlight')[0].checked();
				var highlight = PasteCodeDialog.actualHighlight;
				
				// Save the preferences
				PasteCodeDialogPreference_Wrapper = 1;				

				// Syntax highlighting
				if (highlight) {

					// var lang = win.find('#highlightLang')[0].value();
					var lang = PasteCodeDialog.actualHighlightLang;

					if (lang == "") {
						editor.windowManager.alert(_('Select a language.'));
						return false;
					}
					defaultClass = "highlighted-code";

					// var skin = win.find('#highlightTheme')[0].value();
					// var showLines = win.find('#highlightLineNo')[0].checked();
					// var linesToShow = win.find('#highlightLines')[0].value();
					var skin = PasteCodeDialog.actualHighlightTheme;
					var showLines = PasteCodeDialog.actualHighlightLineNo;
					var linesToShow = PasteCodeDialog.actualHighlightLines;

					// Dark or default
					if (skin != "") defaultClass += " " + skin;
					// Language
					defaultClass += " language-" + lang;
					// Show line numbers + Highlight specific lines
					if (showLines || linesToShow != "") {
						defaultClass += " line-numbers";
						if (linesToShow != "") {
							defaultClass += " hightlight-" + linesToShow.replace(/\,/g, 'and');
						}
					}
					
					// Save the preferences
					PasteCodeDialogPreference_Highlight = 1;
					PasteCodeDialogPreference_HighlightLang = lang;
					PasteCodeDialogPreference_HighlightTheme = skin;
					if (showLines) PasteCodeDialogPreference_HighlightLines = 1;					

				}
				// / Syntax highlighting

				c = "<div class='" + defaultClass + "'><div><pre><code>" + t + "</code></pre></div></div>" + extra;

			} else {

				if (this.initialValue != "") c = "<code>" + t + "</code>";

			}

			// Insert the content
			if (this.isCodeTag == false) {

				// New content
				editor.insertContent(c);

			} else {

				// Upate the selected content
				var ed = editor;
				var node = ed.selection.getNode();
				var pre = node.parentNode;
				var block = pre.parentNode.parentNode;

				// The  current CODE tag is inside a PRE tag
				if (this.isInPRE) {

					if (wrapper) {
						if (this.isWrapped) {
							// It's wrapped, so we just update the content and the classes
							ed.dom.setHTML(node, t);
							block.className = defaultClass;
						} else {
							// It's a PRE tag, but not wrapped, so we wrap it
							ed.dom.remove(pre);
							ed.execCommand('mceInsertContent', false, c);
						}
					} else {
						if (this.isWrapped) {
							// It was wrapped, so we remove the wrapper and just add the new content
							ed.dom.remove(block);
							ed.execCommand('mceInsertContent', false, c);
						} else {
							// It has no wrapper, so we just update the content
							ed.dom.setHTML(node, t);
						}
					}

				} else {

					// The  current CODE tag is not inside a PRE tag
					if (wrapper) {
						// It has no wrapper, so we wrap it
						ed.dom.remove(node);
						ed.execCommand('mceInsertContent', false, c);
					} else {
						// We just update the content
						ed.dom.setHTML(node, t);
					}

				}
			}
			
			// Update the cookies
			PasteCodeDialog.setCookie("PasteCodeDialogPreference_Wrapper",PasteCodeDialogPreference_Wrapper);
			PasteCodeDialog.setCookie("PasteCodeDialogPreference_Highlight",PasteCodeDialogPreference_Highlight);
			PasteCodeDialog.setCookie("PasteCodeDialogPreference_HighlightLang",PasteCodeDialogPreference_HighlightLang);
			PasteCodeDialog.setCookie("PasteCodeDialogPreference_HighlightTheme",PasteCodeDialogPreference_HighlightTheme);
			PasteCodeDialog.setCookie("PasteCodeDialogPreference_HighlightLines",PasteCodeDialogPreference_HighlightLines);			

			// Close the editor
			editor.windowManager.close();

		},

		// Syntax highlighter			
		toggle: function (id, val) {

			// Hide or show the block
			var display = "flex";
			if (val == false) display = "none";
			var block = document.getElementById(id);
			block.style.display = display;
			// tinymce.DOM.hide(block);

			var optionsBlock = block;
			if (id == "highlight") optionsBlock = document.getElementById("highlightOptions");
			var isVisible = jQuery(optionsBlock).is(":visible");

			if (id == "highlight" && val == false) {
				if (isVisible) {
					PasteCodeDialog.toggle("highlightOptions", false);

				}
				return;
			}

			// // As TinyMCE reflow is not triggered, we have to move some elements

			// // Get the height of the hidden/shown block
			// var blockHeight = parseFloat(block.style.height);

			// // Get the next blocks and ther height
			// var label = jQuery("label[for=htmlSource]");
			// var field = jQuery("#htmlSource");
			// var labelTop = parseFloat(label.css("top"));
			// var fieldTop = parseFloat(field.css("top"));

			// // Update the next blocks height
			// if (val == false) {
			// 	win.find('#highlight')[0].checked(false);
			// 	label.css("top", (labelTop - blockHeight) + "px");
			// 	field.css("top", (fieldTop - blockHeight) + "px");
			// } else {
			// 	if (!isVisible) return;
			// 	label.css("top", (labelTop + blockHeight) + "px");
			// 	field.css("top", (fieldTop + blockHeight) + "px");
			// }

		},

		openCodeDialog: function () {
			PasteCodeDialog.getValues();

			// Open the window and load the previous values
			win = editor.windowManager.open({
				title: _('Insert HTML code as text'),
				// width: 600,
				// height: 350,
				body: {
					type: 'panel',
					items: [
						{
							type: 'panel',
							// layout: 'flex',
							// direction: 'row',
							// align: 'center',
							// spacing: 15,
							// minHeight: 35,
							items: [
								{
									type: 'checkbox',
									name: 'wrapper',
									// id: 'wrapper',
									// checked: true,
									label: _('Include Styles (improves presentation)'),
									// onchange: function () {
									// 	PasteCodeDialog.toggle('highlight', this.state.get("checked"))
									// }
								},
								{
									type: 'checkbox',
									name: 'highlight',
									// id: 'highlight',
									// checked: false,
									label: _('Highlight syntax'),
									// onchange: function () {
									// 	PasteCodeDialog.toggle('highlightOptions', this.state.get("checked"))
									// }
								}
							]
						},
						{
							type: 'panel',
							// id: 'highlightOptions',
							// layout: 'flex',
							// direction: 'column',
							// align: 'left',
							// spacing: 15,
							// minHeight: 80,
							items: [

								{
									type: 'panel',
									// id: 'highlightOptionsA',
									// layout: 'flex',
									// direction: 'row',
									// align: 'center',
									// spacing: 15,
									items: [
										{
											type: 'label',
											label: _('Markup language'),
											// forId: 'highlightLang'
											items: []
										},
										{
											type: 'listbox',
											// minWidth: 150,
											name: 'highlightLang',
											// id: 'highlightLang',
											items: [
												{ text: _('-- Not Set --'), value: '' },
												{ text: _('Markup (HTML, etc.)'), value: 'markup' },
												{ text: 'ASP.net', value: 'aspnet' },
												{ text: _('C type'), value: 'clike' },
												{ text: 'C', value: 'c' },
												{ text: 'C++', value: 'cpp' },
												{ text: 'CSS', value: 'css' },
												{ text: 'Java', value: 'java' },
												{ text: 'JavaScript', value: 'js' },
												{ text: 'JSON', value: 'json' },
												{ text: 'LaTeX', value: 'latex' },
												{ text: 'Pascal', value: 'pascal' },
												{ text: 'Perl', value: 'perl' },
												{ text: 'PHP', value: 'php' },
												{ text: 'Processing', value: 'processing' },
												{ text: 'Python', value: 'python' },
												{ text: 'R', value: 'r' },
												{ text: 'Ruby', value: 'ruby' },
												{ text: 'SQL', value: 'sql' }
											]
											// , value: '3'
										},
										{
											type: 'label',
											label: _('Appearance'),
											// forId: 'highlightTheme'
											items: []
										},
										{
											type: 'listbox',
											// minWidth: 150,
											name: 'highlightTheme',
											// id: 'highlightTheme',
											items: [
												{ text: _('Light'), value: '' },
												{ text: _('Dark'), value: 'code-style-2' }
											]
										}
									]
								},
								{
									type: 'panel',
									// id: 'highlightOptionsB',
									// layout: 'flex',
									// direction: 'row',
									// align: 'center',
									// spacing: 15,
									items: [
										{
											type: 'checkbox',
											name: 'highlightLineNo',
											// id: 'highlightLineNo',
											// checked: false,
											label: _('Line numbers')
										},
										{
											type: 'label',
											label: _('Line highlight'),
											// forId: 'highlightLines'
											items: []
										},
										{
											type: 'input',
											// id: 'highlightLines',
											name: 'highlightLines',
											// minWidth: 150
										},
										{
											type: 'label',
											label: _('Example') + ": 1,5-8,11",
											items: []
										}
									]
								}
							]
						},
						{
							type: 'label',
							label: _('Use CTRL+V on your keyboard to paste the code into the window.'),
							// forId: 'htmlSource'
							items: []
						},
						{
							type: 'textarea',
							// id: 'htmlSource',
							name: 'htmlSource',
							// minHeight: 150,
							// value: ...(),
							// multiline: true
						}
					],
				},
				buttons: [
					{
						type: 'cancel',
						name: 'cancel',
						text: 'Cancel'
					},
					{
						type: 'submit',
						name: 'save',
						text: 'Save',
						primary: true
					}
				],
				size: 'medium',
				initialData: PasteCodeDialog.getInitialData(),
				onChange: function (api, details) {
					switch (details.name) {
						case 'wrapper':
							PasteCodeDialog.actualWrapper = api.getData().wrapper;
							if (!PasteCodeDialog.actualWrapper) {
								api.setData({ highlight: false });
							}
							PasteCodeDialog.toggle('highlight', PasteCodeDialog.actualWrapper);
							break;
						case 'highlight':
							PasteCodeDialog.actualHighlight = api.getData().highlight;
							PasteCodeDialog.toggle('highlightOptions', PasteCodeDialog.actualHighlight);
							break;
						case 'highlightLang':
							PasteCodeDialog.actualHighlightLang = api.getData().highlightLang;
							break;
						case 'highlightTheme':
							PasteCodeDialog.actualHighlightTheme = api.getData().highlightTheme;
							break;
						case 'highlightLineNo':
							PasteCodeDialog.actualHighlightLineNo = api.getData().highlightLineNo;
							break;
					}
				},
				onSubmit: function (api) {

					PasteCodeDialog.actualHighlightLines = api.getData().highlightLines;
					PasteCodeDialog.actualHtmlSource = api.getData().htmlSource;

					// Insert content when the window form is submitted
					PasteCodeDialog.insert(PasteCodeDialog.actualHtmlSource);
					return false;
				}
			});
			// PasteCodeDialog.getValues();

			setCodeAttribs();

			let divDialog = $('div.tox-dialog').eq(0);
			tinymce.DOM.setStyle(divDialog, 'width', 600);

			PasteCodeDialog.toggle("highlightOptions", PasteCodeDialog.actualHighlight);

		}, // openCodeDialog

		activateButton: function (node) {

			var nodeName = node.nodeName;
			var activate = false;
			var parentDIVs = editor.dom.getParents(node, 'div');

			if (nodeName == "PRE" || nodeName == "CODE") {
				if (parentDIVs.length > 1) {
					for (var i = 0; i < parentDIVs.length; i++) {
						// if (parentDIVs[i].className.indexOf("pre-code") != -1) activate = true;
						if (parentDIVs[i].className.indexOf("pre-code") != -1 || parentDIVs[i].className.indexOf("highlighted-code") != -1) {
							activate = true;
						}
					}
				}
			}

			return activate;

		},

		openHTMLDialog: function () {

			// Open the window
			win = editor.windowManager.open({
				title: _('Paste HTML fragment (embed code)'),
				// width: 500,
				// height: 222,
				body:
				{
					type: 'panel',
					items: [
						{
							type: 'label',
							label: _('Use CTRL+V on your keyboard to paste the code into the window.'),
							items: []
							// forId: 'htmlSource'
						},
						{
							type: 'textarea',
							// id: 'htmlSource',
							name: 'htmlSource'
							// minHeight: 150,
							// value: ...(),
							// multiline: true
						}
					]
				},
				buttons: [
					{
						type: 'cancel',
						name: 'cancel',
						text: 'Cancel'
					},
					{
						type: 'submit',
						name: 'save',
						text: 'Save',
						primary: true
					}
				],
				// initialData: getInitialData(),
				onSubmit: function (api) {
					// Insert content when the window form is submitted
					editor.execCommand('mceInsertContent', false, api.getData().htmlSource);

					api.close();
				},
				onClose: function () {
					PasteCodeDialog.setDefaultData();
				}
			});

			setHTMLAttribs();

			let divDialog = $('div.tox-dialog').eq(0);
			tinymce.DOM.setStyle(divDialog, 'height', 400);

		}

	} // PasteCodeDialog	

	editor.ui.registry.addIcon('pastecode', `
	<?xml version="1.0" encoding="utf-8"?>
	<!-- Generator: Adobe Illustrator 16.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
	<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
	<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
		 width="24px" height="24px" viewBox="0 0 24 24" enable-background="new 0 0 24 24" xml:space="preserve">
	<desc>Created with Sketch.</desc>
	<path d="M18.24,4.783H5.761c-1.092,0-1.979,0.858-1.979,1.919v10.597c0,1.061,0.886,1.918,1.979,1.918H18.24
		c1.092,0,1.977-0.857,1.977-1.918V6.702C20.217,5.642,19.332,4.783,18.24,4.783z M11.426,16.074l-1.414,1.414l-4.848-4.848
		L10.2,7.606l1.414,1.414l-3.621,3.621L11.426,16.074z M14.371,17.488l-1.414-1.414l3.434-3.434L12.77,9.02l1.414-1.414l5.035,5.035
		L14.371,17.488z"/>
	</svg>`);
	editor.ui.registry.addIcon('pastehtml', `
	<?xml version="1.0" encoding="utf-8"?>
	<!-- Generator: Adobe Illustrator 16.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
	<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
	<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
		 width="24px" height="24px" viewBox="0 0 24 24" enable-background="new 0 0 24 24" xml:space="preserve">
	<desc>Created with Sketch.</desc>
	<path d="M11.426,16.074l-1.414,1.414l-4.848-4.848L10.2,7.606l1.414,1.414l-3.621,3.621L11.426,16.074z M14.371,17.488l-1.414-1.414
		l3.434-3.434L12.77,9.02l1.414-1.414l5.035,5.035L14.371,17.488z"/>
	</svg>
	`);

	editor.ui.registry.addToggleButton('pastecode', {
		image: url + '/img/pastecode.png',
		icon: 'pastecode',
		// text: 'code',
		tooltip: _('Insert HTML code as text'),
		onAction: PasteCodeDialog.openCodeDialog,
		onSetup: function (buttonApi) {
			var editorEventCallback = function (eventApi) {
				buttonApi.setActive(PasteCodeDialog.activateButton(eventApi.element));
			};
			editor.on('NodeChange', editorEventCallback);
			return function (buttonApi) {
				editor.off('NodeChange', editorEventCallback);
			}
		}
	});

	editor.ui.registry.addButton('pastehtml', {
		image: url + '/img/pastehtml.png',
		icon: 'pastehtml',
		// text: 'html',
		tooltip: _('Paste HTML fragment (embed code)'),
		onAction: PasteCodeDialog.openHTMLDialog
	});

	editor.ui.registry.addMenuItem('pastecode', {
		// icon: 'image',
		icon: 'pastecode',
		text: _('Insert HTML code as text'),
		onAction: PasteCodeDialog.openCodeDialog,
		context: 'insert'
	});

	editor.ui.registry.addMenuItem('pastehtml', {
		// icon: 'image',
		icon: 'pastehtml',
		text: _('Paste HTML fragment (embed code)'),
		onAction: PasteCodeDialog.openHTMLDialog,
		context: 'insert'
	});

	editor.on('init', function (e) {
		editor.dom.loadCSS(url + "/css/content.css");
	});

});