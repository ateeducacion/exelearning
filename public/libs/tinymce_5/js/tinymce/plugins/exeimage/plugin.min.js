/**
 * Copyright (c) Tiny Technologies, Inc. All rights reserved.
 * Licensed under the LGPL or a commercial license.
 * For LGPL see License.txt in the project root for license information.
 * For commercial licenses see https://www.tiny.cloud/
 *
 * Version: 5.10.2 (2021-11-17)
 */
(function () {
  'use strict';

  let lang = 'en';
  let idSelectedImage = '';
  let numero_imagenes = 0;
  let img_v_style = 'none';
  let currentAlignStyle = '';
  let alignImageStyle = '';
  let style_for_div = '';
  let attibutionTab = false;
  let actualAlign = 'position-center';

  let bm = '';

  // replace var Dialog return {open:open}
  async function doit(editor) {

    var helpers = {
      onSubmit: submitHandler(editor),
      imageSize: imageSize(editor),
      addToBlobCache: addToBlobCache(editor),
      createBlobCache: createBlobCache(editor),
      alertErr: alertErr(editor),
      normalizeCss: normalizeCss(editor),
      parseStyle: parseStyle(editor),
      serializeStyle: serializeStyle(editor),
      uploadImage: uploadImage(editor)
    };

    await collect(editor).then(makeDialog(helpers)).then(editor.windowManager.open);

    // bookmark selected image
    bm = tinymce.activeEditor.selection.getBookmark();

    setGenTabStyle();
    setDialogStyle();
  }

  function setDialogStyle() {
    let divDialog = $('div.tox-dialog').eq(0);
    tinymce.DOM.setStyles(divDialog, { 'min-width': 600 });

    let divBody = $('div.tox-dialog__body').eq(0);
    tinymce.DOM.setStyles(divBody, { 'display': 'grid', 'grid-template-columns': '1fr' });

    let divNavbar = $('div.tox-dialog__body-nav').eq(0);
    tinymce.DOM.removeClass(divNavbar, 'tox-dialog__body-nav');
    tinymce.DOM.setStyle(divNavbar, 'margin-top', 10);

    for (let i = 0; i < divNavbar.children().length; i++) {
      tinymce.DOM.setStyles(divNavbar.children().eq(i), { 'margin-left': 20 });
    }

    let divBodyContent = $('div.tox-dialog__body-content').eq(0);
    tinymce.DOM.setStyles(divBodyContent, { 'max-height': 400 });
  }

  function setGenTabStyle() {
    let editor = tinymce.activeEditor;

    let divsInput = $('div.tox-form__group');

    for (let i = 0; i < 5; i++) {
      if (i != 1 && i != 2) {
        editor.dom.setStyles(divsInput.eq(i), { 'display': 'flex', 'margin-top': 5 });
        editor.dom.setStyles(divsInput.eq(i).children().eq(0), { 'min-width': 180, 'padding': '8px 0' });
        editor.dom.setStyles(divsInput.eq(i).children().eq(1), { 'display': 'flex', 'width': '100%' });
      }
    }

    let divBodyForm = $('div.tox-form').eq(0);

    let customFilePicker = divBodyForm.children().eq(1);
    editor.dom.setStyles(customFilePicker, { 'margin': 5 });

    let filePicker = divBodyForm.children().eq(0).children().eq(1);

    filePicker.after(customFilePicker);

    let divOptimizer = divBodyForm.children().eq(1);
    editor.dom.setStyles(divOptimizer, { 'display': 'flex', 'margin-top': 5 });
    editor.dom.setStyles(divOptimizer.children().eq(0), { 'margin-left': 180, 'width': '100%' });
    let buttonOptimizer = divOptimizer.children().eq(0);
    editor.dom.setAttribs(buttonOptimizer, { id: 'openOptimizer' });

    let idInputSrc = divBodyForm.children().eq(0).children().eq(1).children().eq(0).children().eq(0).attr("id");
    if (document.getElementById(idInputSrc).value !== "") {
      tinymce.dom.DomQuery("#openOptimizer").removeAttr("disabled");
    }

    let divDimensions = divBodyForm.children().eq(4);
    editor.dom.setStyles(divDimensions, { 'margin-top': 5 });

    // hide label width and hieght and block
    let divWidth = divDimensions.children().eq(0).children().eq(0);
    let labelWidth = divWidth.children().eq(0);
    labelWidth.hide();
    let inputWidth = divWidth.children().eq(1);
    editor.dom.setAttribs(inputWidth, { id: "width-dimension"});
    
    let divHeight = divDimensions.children().eq(0).children().eq(1);
    let labelHeight = divHeight.children().eq(0);
    labelHeight.hide();
    let inputHeight = divHeight.children().eq(1);
    editor.dom.setAttribs(inputHeight, { id: "height-dimension"});

    let divBlock = divDimensions.children().eq(0).children().eq(2);
    let labelBlock = divBlock.children().eq(0);
    labelBlock.hide();

    //Add label block dimensions
    let labelBlockDimensions = editor.dom.create('label', { 'class': 'tox-label' }, _('Constrain proportions'));
    let divBlockDimensions = editor.dom.create('div', { 'class': 'tox-form__group' }, labelBlockDimensions);
    divBlock.after(divBlockDimensions);

    //Add label X
    let labelX = editor.dom.create('label', { 'class': 'tox-label' }, 'x');
    let divLabelX = editor.dom.create('div', { 'class': 'tox-form__group', 'style': 'min-width: 8px; padding: 8px 0; margin-left: 5px' }, labelX);
    divWidth.after(divLabelX);

    //Add label dimensions
    let labelDimensions = editor.dom.create('label', { 'class': 'tox-label' }, _('Dimensions'));
    let divLabelDimensions = editor.dom.create('div', { 'class': 'tox-form__group', 'style': 'min-width: 176px' }, labelDimensions);
    divWidth.before(divLabelDimensions);

  }

  function setAdvTabStyle() {

    let divsInput = $('div.tox-form__group');

    for (let i = 0; i < 2; i++) {
      tinymce.DOM.setStyles(divsInput.eq(i), { 'display': 'flex', 'margin-top': 5 });
      tinymce.DOM.setStyles(divsInput.eq(i).children().eq(0), { 'min-width': 130, 'padding': '8px 0' });
      tinymce.DOM.setStyles(divsInput.eq(i).children().eq(1), { 'width': '100%' });
    }

    let divSpace = $('div.tox-form__grid').eq(0);
    tinymce.DOM.setStyles(divSpace, { 'margin-top': 5 });

    for (let i = 0; i < 4; i++) {
      tinymce.DOM.setStyles(divSpace.children().eq(i), { 'display': 'flex' });
      tinymce.DOM.setStyles(divSpace.children().eq(i).children().eq(0), { 'min-width': 130, 'padding': '8px 0' });
      tinymce.DOM.setStyles(divSpace.children().eq(i).children().eq(1), { 'width': '100%' });
      if (i == 2 || i == 3) {
        tinymce.DOM.setStyles(divSpace.children().eq(i), { 'margin-top': 5 });
      }
    }

  }

  function setAttributionTabStyle() {

    let divHeader = $('div.tox-form__group').eq(0);

    tinymce.DOM.setStyles(divHeader, { 'display': 'flex', 'margin-top': 5 });
    tinymce.DOM.setStyles(divHeader.children().eq(0), { 'min-width': 100, 'padding': '8px 0' });
    tinymce.DOM.setStyles(divHeader.children().eq(1), { 'width': '100%' });

    let divFooter = $('div.tox-form__group').eq(1);
    tinymce.DOM.setStyles(divFooter, { 'border': '1px solid #666', 'padding': '0px 10px 10px 10px', 'margin-top': 10 });

    // If we use fieldset, problem to select listbox

    // let fieldsetHtml = tinymce.DOM.getOuterHTML(divFooter);
    // fieldsetHtml = fieldsetHtml.replace("<div", "<fieldset");
    // //replace last
    // fieldsetHtml = fieldsetHtml.replace(/div>([^div>]*)$/, "fieldset>" + '$1');
    // tinymce.DOM.setOuterHTML(divFooter, fieldsetHtml);
    // tinymce.DOM.setStyles(divFooter, { 'margin-top': 5 });

    // let divLegend = $('fieldset.tox-form__group').children().eq(0);
    // tinymce.DOM.setStyles(divLegend, {'margin-left': 10, 'padding-left': 10});

    // let legendHtml = tinymce.DOM.getOuterHTML(divLegend);
    // legendHtml = legendHtml.replace('<label', '<legend');
    // legendHtml = legendHtml.replace('label>', 'legend>');
    // tinymce.DOM.setOuterHTML(divLegend, legendHtml);

    let divLegend = divFooter.children().eq(0);
    tinymce.DOM.setStyles(divLegend, { 'width': 'fit-content', 'padding-left': 10, 'position': 'relative', 'top': '-10px', 'left': '0px', 'background-color': 'white' });

    let newFooter = $('div.tox-form__group');
    for (let i = 1; i < newFooter.children().length; i++) {
      tinymce.DOM.setStyles(newFooter.children().eq(i), { 'display': 'flex' });
      tinymce.DOM.setStyles(newFooter.children().eq(i).children().eq(0), { 'min-width': 200, 'padding': '8px 0' });
      tinymce.DOM.setStyles(newFooter.children().eq(i).children().eq(1), { 'width': '100%' });
    }

    /**
    <legend class="tox-label" style="margin-left: 10px; padding-left: 10px;">Footer caption</legend>
    */

    // for (let i = 0; i < 2; i++) {
    //   tinymce.DOM.setStyles(divsInput.eq(i), { 'display': 'flex', 'margin-top': 5 });
    //   tinymce.DOM.setStyles(divsInput.eq(i).children().eq(0), { 'min-width': 130, 'padding': '8px 0' });
    //   tinymce.DOM.setStyles(divsInput.eq(i).children().eq(1), { 'width': '100%' });
    // }

    // let divSpace = $('div.tox-form__grid').eq(0);
    // tinymce.DOM.setStyles(divSpace, { 'margin-top': 5 });

    // for (let i = 0; i < 4; i++) {
    //   tinymce.DOM.setStyles(divSpace.children().eq(i), { 'display': 'flex' });
    //   tinymce.DOM.setStyles(divSpace.children().eq(i).children().eq(0), { 'min-width': 130, 'padding': '8px 0' });
    //   tinymce.DOM.setStyles(divSpace.children().eq(i).children().eq(1), { 'width': '100%' });
    // }


  }

  var global$6 = tinymce.util.Tools.resolve('tinymce.PluginManager');

  var __assign = function () {
    __assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    return __assign.apply(this, arguments);
  };

  var typeOf = function (x) {
    var t = typeof x;
    if (x === null) {
      return 'null';
    } else if (t === 'object' && (Array.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'Array')) {
      return 'array';
    } else if (t === 'object' && (String.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'String')) {
      return 'string';
    } else {
      return t;
    }
  };
  var isType = function (type) {
    return function (value) {
      return typeOf(value) === type;
    };
  };
  var isSimpleType = function (type) {
    return function (value) {
      return typeof value === type;
    };
  };
  var eq = function (t) {
    return function (a) {
      return t === a;
    };
  };
  var isString = isType('string');
  var isObject = isType('object');
  var isArray = isType('array');
  var isNull = eq(null);
  var isBoolean = isSimpleType('boolean');
  var isNullable = function (a) {
    return a === null || a === undefined;
  };
  var isNonNullable = function (a) {
    return !isNullable(a);
  };
  var isFunction = isSimpleType('function');
  var isNumber = isSimpleType('number');

  var noop = function () {
  };
  var constant = function (value) {
    return function () {
      return value;
    };
  };
  var identity = function (x) {
    return x;
  };
  var never = constant(false);
  var always = constant(true);

  var none = function () {
    return NONE;
  };
  var NONE = function () {
    var call = function (thunk) {
      return thunk();
    };
    var id = identity;
    var me = {
      fold: function (n, _s) {
        return n();
      },
      isSome: never,
      isNone: always,
      getOr: id,
      getOrThunk: call,
      getOrDie: function (msg) {
        throw new Error(msg || 'error: getOrDie called on none.');
      },
      getOrNull: constant(null),
      getOrUndefined: constant(undefined),
      or: id,
      orThunk: call,
      map: none,
      each: noop,
      bind: none,
      exists: never,
      forall: always,
      filter: function () {
        return none();
      },
      toArray: function () {
        return [];
      },
      toString: constant('none()')
    };
    return me;
  }();
  var some = function (a) {
    var constant_a = constant(a);
    var self = function () {
      return me;
    };
    var bind = function (f) {
      return f(a);
    };
    var me = {
      fold: function (n, s) {
        return s(a);
      },
      isSome: always,
      isNone: never,
      getOr: constant_a,
      getOrThunk: constant_a,
      getOrDie: constant_a,
      getOrNull: constant_a,
      getOrUndefined: constant_a,
      or: self,
      orThunk: self,
      map: function (f) {
        return some(f(a));
      },
      each: function (f) {
        f(a);
      },
      bind: bind,
      exists: bind,
      forall: bind,
      filter: function (f) {
        return f(a) ? me : NONE;
      },
      toArray: function () {
        return [a];
      },
      toString: function () {
        return 'some(' + a + ')';
      }
    };
    return me;
  };
  var from = function (value) {
    return value === null || value === undefined ? NONE : some(value);
  };
  var Optional = {
    some: some,
    none: none,
    from: from
  };

  var keys = Object.keys;
  var hasOwnProperty = Object.hasOwnProperty;
  var each = function (obj, f) {
    var props = keys(obj);
    for (var k = 0, len = props.length; k < len; k++) {
      var i = props[k];
      var x = obj[i];
      f(x, i);
    }
  };
  var objAcc = function (r) {
    return function (x, i) {
      r[i] = x;
    };
  };
  var internalFilter = function (obj, pred, onTrue, onFalse) {
    var r = {};
    each(obj, function (x, i) {
      (pred(x, i) ? onTrue : onFalse)(x, i);
    });
    return r;
  };
  var filter = function (obj, pred) {
    var t = {};
    internalFilter(obj, pred, objAcc(t), noop);
    return t;
  };
  var has = function (obj, key) {
    return hasOwnProperty.call(obj, key);
  };
  var hasNonNullableKey = function (obj, key) {
    return has(obj, key) && obj[key] !== undefined && obj[key] !== null;
  };

  var nativePush = Array.prototype.push;
  var flatten = function (xs) {
    var r = [];
    for (var i = 0, len = xs.length; i < len; ++i) {
      if (!isArray(xs[i])) {
        throw new Error('Arr.flatten item ' + i + ' was not an array, input: ' + xs);
      }
      nativePush.apply(r, xs[i]);
    }
    return r;
  };
  var get = function (xs, i) {
    return i >= 0 && i < xs.length ? Optional.some(xs[i]) : Optional.none();
  };
  var head = function (xs) {
    return get(xs, 0);
  };
  var findMap = function (arr, f) {
    for (var i = 0; i < arr.length; i++) {
      var r = f(arr[i], i);
      if (r.isSome()) {
        return r;
      }
    }
    return Optional.none();
  };

  typeof window !== 'undefined' ? window : Function('return this;')();

  var rawSet = function (dom, key, value) {
    if (isString(value) || isBoolean(value) || isNumber(value)) {
      dom.setAttribute(key, value + '');
    } else {
      console.error('Invalid call to Attribute.set. Key ', key, ':: Value ', value, ':: Element ', dom);
      throw new Error('Attribute value was not simple');
    }
  };
  var set = function (element, key, value) {
    rawSet(element.dom, key, value);
  };
  var remove = function (element, key) {
    element.dom.removeAttribute(key);
  };

  var fromHtml = function (html, scope) {
    var doc = scope || document;
    var div = doc.createElement('div');
    div.innerHTML = html;
    if (!div.hasChildNodes() || div.childNodes.length > 1) {
      console.error('HTML does not have a single root node', html);
      throw new Error('HTML must have a single root node');
    }
    return fromDom(div.childNodes[0]);
  };
  var fromTag = function (tag, scope) {
    var doc = scope || document;
    var node = doc.createElement(tag);
    return fromDom(node);
  };
  var fromText = function (text, scope) {
    var doc = scope || document;
    var node = doc.createTextNode(text);
    return fromDom(node);
  };
  var fromDom = function (node) {
    if (node === null || node === undefined) {
      throw new Error('Node cannot be null or undefined');
    }
    return { dom: node };
  };
  var fromPoint = function (docElm, x, y) {
    return Optional.from(docElm.dom.elementFromPoint(x, y)).map(fromDom);
  };
  var SugarElement = {
    fromHtml: fromHtml,
    fromTag: fromTag,
    fromText: fromText,
    fromDom: fromDom,
    fromPoint: fromPoint
  };

  var global$5 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');

  var global$4 = tinymce.util.Tools.resolve('tinymce.util.Promise');

  var global$3 = tinymce.util.Tools.resolve('tinymce.util.URI');

  var global$2 = tinymce.util.Tools.resolve('tinymce.util.XHR');

  var hasDimensions = function (editor) {
    return editor.getParam('image_dimensions', true, 'boolean');
  };
  var hasAdvTab = function (editor) {
    return editor.getParam('image_advtab', false, 'boolean');
  };
  var hasUploadTab = function (editor) {
    return editor.getParam('image_uploadtab', true, 'boolean');
  };
  // attribution tab
  var hasAttributionTab = function (editor) {
    return editor.getParam('exeimage_attributiontab', true, 'boolean');
  };
  var getPrependUrl = function (editor) {
    return editor.getParam('image_prepend_url', '', 'string');
  };
  var getClassList = function (editor) {
    return editor.getParam('image_class_list');
  };
  var hasDescription = function (editor) {
    return editor.getParam('image_description', true, 'boolean');
  };
  var hasImageTitle = function (editor) {
    return editor.getParam('image_title', false, 'boolean');
  };
  var hasImageCaption = function (editor) {
    return editor.getParam('image_caption', false, 'boolean');
  };
  var getImageList = function (editor) {
    return editor.getParam('image_list', false);
  };
  var hasUploadUrl = function (editor) {
    return isNonNullable(editor.getParam('images_upload_url'));
  };
  var hasUploadHandler = function (editor) {
    return isNonNullable(editor.getParam('images_upload_handler'));
  };
  var showAccessibilityOptions = function (editor) {
    return editor.getParam('a11y_advanced_options', false, 'boolean');
  };
  var isAutomaticUploadsEnabled = function (editor) {
    return editor.getParam('automatic_uploads', true, 'boolean');
  };

  var parseIntAndGetMax = function (val1, val2) {
    return Math.max(parseInt(val1, 10), parseInt(val2, 10));
  };
  var getImageSize = function (url) {
    return new global$4(function (callback) {
      var img = document.createElement('img');
      var done = function (dimensions) {
        img.onload = img.onerror = null;
        if (img.parentNode) {
          img.parentNode.removeChild(img);
        }
        callback(dimensions);
      };
      img.onload = function () {
        var width = parseIntAndGetMax(img.width, img.clientWidth);
        var height = parseIntAndGetMax(img.height, img.clientHeight);
        var dimensions = {
          width: width,
          height: height
        };
        done(global$4.resolve(dimensions));
      };
      img.onerror = function () {
        done(global$4.reject('Failed to get image dimensions for: ' + url));
      };
      var style = img.style;
      style.visibility = 'hidden';
      style.position = 'fixed';
      style.bottom = style.left = '0px';
      style.width = style.height = 'auto';
      document.body.appendChild(img);
      img.src = url;
    });
  };
  var removePixelSuffix = function (value) {
    if (value) {
      value = value.replace(/px$/, '');
    }
    return value;
  };
  var addPixelSuffix = function (value) {
    if (value.length > 0 && /^[0-9]+$/.test(value)) {
      value += 'px';
    }
    return value;
  };
  var mergeMargins = function (css) {
    if (css.margin) {
      var splitMargin = String(css.margin).split(' ');
      switch (splitMargin.length) {
        case 1:
          css['margin-top'] = css['margin-top'] || splitMargin[0];
          css['margin-right'] = css['margin-right'] || splitMargin[0];
          css['margin-bottom'] = css['margin-bottom'] || splitMargin[0];
          css['margin-left'] = css['margin-left'] || splitMargin[0];
          break;
        case 2:
          css['margin-top'] = css['margin-top'] || splitMargin[0];
          css['margin-right'] = css['margin-right'] || splitMargin[1];
          css['margin-bottom'] = css['margin-bottom'] || splitMargin[0];
          css['margin-left'] = css['margin-left'] || splitMargin[1];
          break;
        case 3:
          css['margin-top'] = css['margin-top'] || splitMargin[0];
          css['margin-right'] = css['margin-right'] || splitMargin[1];
          css['margin-bottom'] = css['margin-bottom'] || splitMargin[2];
          css['margin-left'] = css['margin-left'] || splitMargin[1];
          break;
        case 4:
          css['margin-top'] = css['margin-top'] || splitMargin[0];
          css['margin-right'] = css['margin-right'] || splitMargin[1];
          css['margin-bottom'] = css['margin-bottom'] || splitMargin[2];
          css['margin-left'] = css['margin-left'] || splitMargin[3];
      }
      delete css.margin;
    }
    return css;
  };
  var createImageList = function (editor, callback) {
    var imageList = getImageList(editor);
    if (isString(imageList)) {
      global$2.send({
        url: imageList,
        success: function (text) {
          callback(JSON.parse(text));
        }
      });
    } else if (isFunction(imageList)) {
      imageList(callback);
    } else {
      callback(imageList);
    }
  };
  var waitLoadImage = function (editor, data, imgElm) {
    var selectImage = function () {
      imgElm.onload = imgElm.onerror = null;
      if (editor.selection) {
        editor.selection.select(imgElm);
        editor.nodeChanged();
      }
    };
    imgElm.onload = function () {
      if (!data.width && !data.height && hasDimensions(editor)) {
        editor.dom.setAttribs(imgElm, {
          width: String(imgElm.clientWidth),
          height: String(imgElm.clientHeight)
        });
      }
      selectImage();
    };
    imgElm.onerror = selectImage;
  };
  var blobToDataUri = function (blob) {
    return new global$4(function (resolve, reject) {
      var reader = new FileReader();
      reader.onload = function () {
        resolve(reader.result);
      };
      reader.onerror = function () {
        reject(reader.error.message);
      };
      reader.readAsDataURL(blob);
    });
  };
  var isPlaceholderImage = function (imgElm) {
    return imgElm.nodeName === 'IMG' && (imgElm.hasAttribute('data-mce-object') || imgElm.hasAttribute('data-mce-placeholder'));
  };
  var isSafeImageUrl = function (editor, src) {
    return global$3.isDomSafe(src, 'img', editor.settings);
  };

  var DOM = global$5.DOM;
  var getHspace = function (image) {
    if (image.style.marginLeft && image.style.marginRight && image.style.marginLeft === image.style.marginRight) {
      return removePixelSuffix(image.style.marginLeft);
    } else {
      return '';
    }
  };
  var getVspace = function (image) {
    if (image.style.marginTop && image.style.marginBottom && image.style.marginTop === image.style.marginBottom) {
      return removePixelSuffix(image.style.marginTop);
    } else {
      return '';
    }
  };
  var getBorder = function (image) {
    if (image.style.borderWidth) {
      return removePixelSuffix(image.style.borderWidth);
    } else {
      return '';
    }
  };
  var getAttrib = function (image, name) {
    if (image.hasAttribute(name)) {
      return image.getAttribute(name);
    } else {
      return '';
    }
  };
  var getStyle = function (image, name) {
    return image.style[name] ? image.style[name] : '';
  };
  var hasCaption = function (image) {
    return image.parentNode !== null && image.parentNode.nodeName === 'FIGURE';
  };
  var updateAttrib = function (image, name, value) {
    if (value === '') {
      image.removeAttribute(name);
    } else {
      image.setAttribute(name, value);
    }
  };
  var wrapInFigure = function (image) {
    var figureElm = DOM.create('figure', { class: 'image' });
    DOM.insertAfter(figureElm, image);
    figureElm.appendChild(image);
    figureElm.appendChild(DOM.create('figcaption', { contentEditable: 'true' }, 'Caption'));
    figureElm.contentEditable = 'false';
  };
  var removeFigure = function (image) {
    var figureElm = image.parentNode;
    DOM.insertAfter(image, figureElm);
    DOM.remove(figureElm);
  };
  var toggleCaption = function (image) {
    if (hasCaption(image)) {
      removeFigure(image);
    } else {
      wrapInFigure(image);
    }
  };
  var normalizeStyle = function (image, normalizeCss) {
    var attrValue = image.getAttribute('style');
    var value = normalizeCss(attrValue !== null ? attrValue : '');
    if (value.length > 0) {
      image.setAttribute('style', value);
      image.setAttribute('data-mce-style', value);
    } else {
      image.removeAttribute('style');
    }
  };
  var setSize = function (name, normalizeCss) {
    return function (image, name, value) {
      if (image.style[name]) {
        image.style[name] = addPixelSuffix(value);
        normalizeStyle(image, normalizeCss);
      } else {
        updateAttrib(image, name, value);
      }
    };
  };
  var getSize = function (image, name) {
    if (image.style[name]) {
      return removePixelSuffix(image.style[name]);
    } else {
      return getAttrib(image, name);
    }
  };
  var setHspace = function (image, value) {
    var pxValue = addPixelSuffix(value);
    image.style.marginLeft = pxValue;
    image.style.marginRight = pxValue;
  };
  var setVspace = function (image, value) {
    var pxValue = addPixelSuffix(value);
    image.style.marginTop = pxValue;
    image.style.marginBottom = pxValue;
  };
  var setBorder = function (image, value) {
    var pxValue = addPixelSuffix(value);
    image.style.borderWidth = pxValue;
  };
  var setBorderStyle = function (image, value) {
    image.style.borderStyle = value;
  };
  var getBorderStyle = function (image) {
    return getStyle(image, 'borderStyle');
  };
  var isFigure = function (elm) {
    return elm.nodeName === 'FIGURE';
  };
  var isImage = function (elm) {
    return elm.nodeName === 'IMG';
  };
  var getIsDecorative = function (image) {
    return DOM.getAttrib(image, 'alt').length === 0 && DOM.getAttrib(image, 'role') === 'presentation';
  };
  var getAlt = function (image) {
    if (getIsDecorative(image)) {
      return '';
    } else {
      return getAttrib(image, 'alt');
    }
  };
  var defaultData = function () {
    return {
      src: '',
      alt: '',
      title: '',
      width: '',
      height: '',
      class: '',
      style: '',
      caption: false,
      hspace: '',
      vspace: '',
      border: '',
      borderStyle: '',
      isDecorative: false
    };
  };
  var getStyleValue = function (normalizeCss, data) {
    var image = document.createElement('img');
    updateAttrib(image, 'style', data.style);
    if (getHspace(image) || data.hspace !== '') {
      setHspace(image, data.hspace);
    }
    if (getVspace(image) || data.vspace !== '') {
      setVspace(image, data.vspace);
    }
    if (getBorder(image) || data.border !== '') {
      setBorder(image, data.border);
    }
    if (getBorderStyle(image) || data.borderStyle !== '') {
      setBorderStyle(image, data.borderStyle);
    }
    return normalizeCss(image.getAttribute('style'));
  };
  var create = function (normalizeCss, data) {
    var image = document.createElement('img');
    write(normalizeCss, __assign(__assign({}, data), { caption: false }), image);
    setAlt(image, data.alt, data.isDecorative);
    if (data.caption) {
      var figure = DOM.create('figure', { class: 'image' });
      figure.appendChild(image);
      figure.appendChild(DOM.create('figcaption', { contentEditable: 'true' }, 'Caption'));
      figure.contentEditable = 'false';
      return figure;
    } else {
      return image;
    }
  };
  var read = function (normalizeCss, image) {
    return {
      src: getAttrib(image, 'src'),
      alt: getAlt(image),
      title: getAttrib(image, 'title'),
      width: getSize(image, 'width'),
      height: getSize(image, 'height'),
      class: getAttrib(image, 'class'),
      style: normalizeCss(getAttrib(image, 'style')),
      caption: hasCaption(image),
      hspace: getHspace(image),
      vspace: getVspace(image),
      border: getBorder(image),
      borderStyle: getStyle(image, 'borderStyle'),
      isDecorative: getIsDecorative(image)
    };
  };
  var updateProp = function (image, oldData, newData, name, set) {
    if (newData[name] !== oldData[name]) {
      set(image, name, newData[name]);
    }
  };
  var setAlt = function (image, alt, isDecorative) {
    if (isDecorative) {
      DOM.setAttrib(image, 'role', 'presentation');
      var sugarImage = SugarElement.fromDom(image);
      set(sugarImage, 'alt', '');
    } else {
      if (isNull(alt)) {
        var sugarImage = SugarElement.fromDom(image);
        remove(sugarImage, 'alt');
      } else {
        var sugarImage = SugarElement.fromDom(image);
        set(sugarImage, 'alt', alt);
      }
      if (DOM.getAttrib(image, 'role') === 'presentation') {
        DOM.setAttrib(image, 'role', '');
      }
    }
  };
  var updateAlt = function (image, oldData, newData) {
    if (newData.alt !== oldData.alt || newData.isDecorative !== oldData.isDecorative) {
      setAlt(image, newData.alt, newData.isDecorative);
    }
  };
  var normalized = function (set, normalizeCss) {
    return function (image, name, value) {
      set(image, value);
      normalizeStyle(image, normalizeCss);
    };
  };
  var write = function (normalizeCss, newData, image) {
    var oldData = read(normalizeCss, image);
    updateProp(image, oldData, newData, 'caption', function (image, _name, _value) {
      return toggleCaption(image);
    });
    updateProp(image, oldData, newData, 'src', updateAttrib);
    updateProp(image, oldData, newData, 'title', updateAttrib);
    updateProp(image, oldData, newData, 'width', setSize('width', normalizeCss));
    updateProp(image, oldData, newData, 'height', setSize('height', normalizeCss));
    updateProp(image, oldData, newData, 'class', updateAttrib);
    updateProp(image, oldData, newData, 'style', normalized(function (image, value) {
      return updateAttrib(image, 'style', value);
    }, normalizeCss));
    updateProp(image, oldData, newData, 'hspace', normalized(setHspace, normalizeCss));
    updateProp(image, oldData, newData, 'vspace', normalized(setVspace, normalizeCss));
    updateProp(image, oldData, newData, 'border', normalized(setBorder, normalizeCss));
    updateProp(image, oldData, newData, 'borderStyle', normalized(setBorderStyle, normalizeCss));
    updateAlt(image, oldData, newData);
  };

  var normalizeCss$1 = function (editor, cssText) {
    var css = editor.dom.styles.parse(cssText);
    var mergedCss = mergeMargins(css);
    var compressed = editor.dom.styles.parse(editor.dom.styles.serialize(mergedCss));
    return editor.dom.styles.serialize(compressed);
  };
  var getSelectedImage = function (editor) {
    var imgElm = editor.selection.getNode();
    var figureElm = editor.dom.getParent(imgElm, 'figure.image');
    if (figureElm) {
      return editor.dom.select('img', figureElm)[0];
    }
    if (imgElm && (imgElm.nodeName !== 'IMG' || isPlaceholderImage(imgElm))) {
      return null;
    }
    return imgElm;
  };
  var splitTextBlock = function (editor, figure) {
    var dom = editor.dom;
    var textBlockElements = filter(editor.schema.getTextBlockElements(), function (_, parentElm) {
      return !editor.schema.isValidChild(parentElm, 'figure');
    });
    var textBlock = dom.getParent(figure.parentNode, function (node) {
      return hasNonNullableKey(textBlockElements, node.nodeName);
    }, editor.getBody());
    if (textBlock) {
      return dom.split(textBlock, figure);
    } else {
      return figure;
    }
  };
  var readImageDataFromSelection = function (editor) {
    var image = getSelectedImage(editor);
    return image ? read(function (css) {
      return normalizeCss$1(editor, css);
    }, image) : defaultData();
  };
  var insertImageAtCaret = function (editor, data) {
    var elm = create(function (css) {
      return normalizeCss$1(editor, css);
    }, data);
    editor.dom.setAttrib(elm, 'data-mce-id', '__mcenew');
    editor.focus();
    editor.selection.setContent(elm.outerHTML);
    var insertedElm = editor.dom.select('*[data-mce-id="__mcenew"]')[0];
    editor.dom.setAttrib(insertedElm, 'data-mce-id', null);
    if (isFigure(insertedElm)) {
      var figure = splitTextBlock(editor, insertedElm);
      editor.selection.select(figure);
    } else {
      editor.selection.select(insertedElm);
    }
  };
  var syncSrcAttr = function (editor, image) {
    editor.dom.setAttrib(image, 'src', image.getAttribute('src'));
  };
  var deleteImage = function (editor, image) {
    if (image) {
      var elm = editor.dom.is(image.parentNode, 'figure.image') ? image.parentNode : image;
      editor.dom.remove(elm);
      editor.focus();
      editor.nodeChanged();
      if (editor.dom.isEmpty(editor.getBody())) {
        editor.setContent('');
        editor.selection.setCursorLocation();
      }
    }
  };
  var writeImageDataToSelection = function (editor, data) {
    var image = getSelectedImage(editor);
    write(function (css) {
      return normalizeCss$1(editor, css);
    }, data, image);
    syncSrcAttr(editor, image);
    if (isFigure(image.parentNode)) {
      var figure = image.parentNode;
      splitTextBlock(editor, figure);
      editor.selection.select(image.parentNode);
    } else {
      editor.selection.select(image);
      waitLoadImage(editor, data, image);
    }
  };
  var sanitizeImageData = function (editor, data) {
    var src = data.src;
    return __assign(__assign({}, data), { src: isSafeImageUrl(editor, src) ? src : '' });
  };
  var insertOrUpdateImage = function (editor, partialData) {
    var image = getSelectedImage(editor);
    if (image) {
      var selectedImageData = read(function (css) {
        return normalizeCss$1(editor, css);
      }, image);
      var data = __assign(__assign({}, selectedImageData), partialData);
      var sanitizedData = sanitizeImageData(editor, data);
      if (data.src) {
        writeImageDataToSelection(editor, sanitizedData);
      } else {
        deleteImage(editor, image);
      }
    } else if (partialData.src) {
      insertImageAtCaret(editor, __assign(__assign({}, defaultData()), partialData));
    }
  };

  var deep = function (old, nu) {
    var bothObjects = isObject(old) && isObject(nu);
    return bothObjects ? deepMerge(old, nu) : nu;
  };
  var baseMerge = function (merger) {
    return function () {
      var objects = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        objects[_i] = arguments[_i];
      }
      if (objects.length === 0) {
        throw new Error('Can\'t merge zero objects');
      }
      var ret = {};
      for (var j = 0; j < objects.length; j++) {
        var curObject = objects[j];
        for (var key in curObject) {
          if (has(curObject, key)) {
            ret[key] = merger(ret[key], curObject[key]);
          }
        }
      }
      return ret;
    };
  };
  var deepMerge = baseMerge(deep);

  var isNotEmpty = function (s) {
    return s.length > 0;
  };

  var global$1 = tinymce.util.Tools.resolve('tinymce.util.ImageUploader');

  var global = tinymce.util.Tools.resolve('tinymce.util.Tools');

  var getValue = function (item) {
    return isString(item.value) ? item.value : '';
  };
  var getText = function (item) {
    if (isString(item.text)) {
      return item.text;
    } else if (isString(item.title)) {
      return item.title;
    } else {
      return '';
    }
  };
  var sanitizeList = function (list, extractValue) {
    var out = [];
    global.each(list, function (item) {
      var text = getText(item);
      if (item.menu !== undefined) {
        var items = sanitizeList(item.menu, extractValue);
        out.push({
          text: text,
          items: items
        });
      } else {
        var value = extractValue(item);
        out.push({
          text: text,
          value: value
        });
      }
    });
    return out;
  };
  var sanitizer = function (extractor) {
    if (extractor === void 0) {
      extractor = getValue;
    }
    return function (list) {
      if (list) {
        return Optional.from(list).map(function (list) {
          return sanitizeList(list, extractor);
        });
      } else {
        return Optional.none();
      }
    };
  };
  var sanitize = function (list) {
    return sanitizer(getValue)(list);
  };
  var isGroup = function (item) {
    return has(item, 'items');
  };
  var findEntryDelegate = function (list, value) {
    return findMap(list, function (item) {
      if (isGroup(item)) {
        return findEntryDelegate(item.items, value);
      } else if (item.value === value) {
        return Optional.some(item);
      } else {
        return Optional.none();
      }
    });
  };
  var findEntry = function (optList, value) {
    return optList.bind(function (list) {
      return findEntryDelegate(list, value);
    });
  };
  var ListUtils = {
    sanitizer: sanitizer,
    sanitize: sanitize,
    findEntry: findEntry
  };

  var makeTab$2 = function (_info) {
    return {
      title: 'Advanced',
      name: 'advanced',
      items: [
        {
          type: 'input',
          label: 'Style',
          name: 'style'
        },
        {
          type: 'listbox',
          name: 'alignstyle',
          label: _('Alignment'),
          items: [
            {
              text: _('-- Not Set --'),
              value: ''
            },
            {
              text: _('Baseline'),
              value: 'baseline'
            },
            {
              text: _('Top'),
              value: 'top'
            },
            {
              text: _('Middle'),
              value: 'middle'
            },
            {
              text: _('Bottom'),
              value: 'bottom'
            },
            {
              text: _('Text top'),
              value: 'text-top'
            },
            {
              text: _('Text Bottom'),
              value: 'text-bottom'
            },
            {
              text: _('Left'),
              value: 'left'
            },
            {
              text: _('Right'),
              value: 'right'
            }

          ]
        },
        {
          type: 'grid',
          columns: 2,
          items: [
            {
              type: 'input',
              label: 'Vertical space',
              name: 'vspace',
              inputMode: 'numeric'
            },
            {
              type: 'input',
              label: 'Horizontal space',
              name: 'hspace',
              inputMode: 'numeric'
            },
            {
              type: 'input',
              label: 'Border width',
              name: 'border',
              inputMode: 'numeric'
            },
            {
              type: 'listbox',
              name: 'borderstyle',
              label: 'Border style',
              items: [
                {
                  text: _('Select...'),
                  value: ''
                },
                {
                  text: _('Solid'),
                  value: 'solid'
                },
                {
                  text: _('Dotted'),
                  value: 'dotted'
                },
                {
                  text: _('Dashed'),
                  value: 'dashed'
                },
                {
                  text: _('Double'),
                  value: 'double'
                },
                {
                  text: _('Groove'),
                  value: 'groove'
                },
                {
                  text: _('Ridge'),
                  value: 'ridge'
                },
                {
                  text: _('Inset'),
                  value: 'inset'
                },
                {
                  text: _('Outset'),
                  value: 'outset'
                },
                {
                  text: _('None'),
                  value: 'none'
                },
                {
                  text: _('Hidden'),
                  value: 'hidden'
                }
              ]
            }
          ]
        }
      ]
    };
  };
  var AdvTab = { makeTab: makeTab$2 };

  var collect = function (editor) {
    var urlListSanitizer = ListUtils.sanitizer(function (item) {
      return editor.convertURL(item.value || item.url, 'src');
    });
    var futureImageList = new global$4(function (completer) {
      createImageList(editor, function (imageList) {
        completer(urlListSanitizer(imageList).map(function (items) {
          return flatten([
            [{
              text: 'None',
              value: ''
            }],
            items
          ]);
        }));
      });
    });
    var classList = ListUtils.sanitize(getClassList(editor));
    var hasAdvTab$1 = hasAdvTab(editor);
    var hasUploadTab$1 = hasUploadTab(editor);
    // attribution tab
    var hasAttributionTab$1 = hasAttributionTab(editor);
    var hasUploadUrl$1 = hasUploadUrl(editor);
    var hasUploadHandler$1 = hasUploadHandler(editor);
    var image = readImageDataFromSelection(editor);
    var hasDescription$1 = hasDescription(editor);
    var hasImageTitle$1 = hasImageTitle(editor);
    var hasDimensions$1 = hasDimensions(editor);
    var hasImageCaption$1 = hasImageCaption(editor);
    var hasAccessibilityOptions = showAccessibilityOptions(editor);
    var automaticUploads = isAutomaticUploadsEnabled(editor);
    var prependURL = Optional.some(getPrependUrl(editor)).filter(function (preUrl) {
      return isString(preUrl) && preUrl.length > 0;
    });
    return futureImageList.then(function (imageList) {
      return {
        image: image,
        imageList: imageList,
        classList: classList,
        hasAdvTab: hasAdvTab$1,
        hasUploadTab: hasUploadTab$1,
        hasUploadUrl: hasUploadUrl$1,
        hasUploadHandler: hasUploadHandler$1,
        // attribution tab
        hasAttributionTab: hasAttributionTab$1,
        hasDescription: hasDescription$1,
        hasImageTitle: hasImageTitle$1,
        hasDimensions: hasDimensions$1,
        hasImageCaption: hasImageCaption$1,
        prependURL: prependURL,
        hasAccessibilityOptions: hasAccessibilityOptions,
        automaticUploads: automaticUploads
      };
    });
  };

  var makeItems = function (info) {
    var imageUrl = {
      name: 'src',
      type: 'urlinput',
      filetype: 'image',
      label: _('Source')
    };

    var customFilePicker = {
      name: 'customfilepicker',
      type: 'button',
      icon: 'exeimage',
      text: 'eXe',
      borderless: true
    };

    // var imageOptimizer = {
    //   name: 'imageOptimizer',
    //   type: 'checkbox',
    //   label: _('Image optimizer')
    // };

    var imageOptimizer = {
      name: 'imageOptimizer',
      type: 'button',
      text: _('Optimize image'),
      disabled: true
    };

    var imageList = info.imageList.map(function (items) {
      return {
        name: 'images',
        type: 'listbox',
        label: _('Image list'),
        items: items
      };
    });
    var imageDescription = {
      name: 'alt',
      type: 'input',
      label: _('Alternative description'),
      disabled: info.hasAccessibilityOptions && info.image.isDecorative
    };
    var imageTitle = {
      name: 'title',
      type: 'input',
      label: _('Image title')
    };
    var imageDimensions = {
      name: 'dimensions',
      type: 'sizeinput'
    };
    var isDecorative = {
      type: 'label',
      label: _('Accessibility'),
      items: [{
        name: 'isDecorative',
        type: 'checkbox',
        label: _('Image is decorative')
      }]
    };
    var classList = info.classList.map(function (items) {
      return {
        name: 'classes',
        type: 'listbox',
        label: _('Class'),
        items: items
      };
    });
    var caption = {
      type: 'label',
      label: _('Caption'),
      items: [{
        type: 'checkbox',
        name: 'caption',
        label: _('Show caption')
      }]
    };
    var getDialogContainerType = function (useColumns) {
      return useColumns ? {
        type: 'grid',
        columns: 2
      } : { type: 'panel' };
    };
    return flatten([
      [imageUrl],
      [customFilePicker],
      [imageOptimizer],
      imageList.toArray(),
      info.hasAccessibilityOptions && info.hasDescription ? [isDecorative] : [],
      info.hasDescription ? [imageDescription] : [],
      info.hasImageTitle ? [imageTitle] : [],
      info.hasDimensions ? [imageDimensions] : [],
      [__assign(__assign({}, getDialogContainerType(info.classList.isSome() && info.hasImageCaption)), {
        items: flatten([
          classList.toArray(),
          info.hasImageCaption ? [caption] : []
        ])
      })]
    ]);
  };
  var makeTab$1 = function (info) {
    return {
      title: 'General',
      name: 'general',
      items: makeItems(info)
    };
  };
  var MainTab = {
    makeTab: makeTab$1,
    makeItems: makeItems
  };

  var makeTab$3 = function (_info) {
    var items = [{
      type: 'dropzone',
      name: 'fileinput'
    }];
    return {
      title: 'Upload',
      name: 'upload',
      items: items
    };
  };
  var UploadTab = { makeTab: makeTab$3 };


  // attribution tab

  function getTabContent(info) {
    return [
      {
        type: 'input',
        label: _("Header"),
        name: 'attr_imageheader'
      },
      {
        type: 'label',
        label: _('Footer caption'),
        items: [
          {
            type: 'input',
            label: _("Image Title"),
            name: 'attr_imagetitle'
          },
          {
            type: 'input',
            label: _("Title Link"),
            name: 'attr_imagetitlelink'
          },
          {
            type: 'input',
            label: _("Source/Author"),
            name: 'authorname'
          },
          {
            type: 'input',
            label: _("Source/Author Link"),
            name: 'authornamelink'
          },
          {
            type: 'listbox',
            name: 'captionlicense',
            label: _("License"),
            items: [
              { text: _("Choose a license..."), value: '' },
              { text: _("Public Domain"), value: 'pd' },
              { text: "GNU/GPL", value: 'gnu-gpl' },
              { text: "Creative Commons (" + _("Public Domain") + ")", value: 'CC0' },
              { text: "Creative Commons BY", value: 'CC-BY' },
              { text: "Creative Commons BY-SA", value: 'CC-BY-SA' },
              { text: "Creative Commons BY-ND", value: 'CC-BY-ND' },
              { text: "Creative Commons BY-NC", value: 'CC-BY-NC' },
              { text: "Creative Commons BY-NC-SA", value: 'CC-BY-NC-SA' },
              { text: "Creative Commons BY-NC-ND", value: 'CC-BY-NC-ND' },
              { text: "Copyright (" + _("All Rights Reserved") + ")", value: 'copyright' },
              { text: _("Custom license"), value: 'custom' }
            ]
          },
          {
            type: 'input',
            name: 'customcaptionlicense',
            label: _("Custom license"),
            disabled: true
          }
        ]
      }
    ]
  }

  var makeTab$4 = function (info) {
    return {
      title: _("Title and Attribution"),
      name: 'attribution',
      items: getTabContent(info)
    }
  }

  var AttributionTab = { makeTab: makeTab$4 };


  var createState = function (info) {

    return {
      prevImage: ListUtils.findEntry(info.imageList, info.image.src),
      prevAlt: info.image.alt,
      open: true
    };
  };
  var fromImageData = function (image) {

    if (image.style != "") {
      let style_string_arr = image.style.replaceAll(': ', ';').split(";");
      let index_style;
      for (let i = 0; i < style_string_arr.length; i++) {
        if (style_string_arr[i].includes('vertical-align') || style_string_arr[i].includes('float')) {
          index_style = i + 1;
        }
      }
      img_v_style = style_string_arr[index_style];
    }

    idSelectedImage = image.class;

    let figure = tinymce.activeEditor.dom.get('figure_' + idSelectedImage);

    if (figure != null) {
      if (tinymce.activeEditor.dom.hasClass(figure, 'position-center')) {
        actualAlign = 'position-center';
        img_v_style = '';
      }
      else if (tinymce.activeEditor.dom.hasClass(figure, 'position-right')) {
        actualAlign = 'position-right';
        img_v_style = 'right';
      }
      else if (tinymce.activeEditor.dom.hasClass(figure, 'position-left')) {
        actualAlign = 'position-left';
        img_v_style = 'left';
      }
      else if (tinymce.activeEditor.dom.hasClass(figure, 'float-right')) {
        actualAlign = 'float-right';
        img_v_style = 'right';
      }
      else if (tinymce.activeEditor.dom.hasClass(figure, 'float-left')) {
        actualAlign = 'float-left';
        img_v_style = 'left';
      }
      else {
        actualAlign = '';
      }
    }

    return {
      src: {
        value: image.src,
        meta: {}
      },
      images: image.src,
      alt: image.alt,
      title: image.title,
      dimensions: {
        width: image.width,
        height: image.height
      },
      classes: image.class,
      caption: image.caption,
      style: image.style,
      vspace: image.vspace,
      border: image.border,
      hspace: image.hspace,
      borderstyle: image.borderStyle,
      fileinput: [],
      isDecorative: image.isDecorative
    };
  };
  var toImageData = function (data, removeEmptyAlt) {
    return {
      src: data.src.value,
      alt: data.alt.length === 0 && removeEmptyAlt ? null : data.alt,
      title: data.title,
      width: data.dimensions.width,
      height: data.dimensions.height,
      class: data.classes,
      style: data.style,
      caption: data.caption,
      hspace: data.hspace,
      vspace: data.vspace,
      border: data.border,
      borderStyle: data.borderstyle,
      isDecorative: data.isDecorative
    };
  };
  var addPrependUrl2 = function (info, srcURL) {
    if (!/^(?:[a-zA-Z]+:)?\/\//.test(srcURL)) {
      return info.prependURL.bind(function (prependUrl) {
        if (srcURL.substring(0, prependUrl.length) !== prependUrl) {
          return Optional.some(prependUrl + srcURL);
        }
        return Optional.none();
      });
    }
    return Optional.none();
  };
  var addPrependUrl = function (info, api) {
    var data = api.getData();
    addPrependUrl2(info, data.src.value).each(function (srcURL) {
      api.setData({
        src: {
          value: srcURL,
          meta: data.src.meta
        }
      });
    });
  };
  var formFillFromMeta2 = function (info, data, meta) {
    if (info.hasDescription && isString(meta.alt)) {
      data.alt = meta.alt;
    }
    if (info.hasAccessibilityOptions) {
      data.isDecorative = meta.isDecorative || data.isDecorative || false;
    }
    // SDWEB 

    // Put the title of the file in the image title field
    // if (info.hasImageTitle && isString(meta.title)) {
    //   data.title = meta.title;
    // }

    // SDWEB FIN

    if (info.hasDimensions) {
      if (isString(meta.width)) {
        data.dimensions.width = meta.width;
      }
      if (isString(meta.height)) {
        data.dimensions.height = meta.height;
      }
    }
    if (isString(meta.class)) {
      ListUtils.findEntry(info.classList, meta.class).each(function (entry) {
        data.classes = entry.value;
      });
    }
    if (info.hasImageCaption) {
      if (isBoolean(meta.caption)) {
        data.caption = meta.caption;
      }
    }
    if (info.hasAdvTab) {
      if (isString(meta.style)) {
        data.style = meta.style;
      }
      if (isString(meta.vspace)) {
        data.vspace = meta.vspace;
      }
      if (isString(meta.border)) {
        data.border = meta.border;
      }
      if (isString(meta.hspace)) {
        data.hspace = meta.hspace;
      }
      if (isString(meta.borderstyle)) {
        data.borderstyle = meta.borderstyle;
      }
    }
  };
  var formFillFromMeta = function (info, api) {
    var data = api.getData();
    var meta = data.src.meta;
    if (meta !== undefined) {
      var newData = deepMerge({}, data);
      formFillFromMeta2(info, newData, meta);
      api.setData(newData);
    }
  };
  var calculateImageSize = function (helpers, info, state, api) {
    var data = api.getData();
    var url = data.src.value;
    var meta = data.src.meta || {};
    if (!meta.width && !meta.height && info.hasDimensions) {
      if (isNotEmpty(url)) {
        helpers.imageSize(url).then(function (size) {
          if (state.open) {
            api.setData({ dimensions: size });
          }
        }).catch(function (e) {
          return console.error(e);
        });
      } else {
        api.setData({
          dimensions: {
            width: '',
            height: ''
          }
        });
      }
    }
  };
  var updateImagesDropdown = function (info, state, api) {
    var data = api.getData();
    var image = ListUtils.findEntry(info.imageList, data.src.value);
    state.prevImage = image;
    api.setData({
      images: image.map(function (entry) {
        return entry.value;
      }).getOr('')
    });
  };
  var changeSrc = function (helpers, info, state, api) {
    addPrependUrl(info, api);
    formFillFromMeta(info, api);
    calculateImageSize(helpers, info, state, api);
    updateImagesDropdown(info, state, api);
  };
  var changeImages = function (helpers, info, state, api) {
    var data = api.getData();
    var image = ListUtils.findEntry(info.imageList, data.images);
    image.each(function (img) {
      var updateAlt = data.alt === '' || state.prevImage.map(function (image) {
        return image.text === data.alt;
      }).getOr(false);
      if (updateAlt) {
        if (img.value === '') {
          api.setData({
            src: img,
            alt: state.prevAlt
          });
        } else {
          api.setData({
            src: img,
            alt: img.text
          });
        }
      } else {
        api.setData({ src: img });
      }
    });
    state.prevImage = image;
    changeSrc(helpers, info, state, api);
  };
  var calcVSpace = function (css) {
    var matchingTopBottom = css['margin-top'] === css['margin-bottom'];
    return matchingTopBottom ? removePixelSuffix(String(css['margin-top'])) : '';
  };
  var calcHSpace = function (css) {
    var matchingLeftRight = css['margin-right'] === css['margin-left'];
    return matchingLeftRight ? removePixelSuffix(String(css['margin-right'])) : '';
  };
  var calcBorderWidth = function (css) {
    return css['border-width'] ? removePixelSuffix(String(css['border-width'])) : '';
  };
  var calcBorderStyle = function (css) {
    return css['border-style'] ? String(css['border-style']) : '';
  };
  var calcStyle = function (parseStyle, serializeStyle, css) {
    return serializeStyle(parseStyle(serializeStyle(css)));
  };
  var changeStyle2 = function (parseStyle, serializeStyle, data) {
    var css = mergeMargins(parseStyle(data.style));
    var dataCopy = deepMerge({}, data);
    dataCopy.vspace = calcVSpace(css);
    dataCopy.hspace = calcHSpace(css);
    dataCopy.border = calcBorderWidth(css);
    dataCopy.borderstyle = calcBorderStyle(css);
    dataCopy.style = calcStyle(parseStyle, serializeStyle, css);
    return dataCopy;
  };
  var changeStyle = function (helpers, api) {
    var data = api.getData();
    var newData = changeStyle2(helpers.parseStyle, helpers.serializeStyle, data);
    api.setData(newData);
  };
  var changeAStyle = function (helpers, info, api) {
    var data = deepMerge(fromImageData(info.image), api.getData());
    var style = getStyleValue(helpers.normalizeCss, toImageData(data, false));
    api.setData({ style: style });
  };
  var changeFileInput = function (helpers, info, state, api) {
    var data = api.getData();
    api.block('Uploading image');
    head(data.fileinput).fold(function () {
      api.unblock();
    }, function (file) {
      var blobUri = URL.createObjectURL(file);
      var finalize = function () {
        api.unblock();
        URL.revokeObjectURL(blobUri);
      };
      var updateSrcAndSwitchTab = function (url) {
        api.setData({
          src: {
            value: url,
            meta: {}
          }
        });
        api.showTab('general');
        changeSrc(helpers, info, state, api);
      };
      blobToDataUri(file).then(function (dataUrl) {
        var blobInfo = helpers.createBlobCache(file, blobUri, dataUrl);
        if (info.automaticUploads) {
          helpers.uploadImage(blobInfo).then(function (result) {
            updateSrcAndSwitchTab(result.url);
            finalize();
          }).catch(function (err) {
            finalize();
            helpers.alertErr(err);
          });
        } else {
          helpers.addToBlobCache(blobInfo);
          updateSrcAndSwitchTab(blobInfo.blobUri());
          api.unblock();
        }
      });
    });
  };


  // +++++   TO DO   +++++

  // // To use in image optimizer
  // function setCookie(cname, cvalue, exdays) {
  //   var d = new Date();
  //   d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
  //   var expires = "expires=" + d.toUTCString();
  //   document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
  // }

  // +++++   TO DO END   ++++


  var changeHandler = function (helpers, info, state) {
    return function (api, evt) {
      if (evt.name === 'src') {
        changeSrc(helpers, info, state, api);
        // SDWEB
        // Enable or disable optimization
        let btnOpbimizer = tinymce.activeEditor.dom.get("openOptimizer");

        if (api.getData("src").src.meta.hasOwnProperty("title")) {
          tinymce.dom.DomQuery("#openOptimizer").removeAttr("disabled");
        }
        else {
          tinymce.activeEditor.dom.setAttrib(btnOpbimizer, "disabled", "disabled");
        }


      } else if (evt.name === 'images') {
        changeImages(helpers, info, state, api);
      } else if (evt.name === 'alt') {
        state.prevAlt = api.getData().alt;
      } else if (evt.name === 'style') {
        changeStyle(helpers, api);
      } else if (evt.name === 'vspace' || evt.name === 'hspace' || evt.name === 'border' || evt.name === 'borderstyle') {
        changeAStyle(helpers, info, api);
      }


      // +++++   TO DO   +++++
      // image optimizer with checkbox

      // else if (evt.name === 'imageOptimizer') {
      //   var val = "0";
      //   // var optimizerOpt = win.find("#imageOptimizer");
      //   // if (optimizerOpt.length==1 && optimizerOpt.checked()) val = "1";
      //   if (api.getData().imageOptimizer) val = "1";

      //   // You can't enable it right after selecting an image
      //   if (val == "1") {
      //     // var src = win.find('#src').value();
      //     var src = api.getData().src;
      //     // if (src.indexOf("/previews/")==0) {
      //     if (src.value != '') {
      //       val = "0";
      //       tinymce.activeEditor.windowManager.confirm(
      //         "1. " + _("Clear Image") + " — 2. " + _("Select image") + " (" + _("Source") + ")",
      //         function (s) {
      //           if (s) {
      //             // win.find("#src").value("");
      //             // win.find("#imageOptimizer").checked(true);
      //             api.setData({ src: { meta: src.meta, value: '' } });
      //             api.setData({ imageOptimizer: true });
      //           }
      //         }
      //       );
      //       setTimeout(function () {
      //         // optimizerOpt.checked(false);
      //         api.setData({ imageOptimizer: false });
      //       }, 250);
      //     }
      //   }

      //   setCookie("exeimageImageOptimizer", val, 30);
      // }

      // +++++   TO DO END   ++++

      // align style
      else if (evt.name === 'alignstyle') {
        alignImageStyle = api.getData().alignstyle;

        if (alignImageStyle !== '') {
          if (alignImageStyle === 'right' || alignImageStyle === 'left') {
            // Image is not figure and not will be figure
            if (idSelectedImage == '' && api.getData().attr_imageheader == ''
              && api.getData().attr_imagetitle == '' && api.getData().attr_imagetitlelink == ''
              && api.getData().authorname == '' && api.getData().authornamelink == '' && api.getData().captionlicense == '') {
              style_for_div = 'float: ' + alignImageStyle;
            } else {
              style_for_div = '';
            }
          } else {
            style_for_div = 'vertical-align: ' + alignImageStyle;
          }

        }

        changeAStyle(helpers, info, api);
        currentAlignStyle = api.getData().alignstyle;
        var styleText = api.getData().style;
        var styleArray = styleText.split(";");
        for (var i = 0; i < styleArray.length; i++) {
          if (styleArray[i].includes("float") || styleArray[i].includes("vertical-align")) {
            styleArray.splice(i, 1);
          }
        }
        styleText = styleArray.toString();
        styleText = styleText.replaceAll(",", ";");

        if (api.getData().alignstyle === 'left' || api.getData().alignstyle === 'right') {
          // Image is not figure and not will be figure
          if (idSelectedImage == '' && api.getData().attr_imageheader == ''
            && api.getData().attr_imagetitle == '' && api.getData().attr_imagetitlelink == ''
            && api.getData().authorname == '' && api.getData().authornamelink == '' && api.getData().captionlicense == '') {
            api.setData({ style: styleText + "float: " + api.getData().alignstyle + ";" });
          } else {
            api.setData({ style: styleText });
          }
        } else {
          api.setData({ style: styleText + "vertical-align: " + api.getData().alignstyle + ";" });
        }
      }
      // / align style

      else if (evt.name === 'fileinput') {
        changeFileInput(helpers, info, state, api);
      } else if (evt.name === 'isDecorative') {
        if (api.getData().isDecorative) {
          api.disable('alt');
        } else {
          api.enable('alt');
        }
      }

      // attribution tab

      // attribution, enable custom license
      else if (evt.name === 'captionlicense') {

        if (api.getData().captionlicense === 'custom') {
          api.enable('customcaptionlicense');
        } else {
          api.disable('customcaptionlicense');
          api.setData({ customcaptionlicense: '' });
        }
      }

      else if (evt.name === 'captionlicense' || evt.name === 'authornamelink' || evt.name === 'authorname' ||
        evt.name === 'attr_imagetitlelink' || evt.name === 'attr_imagetitle' || evt.name === 'attr_imageheader') {
        if (api.setData({ style: api.getData().style.replace('float: right;', '') })) {
          api.setData({ alignstyle: 'right' });
        } else if (api.setData({ style: api.getData().style.replace('float: left;', '') })) {
          api.setData({ alignstyle: 'left' });
        }

      }

      // / attribution tab

    };
  };
  var closeHandler = function (state) {
    return function () {
      state.open = false;
    };
  };
  var makeDialogBody = function (info) {
    if (info.hasAdvTab || info.hasUploadUrl || info.hasUploadHandler) {
      var tabPanel = {
        type: 'tabpanel',
        tabs: flatten([
          [MainTab.makeTab(info)],
          info.hasAdvTab ? [AdvTab.makeTab(info)] : [],
          info.hasUploadTab && (info.hasUploadUrl || info.hasUploadHandler) ? [UploadTab.makeTab(info)] : [],
          // attibution tab
          info.hasAttributionTab ? [AttributionTab.makeTab(info)] : []
        ])
      };
      return tabPanel;
    } else {
      var panel = {
        type: 'panel',
        items: MainTab.makeItems(info)
      };
      return panel;
    }
  };
  var makeDialog = function (helpers) {
    return function (info) {
      var state = createState(info);
      return {
        title: _('Insert/Edit Image'),
        size: 'normal',
        body: makeDialogBody(info),
        buttons: [
          {
            type: 'cancel',
            name: 'cancel',
            text: _('Cancel')
          },
          {
            type: 'submit',
            name: 'save',
            text: _('Save'),
            primary: true
          }
        ],
        initialData: fromImageData(info.image),
        onSubmit: helpers.onSubmit(info),
        onAction: function (api, details) {
          if (details.name == 'imageOptimizer') {
            top.imgCompressor = {
              originalSrc: api.getData("src").src.value
            }
            tinymce.activeEditor.windowManager.openUrl({
              title: _('Editor'),
              url: "libs/tinymce_5/js/tinymce/plugins/exeimage/image-compressor/index.html",
            });
          }
          else if (details.name == 'customfilepicker') {
            // SessionId to add in url
            let sessionId = eXeLearning.app.project.odeSession;
            tinymce.activeEditor.windowManager.openUrl({
              title: _('Custom File Picker'),
              url: `${window.eXeLearning.symfony.baseURL}${window.eXeLearning.symfony.basePath}/filemanager/index/1/${sessionId}`,
            });
            var url = `${window.eXeLearning.symfony.baseURL}${window.eXeLearning.symfony.basePath}/filemanager/index/1/${sessionId}`;
            $(`iframe[src='` + url + `']`)[0].setAttribute('id', 'filemanageriframe2');
          }
        },
        onChange: changeHandler(helpers, info, state),
        onTabChange: function (api, details) {
          if (details.newTabName === 'general') {
            setGenTabStyle();
          }
          else if (details.newTabName === 'advanced') {
            setAdvTabStyle();
            if (img_v_style === '' || img_v_style === 'baseline' || img_v_style === 'top'
              || img_v_style === 'middle' || img_v_style === 'bottom' || img_v_style === 'text-top'
              || img_v_style === 'text-bottom' || img_v_style === 'left' || img_v_style === 'right') {
              api.setData({ alignstyle: img_v_style });
            }
          } else if (details.newTabName === 'attribution') {
            setAttributionTabStyle();
            attibutionTab = true;
            let editor = tinymce.activeEditor;

            let actHeader = editor.dom.get('header_' + idSelectedImage);
            let actHeaderHTML = '';
            if (actHeader != null) {
              actHeaderHTML = editor.selection.select(actHeader).innerHTML;
              actHeaderHTML = actHeaderHTML.replace('<strong>', '');
              actHeaderHTML = actHeaderHTML.replace('</strong>', '');
            }

            let actTitle = editor.dom.get('title_' + idSelectedImage);
            let actTitleHTML = '';
            let actLinkTitleHTML = '';
            if (actTitle != null) {
              actTitleHTML = editor.selection.select(actTitle).innerHTML;
              actTitleHTML = actTitleHTML.replace('<em>', '');
              actTitleHTML = actTitleHTML.replace('</em>', '');

              actLinkTitleHTML = editor.dom.getAttrib(actTitle, 'href');
            }

            let actAuthor = editor.dom.get('author_' + idSelectedImage);
            let actAuthorHTML = '';
            let actLinkAuthorHTML = '';
            if (actAuthor != null) {
              actAuthorHTML = editor.selection.select(actAuthor).innerHTML;

              actLinkAuthorHTML = editor.dom.getAttrib(actAuthor, 'href');
            }

            let actLicense = editor.dom.get('license_' + idSelectedImage);
            let actLicenseHTML = '';
            let selectedLicense = '';
            let customLicense = '';
            if (actLicense != null) {
              actLicenseHTML = editor.selection.select(actLicense).innerHTML;
              if (actLicenseHTML === _("Public Domain")) {
                selectedLicense = 'pd';
              }
              else if (actLicenseHTML === 'GNU-GPL') {
                selectedLicense = 'gnu-gpl';
              } else if (actLicenseHTML === _("All Rights Reserved")) {
                selectedLicense = 'copyright';
              } else if (actLicenseHTML === 'CC BY' || actLicenseHTML === 'CC BY-SA' || actLicenseHTML === 'CC BY-ND'
                || actLicenseHTML === 'CC BY-NC' || actLicenseHTML === 'CC BY-NC-SA' || actLicenseHTML === 'CC BY-NC-ND') {
                selectedLicense = actLicenseHTML.replace('CC ', 'CC-');
              } else if (actLicenseHTML === 'CC0') {
                selectedLicense = actLicenseHTML;
              }
              else {
                selectedLicense = 'custom';
                customLicense = actLicenseHTML;
              }
            }

            api.setData({ attr_imageheader: actHeaderHTML });
            api.setData({ attr_imagetitle: actTitleHTML });
            api.setData({ attr_imagetitlelink: actLinkTitleHTML });
            api.setData({ authorname: actAuthorHTML });
            api.setData({ authornamelink: actLinkAuthorHTML });
            api.setData({ captionlicense: selectedLicense });
            api.setData({ customcaptionlicense: customLicense });

            if (api.getData().captionlicense === 'custom') {
              api.enable('customcaptionlicense');
            }

          }
        },
        onClose: closeHandler(state)
      };
    };
  };

  function GetLinkLicense(attrLicense) {

    let linkLicense = '';
    if (attrLicense === 'pd' || attrLicense === 'copyright' || attrLicense === '') {
      linkLicense = '';
    }
    else if (attrLicense === 'gnu-gpl') {
      linkLicense = 'http://www.gnu.org/licenses/gpl.html';
    }
    else if (attrLicense === 'CC0') {
      linkLicense = 'http://creativecommons.org/publicdomain/zero/1.0/deed.' + lang;

    } else {
      linkLicense = 'http://creativecommons.org/licenses/';
    }

    return linkLicense;
  }

  function FormatLicenseName(attrLicense) {
    let newName = '';
    if (attrLicense === 'pd') {
      newName = _('Public Domain');
    } else if (attrLicense === 'gnu-gpl') {
      newName = 'GNU-GPL';
    } else if (attrLicense === 'copyright') {
      newName = _("All Rights Reserved");
    } else {
      newName = attrLicense.replace('CC-', 'CC ');
    }

    return newName;
  }

  var submitHandler = function (editor) {

    return function (info) {
      return function (api) {
        if (api.getData().alt == "") {
          editor.windowManager.confirm(
            _("Are you sure you want to continue without including an Image Description? Without it the image may not be accessible to some users with disabilities, or to those using a text browser, or browsing the Web with images turned off."),
            function (s) {
              if (s) {
                mySubmit(editor, info, api);
              }
            }
          );
        } else {
          mySubmit(editor, info, api);
        }
      };
    };
  };

  function mySubmit(editor, info, api) {

    //set selection to bookmark
    tinymce.activeEditor.selection.moveToBookmark(bm);

    var data = deepMerge(fromImageData(info.image), api.getData());
    editor.execCommand('mceUpdateImage', false, toImageData(data, info.hasAccessibilityOptions));
    editor.editorUpload.uploadImagesAuto();

    let attrEncabezado = api.getData().attr_imageheader;
    let attrTitulo = api.getData().attr_imagetitle;
    let attrLinkTitulo = api.getData().attr_imagetitlelink;
    let attrAutor = api.getData().authorname;
    let attrLinkAutor = api.getData().authornamelink;
    let attrLicense = '';
    let attrLinkLicense = '';

    let advAlignStyle = api.getData().alignstyle;

    if (advAlignStyle == 'left') {
      actualAlign = 'position-left';
    } else if (advAlignStyle == 'right') {
      actualAlign = 'position-right';
    }

    if (api.getData().captionlicense !== 'custom') {
      attrLicense = api.getData().captionlicense;
      attrLinkLicense = GetLinkLicense(attrLicense);
      attrLicense = FormatLicenseName(attrLicense);
    }
    else {
      attrLicense = api.getData().customcaptionlicense;
    }

    if (editor.selection.getNode().tagName !== 'FIGURE') {
      if (attrEncabezado != '' || attrTitulo != '' || attrLinkTitulo != '' || attrAutor != '' || attrLinkAutor != '' || attrLicense != '') {
        numero_imagenes++;

        let container = editor.selection.getSel().anchorNode;
        if (container.id === null || container.id === '') {
          container.id = "figure_imagen_" + numero_imagenes;
        }

        let imagenNode = editor.selection.getNode();

        if (imagenNode.id === null || imagenNode.id === '') {
          imagenNode.id = "imagen_" + numero_imagenes;
          imagenNode.classList.add("imagen_" + numero_imagenes);
        }

        let custom_div_html = '';

        if (attrEncabezado !== '') {
          let id_header_img = 'header_imagen_' + numero_imagenes;
          custom_div_html = '<div class="figcaption header" id=' + id_header_img + '><strong>' + attrEncabezado + '</strong></div>' + container.innerHTML;
        } else {
          custom_div_html = container.innerHTML;
        }

        let tipo_autor = 'author_imagen_' + numero_imagenes;
        let tipo_titulo = 'title_imagen_' + numero_imagenes;
        let tipo_licencia = 'license_imagen_' + numero_imagenes;
        let htmlAutor = CustomHtml(attrAutor, attrLinkAutor, false, tipo_autor);
        let htmlTitulo = CustomHtml(attrTitulo, attrLinkTitulo, true, tipo_titulo);
        let htmlLicencia = CustomHtml(attrLicense, attrLinkLicense, false, tipo_licencia);

        if (htmlAutor !== '' || htmlTitulo !== '' || htmlLicencia !== '') {
          custom_div_html += '<figcaption class="figcaption">';
          if (htmlAutor !== '') {
            custom_div_html += htmlAutor + ". ";
          }
          if (htmlTitulo) {
            custom_div_html += htmlTitulo;
          }
          if (htmlLicencia !== '') {
            custom_div_html += '<span class="sep"> (</span>' + htmlLicencia + '<span class="sep">)</span>';
          }
          custom_div_html += '</figcaption>';
        }

        let imageWidth = api.getData().dimensions.width;
        style_for_div += `width: ${imageWidth}px;`;

        let y = editor.dom.create('figure', { 'id': 'figure_imagen_' + numero_imagenes, 'class': `exe-figure ${actualAlign}`, 'style': style_for_div }, custom_div_html);

        container.parentNode.replaceChild(y, container);

        let my_p = editor.dom.create('p', {}, '');
        editor.selection.setCursorLocation(editor.selection.getNode(), 1);//move cursor to the end and create new empty <p>
        editor.selection.setNode(my_p);
      }

    }
    else {

      if (!attibutionTab) {
        let actHeader = editor.dom.get('header_' + idSelectedImage);
        let actHeaderHTML = '';
        if (actHeader != null) {
          actHeaderHTML = editor.selection.select(actHeader).innerHTML;
          actHeaderHTML = actHeaderHTML.replace('<strong>', '');
          actHeaderHTML = actHeaderHTML.replace('</strong>', '');
        }
        let actTitle = editor.dom.get('title_' + idSelectedImage);
        let actTitleHTML = '';
        let actLinkTitleHTML = '';
        if (actTitle != null) {
          actTitleHTML = editor.selection.select(actTitle).innerHTML;
          actTitleHTML = actTitleHTML.replace('<em>', '');
          actTitleHTML = actTitleHTML.replace('</em>', '');
          actLinkTitleHTML = editor.dom.getAttrib(actTitle, 'href');
        }
        let actAuthor = editor.dom.get('author_' + idSelectedImage);
        let actAuthorHTML = '';
        let actLinkAuthorHTML = '';
        if (actAuthor != null) {
          actAuthorHTML = editor.selection.select(actAuthor).innerHTML;
          actLinkAuthorHTML = editor.dom.getAttrib(actAuthor, 'href');
        }
        let actLicense = editor.dom.get('license_' + idSelectedImage);
        let actLicenseHTML = '';
        let actLinkLicenseHTML = '';
        if (actLicense != null) {
          actLicenseHTML = editor.selection.select(actLicense).innerHTML;
          actLinkLicenseHTML = editor.dom.getAttrib(actLicense, 'href');
        }

        attrEncabezado = actHeaderHTML;
        attrTitulo = actTitleHTML;
        attrLinkTitulo = actLinkTitleHTML;
        attrAutor = actAuthorHTML;
        attrLinkAutor = actLinkAuthorHTML;
        attrLicense = actLicenseHTML;
        attrLinkLicense = actLinkLicenseHTML;
      }

      // Create new image

      // let container = editor.selection.getSel().anchorNode;

      let figure_old = editor.dom.get('figure_' + idSelectedImage);

      let imagen_html = editor.dom.getOuterHTML(idSelectedImage);

      editor.dom.setHTML(figure_old, '');

      let custom_div_html = '';

      if (attrEncabezado !== '') {
        let id_header_img = 'header_' + idSelectedImage;
        custom_div_html = '<div class="figcaption header" id=' + id_header_img + '><strong>' + attrEncabezado + '</strong></div>' + imagen_html;
      } else {
        custom_div_html = imagen_html;
      }

      let tipo_autor = 'author_' + idSelectedImage;
      let tipo_titulo = 'title_' + idSelectedImage;
      let tipo_licencia = 'license_' + idSelectedImage;
      let htmlAutor = CustomHtml(attrAutor, attrLinkAutor, false, tipo_autor);
      let htmlTitulo = CustomHtml(attrTitulo, attrLinkTitulo, true, tipo_titulo);
      let htmlLicencia = CustomHtml(attrLicense, attrLinkLicense, false, tipo_licencia);

      if (htmlAutor !== '' || htmlTitulo !== '' || htmlLicencia !== '') {
        custom_div_html += '<figcaption class="figcaption">';
        if (htmlAutor !== '') {
          custom_div_html += htmlAutor + ". ";
        }
        if (htmlTitulo) {
          custom_div_html += htmlTitulo;
        }
        if (htmlLicencia !== '') {
          custom_div_html += '<span class="sep"> (</span>' + htmlLicencia + '<span class="sep">)</span>';
        }
        custom_div_html += '</figcaption>';
      }

      let imageWidth = api.getData().dimensions.width;
      style_for_div += `width: ${imageWidth}px;`;

      let y = editor.dom.create('figure', { 'id': 'figure_' + idSelectedImage, 'class': `exe-figure ${actualAlign}`, 'style': style_for_div }, custom_div_html);

      figure_old.parentNode.replaceChild(y, figure_old);

    }

    api.close();
  }

  function CustomHtml(value, linkValue, emBool, tipo) {

    let customHtml
    if (value !== '' && linkValue !== '') {
      value = emBool ? '<em>' + value + '</em>' : value;
      customHtml = '<a href=' + linkValue + ' id=' + tipo + ' target="_blanck" rel="noopener">' + value + '</a>'
    } else if (value === '' && linkValue !== '') {
      value = emBool ? '<em>' + linkValue + '</em>' : linkValue;
      customHtml = '<a href=' + linkValue + ' id=' + tipo + ' target="_blanck" rel="noopener">' + value + '</a>'
    } else if (value !== '' && linkValue === '') {
      value = emBool ? '<em>' + value + '</em>' : value;
      customHtml = '<span id=' + tipo + '>' + value + '</span>'
    } else {
      customHtml = '';
    }

    return customHtml;
  }

  var imageSize = function (editor) {
    return function (url) {
      if (!isSafeImageUrl(editor, url)) {
        return global$4.resolve({
          width: '',
          height: ''
        });
      } else {
        return getImageSize(editor.documentBaseURI.toAbsolute(url)).then(function (dimensions) {
          return {
            width: String(dimensions.width),
            height: String(dimensions.height)
          };
        });
      }
    };
  };
  var createBlobCache = function (editor) {
    return function (file, blobUri, dataUrl) {
      return editor.editorUpload.blobCache.create({
        blob: file,
        blobUri: blobUri,
        name: file.name ? file.name.replace(/\.[^\.]+$/, '') : null,
        filename: file.name,
        base64: dataUrl.split(',')[1]
      });
    };
  };
  var addToBlobCache = function (editor) {
    return function (blobInfo) {
      editor.editorUpload.blobCache.add(blobInfo);
    };
  };
  var alertErr = function (editor) {
    return function (message) {
      editor.windowManager.alert(message);
    };
  };
  var normalizeCss = function (editor) {
    return function (cssText) {
      return normalizeCss$1(editor, cssText);
    };
  };
  var parseStyle = function (editor) {
    return function (cssText) {
      return editor.dom.parseStyle(cssText);
    };
  };
  var serializeStyle = function (editor) {
    return function (stylesArg, name) {
      return editor.dom.serializeStyle(stylesArg, name);
    };
  };
  var uploadImage = function (editor) {
    return function (blobInfo) {
      return global$1(editor).upload([blobInfo], false).then(function (results) {
        if (results.length === 0) {
          return global$4.reject('Failed to upload image');
        } else if (results[0].status === false) {
          return global$4.reject(results[0].error.message);
        } else {
          return results[0];
        }
      });
    };
  };
  var Dialog = function (editor) {
    var helpers = {
      onSubmit: submitHandler(editor),
      imageSize: imageSize(editor),
      addToBlobCache: addToBlobCache(editor),
      createBlobCache: createBlobCache(editor),
      alertErr: alertErr(editor),
      normalizeCss: normalizeCss(editor),
      parseStyle: parseStyle(editor),
      serializeStyle: serializeStyle(editor),
      uploadImage: uploadImage(editor)
    };
    var open = function () {
      collect(editor).then(makeDialog(helpers)).then(editor.windowManager.open);
    };
    return { open: open };
  };

  var register$1 = function (editor) {
    editor.addCommand('mceImage', Dialog(editor).open);
    // editor.addCommand('mceImage', doit(editor));
    editor.addCommand('mceUpdateImage', function (_ui, data) {
      editor.undoManager.transact(function () {
        return insertOrUpdateImage(editor, data);
      });
    });
  };

  var hasImageClass = function (node) {
    var className = node.attr('class');
    return className && /\bimage\b/.test(className);
  };
  var toggleContentEditableState = function (state) {
    return function (nodes) {
      var i = nodes.length;
      var toggleContentEditable = function (node) {
        node.attr('contenteditable', state ? 'true' : null);
      };
      while (i--) {
        var node = nodes[i];
        if (hasImageClass(node)) {
          node.attr('contenteditable', state ? 'false' : null);
          global.each(node.getAll('figcaption'), toggleContentEditable);
        }
      }
    };
  };
  var setup = function (editor) {
    editor.on('PreInit', function () {
      editor.parser.addNodeFilter('figure', toggleContentEditableState(true));
      editor.serializer.addNodeFilter('figure', toggleContentEditableState(false));
      // load css
      var loc = window.location.pathname;
      var dir = loc.substring(0, loc.lastIndexOf('/'));
      editor.dom.loadCSS(dir + "/libs/tinymce_5/js/tinymce/plugins/exeimage/css/content.css");
    });
  };

  var register = function (editor) {
    editor.ui.registry.addIcon('exeimage', '<svg xmlns="http://www.w3.org/2000/svg" height="24" width="24"><path d="M12 16 7 11 8.4 9.55 11 12.15V4H13V12.15L15.6 9.55L17 11ZM6 20Q5.175 20 4.588 19.413Q4 18.825 4 18V15H6V18Q6 18 6 18Q6 18 6 18H18Q18 18 18 18Q18 18 18 18V15H20V18Q20 18.825 19.413 19.413Q18.825 20 18 20Z"/></svg>');
    editor.ui.registry.addToggleButton('exeimage', {
      icon: 'image',
      tooltip: 'Insert/edit image',
      onAction: function () {
        let $ = tinymce.dom.DomQuery;
        lang = $('html').attr('lang');
        attibutionTab = false;
        doit(editor);
      },
      onSetup: function (buttonApi) {
        buttonApi.setActive(isNonNullable(getSelectedImage(editor)));
        return editor.selection.selectorChangedWithUnbind('img:not([data-mce-object],[data-mce-placeholder]),figure.image', buttonApi.setActive).unbind;
      }
    });
    editor.ui.registry.addMenuItem('exeimage', {
      icon: 'image',
      text: 'Image...',
      onAction: function () {
        let $ = tinymce.dom.DomQuery;
        lang = $('html').attr('lang');
        attibutionTab = false;
        // Dialog(editor).open();
        doit(editor);
      }
    });
    editor.ui.registry.addContextMenu('exeimage', {
      update: function (element) {
        return isFigure(element) || isImage(element) && !isPlaceholderImage(element) ? ['image'] : [];
      }
    });
  };

  function Plugin() {
    global$6.add('exeimage', function (editor, url) {
      setup(editor, url);
      register(editor);
      register$1(editor);
    });
  }

  Plugin();

}());
