tinymce.PluginManager.add('wiki', function (editor, url) {

	let wikiArticle = '';
	let wikiTitle = '';
	let wikiEmphasis = 'emphasis0';
	let wikiLang = 'en';
	let wikiAttribution = _('From Wikipedia, the free encyclopedia.');
	let wikiRedirection = _('Redirected from');

	let wikiNoArticle = _('Wikipedia does not have an article with this exact name.');
	let wikiSearch = _('search for');
	let inWiki = _('in Wikipedia');
	let wikiAlternatives = _('to check for alternative titles or spellings.');

	let redirect = false;

	function setDialogStyle() {
		let divDialog = tinymce.dom.DomQuery('div.tox-dialog').eq(0);
		tinymce.DOM.setStyles(divDialog, { 'min-width': 700 });

		let divs = tinymce.dom.DomQuery('div.tox-form').children();

		let divLine1 = divs.eq(0);
		tinymce.DOM.setStyles(divLine1, { 'display': 'flex', 'margin-top': 5 });

		let divURL = divLine1.children().eq(0);
		tinymce.DOM.setStyles(divURL, { 'display': 'flex', 'margin-right': 5, 'width': '100%' });
		tinymce.DOM.setStyles(divURL.children().eq(0), { 'min-width': 120, 'padding': '8px 0' });
		tinymce.DOM.setStyles(divURL.children().eq(1), { 'display': 'flex', 'width': '100%' });

		let divMaxFeeds = divLine1.children().eq(1);
		tinymce.DOM.setStyles(divMaxFeeds, { 'display': 'flex', 'margin-left': 5 });
		tinymce.DOM.setStyles(divMaxFeeds.children().eq(0), { 'min-width': 120, 'padding': '8px 0' });
		tinymce.DOM.setStyles(divMaxFeeds.children().eq(1), { 'display': 'flex', 'width': 150 });

		let divLine2 = divs.eq(1);
		tinymce.DOM.setStyles(divLine2, { 'display': 'flex', 'margin-top': 5 });

		let divTitle = divLine2.children().eq(0);
		let divEmphasis = divLine2.children().eq(1);

		tinymce.DOM.setStyles(divTitle, { 'display': 'flex', 'margin-right': 5, 'width': '100%' });
		tinymce.DOM.setStyles(divTitle.children().eq(0), { 'min-width': 120, 'padding': '8px 0' });
		tinymce.DOM.setStyles(divTitle.children().eq(1), { 'display': 'flex', 'width': '100%' });

		tinymce.DOM.setStyles(divEmphasis, { 'display': 'flex', 'margin-left': 5 });
		tinymce.DOM.setStyles(divEmphasis.children().eq(0), { 'min-width': 120, 'padding': '8px 0' });
		tinymce.DOM.setStyles(divEmphasis.children().eq(1), { 'display': 'flex', 'width': 150 });

	}

	function capitalize(word) {
		return word[0].toUpperCase() + word.slice(1);
	}

	async function doFetch(page) {
		const rsp = await fetch(
			`https://${wikiLang}.wikipedia.org/w/rest.php/v1/page/${page}/with_html`,
			// { 'Api-User-Agent': 'MediaWiki REST API docs examples/0.1 (https://www.mediawiki.org/wiki/API_talk:REST_API)' }
		);
		const data = await rsp.json();
		return data;
	}

	async function fetchAsync(editor) {
		try {
			
			let result = await doFetch(wikiArticle);
			console.log(typeof result);

			let html = result.html;
			//check if need redirection
			if (html.includes(`rel="mw:PageProp/redirect"`)) {
				let goodURLArticle = html.split(`rel="mw:PageProp/redirect"`)[1].split(`/`)[1].slice(0, -1);
				result = await doFetch(goodURLArticle);
				html = result.html;
				redirect = true;
			}
			html = html.replaceAll(`./${result.title}`, ``);
			html = html.replaceAll(`href=".`, `href="https://${wikiLang}.wikipedia.org/wiki`);

			//Add title to html
			let redirectHtml =
				`<span class="mw-redirectedfrom">
				(${wikiRedirection}  «<a rel="mw:WikiLink" href="https://${wikiLang}.wikipedia.org/w/index.php?title=${wikiArticle}&amp;redirect=no" title="${wikiArticle}">
					${wikiArticle}
				</a>»)
			</span>`
			redirect ? redirectHtml : redirectHtml = ''
			let htmlTitle =
				`<div>
					<h1>${result.title}</h1>
					<p>${wikiAttribution}</p>
					${redirectHtml}
				</div>`;
			// ><section data-mw-section-id="0">
			html = html.replace(`><section data-mw-section-id="0">`, `>${htmlTitle}<section data-mw-section-id="0">`);
			
			return html;

		} catch (err) {
			let htmlTitle =
				`<div>
					<h1>${wikiArticle}</h1>
					<p>${wikiAttribution}</p>
				</div>`;
			let wikiNotFound =
				`<p>
					<b>${wikiNoArticle}</b> Please <span class="plainlinks"><a class="external text" href="https://${wikiLang}.wikipedia.org/w/index.php?search=${wikiArticle}&amp;title=Special%3ASearch&amp;fulltext=1">${wikiSearch} <i>${wikiArticle}</i> ${inWiki}</a></span> ${wikiAlternatives}
				</p>`

			let html = htmlTitle + wikiNotFound;

			console.error(err.message);

			return html;

		}
	}

	wikiDialog = {

		getWiki: function (api) {
			wikiArticle = api.getData().wikiarticle;
			wikiArticle = capitalize(wikiArticle);
			wikiTitle = api.getData().wikititle;
			wikiEmphasis = api.getData().emphasis;
			wikiLang = api.getData().wikilang;

			wikiDialog.insert();
		},


		insert: async function () {
			let editor = tinyMCE.activeEditor;

			let wikiPage = await fetchAsync(editor);

			let html = '';
			if (wikiTitle == '') {
				html = `<div class=${wikiEmphasis} style="padding: 15px">`;
			} else {
				html = `<header class=${wikiEmphasis} style="padding: 15px"><div>${wikiTitle}</div></header><div class=${wikiEmphasis} style="padding: 15px">`;
			}

			html += wikiPage;

			html += `</div>`;


			console.log(html);
			editor.execCommand('InsertHTML', false, html);
			// editor.insertContent(result);
			editor.execCommand("mceEndUndoLevel");
			editor.windowManager.close();


		},

		open: function () {

			win = editor.windowManager.open({
				title: _('Wikipedia Article'),
				body: {
					type: 'panel',
					items: [
						{
							type: 'panel',
							items: [
								{
									type: 'input',
									name: 'wikiarticle',
									label: _('Article')
								},
								{
									type: 'listbox',
									name: 'wikilang',
									label: _('Language'),
									items: [
										{ text: _('English'), value: 'en' },
										{ text: _('Basque'), value: 'eu' },
										{ text: _('Catalan'), value: 'ca' },
										{ text: _('Chinese'), value: 'zh' },
										{ text: _('Dutch'), value: 'nl' },
										{ text: _('French'), value: 'fr' },
										{ text: _('Galician'), value: 'gl' },
										{ text: _('German'), value: 'de' },
										{ text: _('Greek'), value: 'el' },
										{ text: _('Italian'), value: 'it' },
										{ text: _('Japanese'), value: 'ja' },
										{ text: _('Magyar'), value: 'hu' },
										{ text: _('Polish'), value: 'pl' },
										{ text: _('Portuguese'), value: 'pt' },
										{ text: _('Slovenian'), value: 'sl' },
										{ text: _('Spanish'), value: 'es' },
										{ text: _('Swedish'), value: 'sv' }
									]
								}
							]
						},
						{
							type: 'panel',
							items: [
								{
									type: 'input',
									name: 'wikititle',
									label: _('Title')
								},
								{
									type: 'listbox',
									name: 'emphasis',
									label: _('Emphasis'), // Translation: Destacado
									items: [
										// values: classes to add to the main div
										{ text: _('No emphasis'), value: 'emphasis0' }, // Translation: Sin destacar
										{ text: _('Some emphasis'), value: 'emphasis1' } // Translation: Destacado moderado
									]
								}
							]
						}
					]
				},
				initialData: {
					wikilang: 'en'
				},
				buttons: [
					{
						type: 'cancel',
						name: 'cancel',
						text: 'Cancel'
					},
					{
						type: 'submit',
						name: 'save',
						text: 'Save',
						primary: true
					}
				],
				initialData: {
					emphasis: 'emphasis0'
				},
				onSubmit: function (api) {

					wikiDialog.getWiki(api);
				}
			});
			setDialogStyle();
		},

	} // wikiDialog

	editor.ui.registry.addIcon('wiki', '');

	editor.ui.registry.addButton('wiki', {
		tooltip: _('Wikipedia Article'),
		icon: "wiki",
		text: "W",
		onAction: wikiDialog.open,

	});

	editor.ui.registry.addMenuItem('wiki', {
		text: _('Wikipedia Article'),
		icon: 'wiki',
		onAction: wikiDialog.open,
		context: 'insert'
	});

	editor.on('init', function (e) {
		editor.dom.loadCSS(url + "/css/wiki.css");

	});

});