/**
 * plugin.min.js
 *
 * Released under Attribution-ShareAlike 4.0 International License.
 * Author: Ignacio Gros (http://gros.es/) for http://exelearning.net/
 *
 * License: http://creativecommons.org/licenses/by-sa/4.0/
 */

/**
 * Create/edit simple, inline HTML and AJAX tooltips
 * To be used with http://qtip2.com/, licensed MIT, GPL (files in exe/webui/scripts/exe_tooltips)
 */
tinymce.PluginManager.add('tooltips', function (editor, url) {

	let $ = tinymce.dom.DomQuery;

	function setDialogStyle() {
		let divDialog = $('div.tox-dialog').eq(0);
		tinymce.DOM.setStyles(divDialog, { 'min-width': 500 });

		let divBody = $('div.tox-dialog__body').eq(0);
		tinymce.DOM.setStyles(divBody, { 'display': 'grid', 'grid-template-columns': '1fr' });

		let divNavbar = $('div.tox-dialog__body-nav').eq(0);
		tinymce.DOM.removeClass(divNavbar, 'tox-dialog__body-nav');
		tinymce.DOM.setStyle(divNavbar, 'margin-top', 10);

		for (let i = 0; i < divNavbar.children().length; i++) {
			tinymce.DOM.setStyles(divNavbar.children().eq(i), { 'margin-left': 20 });
		}

		let divBodyContent = $('div.tox-dialog__body-content').eq(0);
		tinymce.DOM.setStyles(divBodyContent, { 'max-height': 430 });
	}

	function setAttribsAndHide() {

		let divBodyForm = $('div.tox-form').eq(0);
		let divsChilds = divBodyForm.children();

		for (let i = 0; i < divsChilds.length; i++) {
			tinymce.DOM.setStyles(divsChilds.eq(i), { 'display': 'flex', 'margin-top': 5 });
			tinymce.DOM.setStyles(divsChilds.eq(i).children().eq(0), { 'min-width': 180, 'padding': '8px 0' });
			tinymce.DOM.setStyles(divsChilds.eq(i).children().eq(1), { 'display': 'flex', 'width': '100%' });
		}

		// hide div extra class, add id to input extraclass
		let divExtra = $('div.tox-form__group').eq(0);
		let inputExtra = divExtra.children().eq(0);
		tinymce.DOM.setAttrib(inputExtra, { 'id': 'extraClassNames' });
		divExtra.hide();

		// add id to listbox type
		let divType = $('div.tox-form__group').eq(1);
		let listType = divType.children().eq(1);
		tinymce.DOM.setAttrib(listType, { 'id': 'type' });

		// hide div type description, add id and style to label
		let divTypeDescription = $('div.tox-form__group').eq(2);
		let labelDesc = divTypeDescription.children().eq(0);
		tinymce.DOM.setAttribs(labelDesc, { 'id': 'type-desc', 'style': 'line-height:30px;font-weight:bold' });
		divTypeDescription.hide();

		// add id to input href
		let divHref = $('div.tox-form__group').eq(3);
		let labelHref = divHref.children().eq(0);
		tinymce.DOM.setAttrib(labelHref, { 'id': 'href-l' });
		let inputHref = divHref.children().eq(1);
		tinymce.DOM.setAttrib(inputHref, { 'id': 'href' });

		// add id to listbox node
		let divNode = $('div.tox-form__group').eq(4);
		let labelNode = divNode.children().eq(0);
		tinymce.DOM.setAttrib(labelNode, { 'id': 'node-l' });
		let listNode = divNode.children().eq(1);
		tinymce.DOM.setAttrib(listNode, { 'id': 'node' });

		// add id to input linkTitle
		let divLinkTitle = $('div.tox-form__group').eq(5);
		let inputLinkTitle = divLinkTitle.children().eq(1);
		tinymce.DOM.setAttrib(inputLinkTitle, { 'id': 'linkTitle' });

		// add id to input tooltipTitle
		let divTooltipTitle = $('div.tox-form__group').eq(6);
		let labelTooltipTitle = divTooltipTitle.children().eq(0);
		tinymce.DOM.setAttrib(labelTooltipTitle, { 'id': 'tooltipTitle-l' });
		let inputTooltipTitle = divTooltipTitle.children().eq(1);
		tinymce.DOM.setAttrib(inputTooltipTitle, { 'id': 'tooltipTitle' });

		// add id to div type1-options
		let divType1 = $('div.tox-form').children().eq(7);
		tinymce.DOM.setAttrib(divType1, { 'id': 'type1-options' });
		tinymce.DOM.setStyles(divType1.children().eq(0).children().eq(0), { 'font-weight': 'bold' });
		divType1.hide();

		// add id to div type2-options
		let divType2 = $('div.tox-form').children().eq(8);
		tinymce.DOM.setAttrib(divType2, { 'id': 'type2-options' });
		let textareaLongtext = divType2.children().eq(0);
		tinymce.DOM.setAttrib(textareaLongtext, { 'id': 'longtext' });
		tinymce.DOM.setStyles(divType2.children().eq(0).children().eq(0), { 'font-weight': 'bold' });
		tinymce.DOM.setStyles(divType2.children().eq(1), { 'display': 'none' });
		tinymce.DOM.setStyles(divType2.children().eq(2), { 'min-height': '100px' });
		divType2.hide();

	}

	function setAttribsAndHide_Appearance() {
		// id label preview
		let divPreview = $('div.tox-form__group').eq(0);
		let labelPreview = divPreview.children().eq(0);
		tinymce.DOM.setAttrib(labelPreview, { 'id': 'preview' });

	}

	TooltipDialog = {

		actualExtraClassName: '',
		actualType: 'type1',
		actualHref: '',
		actualNode: '',
		actualLinkTitle: '',
		actualTooltipTitle: '',
		actualClose_behaviour: '',
		actualTarget: '',
		actualColor: '',
		actualRounded: true,
		actualShadow: true,
		actualLongText: '',

		getInitialData: function () {
			let data = {
				extraClassName: TooltipDialog.actualExtraClassName,
				type: TooltipDialog.actualType,
				href: TooltipDialog.actualHref,
				node: TooltipDialog.actualNode,
				linkTitle: TooltipDialog.actualLinkTitle,
				tooltipTitle: TooltipDialog.actualTooltipTitle,
				close_behaviour: TooltipDialog.actualClose_behaviour,
				target: TooltipDialog.actualTarget,
				color: TooltipDialog.actualColor,
				rounded: TooltipDialog.actualRounded,
				shadow: TooltipDialog.actualShadow,
				longtext: TooltipDialog.actualLongText
			}

			return data;
		},

		setDefaultData: function () {
			TooltipDialog.actualExtraClassName = '';
			TooltipDialog.actualType = 'type1';
			TooltipDialog.actualHref = '';
			TooltipDialog.actualNode = '';
			TooltipDialog.actualLinkTitle = '';
			TooltipDialog.actualTooltipTitle = '';
			TooltipDialog.actualClose_behaviour = '';
			TooltipDialog.actualTarget = '';
			TooltipDialog.actualColor = '';
			TooltipDialog.actualRounded = true;
			TooltipDialog.actualShadow = true;
			TooltipDialog.actualLongText = '';
		},

		className: "exe-tooltip", // Main className (jQuery selector)

		otherClassNames: [
			// Type
			'plain-tt',
			'definition-tt',
			'ajax-tt',
			'glossary-tt',
			// Title
			'titled-tt',
			// Close button
			'with-button',
			// Colors
			'light-tt',
			'dark-tt',
			'red-tt',
			'blue-tt',
			'green-tt',
			// CSS3
			'rounded-tt',
			'shadowed-tt'
		],

		globals: {
			instructionsBlockTopPosition: 0
		},

		// Load the previous values (if needed)
		getValues: function () {

			// Get previous values
			var elm;
			var inst = tinymce.activeEditor;
			elm = inst.selection.getNode();
			elm = inst.dom.getParent(elm, "A");
			if (elm != null) {

				var type = 1;
				var color = "" // Yellow
				var rounded = false;
				var shadow = false;

				var ref = inst.dom.getAttrib(elm, 'href');
				var tit = inst.dom.getAttrib(elm, 'title');
				var cls = inst.dom.getAttrib(elm, 'class');
				var trg = inst.dom.getAttrib(elm, 'target');

				// Get the type
				if (cls.indexOf(" definition-tt") != -1) type = 2;
				else if (cls.indexOf(" ajax-tt") != -1) type = 3;
				else if (cls.indexOf(" glossary-tt") != -1) type = 4;
		
				// No AJAX / Glossary tooltips in eXe 3
				if (type==3 || type==4) {
					return false;
				}

				// Get the color
				if (cls.indexOf(" light-tt") != -1) color = "light";
				else if (cls.indexOf(" dark-tt") != -1) color = "dark";
				else if (cls.indexOf(" red-tt") != -1) color = "red";
				else if (cls.indexOf(" blue-tt") != -1) color = "blue";
				else if (cls.indexOf(" green-tt") != -1) color = "green";

				// Get other options
				if (cls.indexOf(" rounded-tt") != -1) rounded = true;
				if (cls.indexOf(" shadowed-tt") != -1) shadow = true;

				// Set the default type
				TooltipDialog.actualType = "type" + type;

				// Set the Link (common)
				TooltipDialog.actualHref = ref;
				if (ref.indexOf("exe-node:") == 0) {
					TooltipDialog.actualNode = ref;
				}

				// Set the target (common)
				TooltipDialog.actualTarget = trg;

				// Set the color (common)
				TooltipDialog.actualColor = color;

				// Set other options
				if (rounded) {
					TooltipDialog.actualRounded = true;
				} else {
					TooltipDialog.actualRounded = false;
				}
				if (shadow) {
					TooltipDialog.actualShadow = true;
				} else {
					TooltipDialog.actualShadow = false;
				}

				// Set the close behaviour (common)
				if (cls.indexOf(" with-button") != -1) {
					TooltipDialog.actualClose_behaviour = " with-button";
				}

				// Set the tooltip title and the link title
				if (cls.indexOf(" titled-tt") != -1) {
					tit = tit.split(" | ");
					if (tit.length == 2) {
						var title = tit[0];
						var txt = tit[1];
						TooltipDialog.actualTooltipTitle = title;
						TooltipDialog.actualLinkTitle = txt;
					} else {
						TooltipDialog.actualLinkTitle = tit[0];
					}
				} else {
					TooltipDialog.actualLinkTitle = tit;
				}

				// Set any extra classes
				var arr = cls.split(" ");
				var w;
				var extra = ""
				for (w = 0; w < arr.length; w++) {
					if (arr[w] != "" && arr[w] != TooltipDialog.className) {
						if (TooltipDialog.otherClassNames.indexOf(arr[w]) == -1) {
							extra += " " + arr[w];
						}
					}
				}
				TooltipDialog.actualExtraClassName = extra;

				// Set the tooltip content
				if (type !== 1) {
					var id = inst.dom.getAttrib(elm, 'id');
					id = id.replace("link", "t");
					var e = inst.dom.select("#" + id)[0];
					if (e) {
						if (ref.indexOf("#") == 0) {
							TooltipDialog.actualHref = "#";
						}
						TooltipDialog.actualLongText = e.innerHTML;
					}
				}

				// Show the right block
			} else {

				// New tooltip... Remember the user's preferences:
				var c = TooltipDialog.cookie.get("tinymceTooltipOptionsPlugin")
				if (c) {
					var c = c.split("|");
					if (c.length == 3) { // In case there are different versions of the plugin
						var clr = c[0]; // Color
						var rnd = c[1]; // Rounded
						var shd = c[2]; // Shadow
						if (clr != "" && rnd != "" && shd != "") {
							TooltipDialog.actualColor = clr;
							if (rnd == "true") {
								TooltipDialog.actualRounded = true;
							} else {
								TooltipDialog.actualRounded = false;
							}
							if (shd == "true") {
								;
								TooltipDialog.actualShadow = true;
							}
							else {
								TooltipDialog.actualShadow = false;
							}
						}
					}
				}

			}

		},

		setPreview: function () {

			// Change the image (no shadow and no border-radius, shadow and no border radius, etc.)
			var rounded = TooltipDialog.actualRounded;
			var shadow = TooltipDialog.actualShadow;
			var img = 'appearance1';
			if (rounded && shadow) img = 'appearance4';
			else if (rounded) img = 'appearance2';
			else if (shadow) img = 'appearance3';
			jQuery("#preview").html('<img src="' + url + '/img/' + img + '.png" width="340" height="55" alt="" />');

		},

		validate: function (type) {

			// Required fields

			var t = parseInt(type.replace("type", ""));
			var ref = TooltipDialog.actualHref;
			var txt = TooltipDialog.actualLinkTitle;
			var lng = TooltipDialog.actualLongText;

			if (ref == "") {
				if (t == 3) return _("Please select a Page");
				else return _("The Link is required");
			}
			if (t == 1 && txt == "") return _("The Link title is required");
			if (t == 2 && lng == "") return _("Please write the Definition");

			return "";

		},

		hasHTML: function (str) {

			// Check if it has HTML tags (if not, we'll wrap the content in a P tag)

			var a = document.createElement('div');
			a.innerHTML = str;
			for (var c = a.childNodes, i = c.length; i--;) {
				if (c[i].nodeType == 1) return true;
			}
			return false;

		},

		generateID: (function () {

			// Random ID
			function s4() {
				return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
			}
			return function () {
				return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
			};

		})(),

		cookie: {

			set: function (cname, cvalue, exdays) {
				var d = new Date();
				d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
				var expires = "expires=" + d.toGMTString();
				document.cookie = cname + "=" + cvalue + "; " + expires;
			},

			get: function (cname) {
				var name = cname + "=";
				var ca = document.cookie.split(';');
				for (var i = 0; i < ca.length; i++) {
					var c = ca[i];
					while (c.charAt(0) == ' ') {
						c = c.substring(1);
					}
					if (c.indexOf(name) == 0) {
						return c.substring(name.length, c.length);
					}
				}
				return "";
			}

		},

		setAttribs: function (elm, type) {

			var cls = TooltipDialog.className + " ";

			var t = parseInt(type.replace("type", ""));

			var ref = TooltipDialog.actualHref.replace(/ /g, '%20');

			var txt = TooltipDialog.actualLinkTitle;
			var tit = TooltipDialog.actualTooltipTitle;
			if (t == 1) {
				cls += "plain-tt";
			} else if (t == 2) {
				cls += "definition-tt";
				// Set the ID
				var inst = tinymce.activeEditor;
				var elm = inst.selection.getNode();
				elm = inst.dom.getParent(elm, "A");
				var id = inst.dom.getAttrib(elm, 'id');
				if (id == "") {
					id = "link" + this.generateID();
					// this.setAttrib(elm, 'id', id);
					tinymce.DOM.setAttrib(elm, 'id', id);
					this.currentLinkId = id;
					if (ref == "#") ref = "#" + id.replace("link", "t");
				}
			} else if (t == 3) {
				cls += "ajax-tt";
			} else {
				cls += "glossary-tt";
			}
			if (tit != "") {
				cls += " titled-tt";
				txt = tit + " | " + txt;
			}

			// Only Type 1 allows target="_blank"
			var trg = "";
			if (t == 1) trg = TooltipDialog.actualTarget;

			// With or without close button
			var btn = TooltipDialog.actualClose_behaviour;
			cls += btn;

			// Color (if not Yellow)
			var clr = TooltipDialog.actualColor;
			if (clr != "") {
				clr += "-tt";
				cls += " " + clr;
			}

			// Rounded or not
			var isRounded = "false";
			var rounded = TooltipDialog.actualRounded;
			if (rounded) {
				isRounded = "true";
				cls += " rounded-tt";
			}

			// Shadow
			var hasShadow = "false";
			var shadow = TooltipDialog.actualShadow;
			if (shadow) {
				hasShadow = "true";
				cls += " shadowed-tt";
			}

			// Set the cookie to remember the user's preferences (color, rounded, shadow)
			var cValue = clr.replace("-tt", "") + "|" + isRounded + "|" + hasShadow;
			TooltipDialog.cookie.set("tinymceTooltipOptionsPlugin", cValue, 30);

			// Other classes
			cls += TooltipDialog.actualExtraClassName;

			tinymce.DOM.setAttrib(elm, 'href', ref);
			tinymce.DOM.setAttrib(elm, 'data-mce-href', ref);

			tinymce.DOM.setAttrib(elm, 'title', txt);
			tinymce.DOM.setAttrib(elm, 'target', trg);
			tinymce.DOM.setAttrib(elm, 'class', cls);
			TooltipDialog.currentClassNames = cls;

		},

		// Create or update the content
		insert: function (api) {

			var type = TooltipDialog.actualType;
			var inst = tinymce.activeEditor;

			var errors = TooltipDialog.validate(type);
			if (errors != "") {
				inst.windowManager.alert(errors);
				return false;
			}

			var elm, elementArray, i;
			elm = inst.selection.getNode();
			elm = inst.dom.getParent(elm, "A");

			// Remove element if there is no href
			if (TooltipDialog.actualHref == '') {
				i = inst.selection.getBookmark();
				inst.dom.remove(elm, 1);
				inst.selection.moveToBookmark(i);
				inst.execCommand("mceEndUndoLevel");
				inst.close();
				return;
			}

			// Create new anchor elements
			if (elm == null) {
				inst.getDoc().execCommand("unlink", false, null);
				inst.execCommand("mceInsertLink", false, TooltipDialog.actualHref, { skip_undo: 1 });
				elementArray = tinymce.grep(inst.dom.select("a"), function (n) { return inst.dom.getAttrib(n, 'href') == TooltipDialog.actualHref; });
				for (i = 0; i < elementArray.length; i++) TooltipDialog.setAttribs(elm = elementArray[i], type);
			} else {
				TooltipDialog.setAttribs(elm, type);
			}

			// Don't move caret if selection was image
			if (elm.childNodes.length != 1 || elm.firstChild.nodeName != 'IMG') {
				inst.focus();
				inst.selection.select(elm);
				inst.selection.collapse(0);
			}

			// Definition
			if (type !== "type1") {
				// Get the tooltip content
				var lng = TooltipDialog.actualLongText;
				if (!TooltipDialog.hasHTML(lng)) lng = "<p>" + lng + "</p>";

				// Get the link ID
				var id = "";
				if (elm == null) {
					if (typeof (TooltipDialog.currentLinkId) != 'undefined') id = TooltipDialog.currentLinkId;
				} else {
					id = inst.dom.getAttrib(elm, 'id');
					if (id == "") id = "link" + TooltipDialog.generateID();
				}
				id = id.replace("link", "t");
				if (id != "") {
					var e = inst.dom.select("#" + id);
					// Create or update the content
					if (e.length == 0) {
						inst.dom.add(inst.getBody(), 'div', { id: id, class: TooltipDialog.className + '-text' }, lng);
					} else {
						inst.dom.setHTML(e, lng);
					}
					// Get the text of the link and show it in the definition
					if (typeof (jQuery) == 'function') {
						var d = inst.getDoc();
						var dt = jQuery("a[href$='" + id + "']", d);
						if (dt.length == 1) {
							var content = dt.text();
							if (content != "") {
								var s = '<style type="text/css">#' + id + ':before{content:"' + _('Tooltip') + ' - ' + _("Definition") + ' - ' + content + '"}</style>';
								jQuery("HEAD", d).append(s);
							}
						}
					}
				}
				// Get the link title
				var linkTitle = "";
				var term = TooltipDialog.actualTooltipTitle;
				var tit = TooltipDialog.actualLinkTitle;
				if (term != "" || tit != "") {
					linkTitle = term + " | " + tit;
					if (term == "") linkTitle = tit;
				}
				inst.dom.setAttribs(elm, {
					// Make sure that you link to the anchor
					// 'href': '#' + id,
					// Update the id too
					'id': id.replace("t", "link"),
					// And the className (or it won't work inside accordions and other blocks with effects)
					// class="exe-tooltip definition-tt..."
					'class': TooltipDialog.currentClassNames,
					// Set the link title
					'title': linkTitle
				});
				if(type === "type2")
				inst.dom.setAttribs(elm, {
					// Make sure that you link to the anchor
					'href': '#' + id,
				});
			}

			editor.execCommand("mceEndUndoLevel");
		},

		getHtmlOtherPage: async function (){
			let pageInTooltip = "";
			let pages = [];
			let pagesFullData = eXeLearning.app.project.structure.data;

			pagesFullData.forEach(pageFull => {
				pages.push({ pageId: `exe-node:${pageFull.pageId}` , id: pageFull.id});
			});

			pages.forEach(page =>{
				if(page.pageId == TooltipDialog.actualHref){
					pageInTooltip = page.id;
				}
			});

			let fullDataPage = await eXeLearning.app.project.app.api.getComponentsByPage(pageInTooltip);

			let blocksInPage = fullDataPage.odePagStructureSyncs;
			let htmlText = "";
			let needNextIteration = true;
			blocksInPage.every(block => {
				let idevicesInBlock = block.odeComponentsSyncs;
				idevicesInBlock.every(idevice =>{
					if(idevice.odeIdeviceTypeName === "text"){
						htmlText = idevice.htmlView;
						needNextIteration = false;
					}
					return needNextIteration;
				});
				return needNextIteration;
			});
			
			return htmlText;
		},

		showTypeOptions: function (val) {

			// Update the text below the SELECT
			var no = (parseFloat(val.replace("type", "")) - 1);
			var descriptions = [
				_("Plain text. You can add a title."),
				_("Write the term and its definition. You may use HTML and edit it in the editor."),
				_("Show the content of the first Free Text iDevice in the specified page.")
			];
			document.getElementById("type-desc").innerHTML = descriptions[no];

			// Show the block options and hide the others
			document.getElementById("type1-options").style.display = "none";
			document.getElementById("type2-options").style.display = "none";
			var currentBlock = document.getElementById(val + "-options");
			currentBlock.style.display = "block";
			// "Reflow"
			currentBlock.style.top = TooltipDialog.globals.instructionsBlockTopPosition;

			// Update #tooltipTitle's label text:
			var label = _("Tooltip title");
			if (val == "type2") label = _("Term");
			document.getElementById("tooltipTitle-l").innerHTML = label;

			// URL and Pages
			var refField = jQuery("#href");
			var refLabel = jQuery("#href-l");
			var nodeField = jQuery("#node");
			var nodeLabel = jQuery("#node-l");
			if (val == "type2") {
				if (refField.val() == "") refField.val("#");
				refField.prop("disabled", "disabled").css("opacity", 0.2);
				refLabel.css("opacity", 0.2);
				nodeField.prop("disabled", "disabled").css("opacity", 0.2);
				nodeLabel.css("opacity", 0.2);
			} else {
				if (refField.value == "#") refField.value = "";
				refField.prop("disabled", false).css("opacity", 1);
				refLabel.css("opacity", 1);
				nodeField.prop("disabled", false).css("opacity", 1);
				nodeLabel.css("opacity", 1);
				refField.show();
				refLabel.show();
				nodeField.show();
				nodeLabel.show();
			}

		},

		getNodesList: function () {

			// Get the package nodes
			// var i;
			// var arrayName = "tinymce_anchors";
			// var w = window;
			// var html = "";
			var options = [];
			options.push({ text: _("---"), value: '' })
			let pages = eXeLearning.app.project.structure.data;

			pages.forEach(page => {
				options.push({ text: page.pageName, value: `exe-node:${page.pageId}` });
			});
			// if (w) {
			// 	if (typeof w[arrayName] == "object") {
			// 		var myArray = w[arrayName];
			// 		for (i = 0; i < myArray.length; i++) {
			// 			var n = myArray[i].replace("exe-node:", "");
			// 			var checkN = n.split("#");
			// 			if (checkN[1] == "auto_top") n = n.replace("#auto_top", "");
			// 			n = decodeURIComponent(n);
			// 			var newOption = '<option value="' + myArray[i] + '">' + n + '</option>\n';
			// 			if (html.indexOf(newOption) == -1) {
			// 				html += newOption;
			// 				options.push({ text: n, value: myArray[i] })
			// 			}
			// 		}
			// 	}
			// }
			return options;

		},

		openToolTipDialog: function () {

			TooltipDialog.setDefaultData();

			var se = editor.selection;
			var a = editor.dom.getParent(se.getNode(), 'A');
			if (se.isCollapsed() && !a) {
				editor.windowManager.alert(_("No selection and not in link"));
				return false;
			}
	  
			let previousValues = TooltipDialog.getValues();
	  
			// No AJAX / Glossary tooltips in eXe 3
			if (previousValues===false) {
				editor.windowManager.alert(_("The tooltip data could not be retreived. Please create a new one choosing any of the available types."));
				return false;
			}

			win = editor.windowManager.open({
				title: _('Tooltip'),
				body: {
					type: 'tabpanel',
					tabs: [

						{
							title: _('General'),
							name: 'general',
							items: [
								{
									type: 'input',
									name: 'extraClassNames',
								},
								{
									type: 'listbox',
									name: 'type',
									label: _("Choose a type:"),
									items: [
										{ text: _("Link"), value: 'type1' },
										{ text: _("Definition"), value: 'type2' }
									]
								},
								{
									type: 'label',
									id: 'type-desc',
									visible: false,
									style: 'line-height:30px;font-weight:bold',
									label: _("Plain text. You can add a title."),
									items: []
								},
								{
									type: 'input',
									name: 'href',
									label: _("Link URL")
								},
								{
									type: 'listbox',
									name: 'node',
									label: _("Pages"),
									items: TooltipDialog.getNodesList()
								},
								{
									type: 'input',
									name: 'linkTitle',
									label: _("Link title")
								},
								{
									type: 'input',
									name: 'tooltipTitle',
									label: _("Tooltip title")
								},
								// Type 1
								{
									type: 'panel',
									name: 'type1-options',
									items: [
										{
											type: 'label',
											label: _("The tooltip will show the Link title."),
											items: []
										}
									]
								},
								// Type 2
								{
									type: 'panel',
									name: 'type2-options',
									items: [
										{
											type: 'label',
											label: _("The tooltip will show the term and its definition."),
											items: []
										},
										{
											type: 'label',
											visible: false,
											label: _("Definition:"),
											forId: 'longtext',
											items: []
										},
										{
											type: 'textarea',
											name: 'longtext',
											placeholder: _("Definition"),
										}
									]
								}
							]
						},

						{
							title: _('Behaviour'),
							name: 'behaviour',
							items: [
								{
									type: 'label',
									label: _("Close behaviour:"),
									items: []
								},
								{
									type: 'listbox',
									name: 'close_behaviour',
									items: [
										{ text: _("Automatically close the tooltip when moving the mouse out of the link"), value: '' },
										{ text: _("Close button: It will close the tooltip when clicked"), value: ' with-button' }
									]
								},
								{
									type: 'label',
									label: _("Link behaviour:"),
									items: []
								},
								{
									type: 'listbox',
									name: 'target',
									items: [
										{ text: _("Open in the same window"), value: '' },
										{ text: _("Open in a new window"), value: '_blank' }
									]
								}
							]
						},
						{
							title: _('Appearance'),
							name: 'appearance',
							items: [
								{
									type: 'label',
									label: "",
									name: 'preview',
									items: []
								},
								{
									type: 'listbox',
									name: 'color',
									label: _("Change the styling:"),
									items: [
										{ text: _("Yellow"), value: '' },
										{ text: _("Light"), value: 'light' },
										{ text: _("Dark"), value: 'dark' },
										{ text: _("Red"), value: 'red' },
										{ text: _("Blue"), value: 'blue' },
										{ text: _("Green"), value: 'green' }
									]
								},
								{
									type: 'panel',
									items: [
										{
											type: 'checkbox',
											name: 'rounded',
											label: _('Rounded')
										},
										{
											type: 'checkbox',
											name: 'shadow',
											label: _('Shadow')
										}
									]
								}
							]
						}

					]
				},
				buttons: [
					{
						type: 'cancel',
						name: 'cancel',
						text: 'Cancel'
					},
					{
						type: 'submit',
						name: 'save',
						text: 'Save',
						primary: true
					}
				],
				initialData: TooltipDialog.getInitialData(),
				onTabChange: function (api, details) {
					switch (details.newTabName) {
						case 'general':
							setAttribsAndHide();
							TooltipDialog.showTypeOptions(TooltipDialog.actualType);
							break;
						case 'appearance':
							setAttribsAndHide_Appearance();
							TooltipDialog.setPreview();
							break;
					}
				},
				onChange: function (api, details) {
					let data = api.getData();
					switch (details.name) {
						case 'type':
							TooltipDialog.showTypeOptions(data.type); // type1, type2 or type3
							TooltipDialog.actualType = data.type;
							TooltipDialog.actualLongText = "";
							api.setData({longtext: ""});
							break;
						case 'href':
							if (data.href.indexOf("exe-node:") != -0) {
								api.setData({ node: '' });
							}
							TooltipDialog.actualHref = data.href;
							break;
						case 'node':
							api.setData({ href: data.node });
							TooltipDialog.actualNode = data.node;
							break;
						case 'target':
							TooltipDialog.actualTarget = api.getData().target;
							break;
						case 'color':
							TooltipDialog.actualColor = api.getData().color;
							TooltipDialog.setPreview();
							break;
						case 'rounded':
							TooltipDialog.actualRounded = api.getData().rounded;
							TooltipDialog.setPreview();
							break;
						case 'shadow':
							TooltipDialog.actualShadow = api.getData().shadow;
							TooltipDialog.setPreview();
							break;
					}
				},
				onSubmit: async function (api) {
					TooltipDialog.actualHref = api.getData().href;
					TooltipDialog.actualLinkTitle = api.getData().linkTitle;
					TooltipDialog.actualTooltipTitle = api.getData().tooltipTitle;
					TooltipDialog.actualLongText = api.getData().longtext;
					if(api.getData().type === "type3") {
						TooltipDialog.actualLongText = await TooltipDialog.getHtmlOtherPage();
					}
					TooltipDialog.actualClose_behaviour = api.getData().close_behaviour;

					TooltipDialog.actualExtraClassName = api.getData().extraClassNames;

					TooltipDialog.insert();

					if (api.getData().href != '' && api.getData().input != '') {
						api.close();
					}

				},
				onClose: function () {
					TooltipDialog.setDefaultData();
				}
			});

			//Sdweb hide elements and set ids
			setDialogStyle();
			setAttribsAndHide();

			TooltipDialog.showTypeOptions(TooltipDialog.actualType);


		}, // openToolTipDialog

		activateButton: function (node) {

			var nodeName = node.nodeName;
			var activate = false;
			var parentA = editor.dom.getParent(node, 'A');

			if (nodeName == "A" && node.className.indexOf(TooltipDialog.className) != -1) activate = true;
			else if (parentA && parentA.className.indexOf(TooltipDialog.className) != -1) activate = true;

			return activate;

		}

	} // TooltipDialog

	editor.ui.registry.addToggleButton('tooltips', {
		icon: 'comment',
		tooltip: _('Tooltip'),
		onAction: TooltipDialog.openToolTipDialog,
		onSetup: function (buttonApi) {
			var editorEventCallback = function (eventApi) {
				buttonApi.setActive(TooltipDialog.activateButton(eventApi.element));
			};
			editor.on('NodeChange', editorEventCallback);
			return function (buttonApi) {
				editor.off('NodeChange', editorEventCallback);
			}
		}
	});

	editor.ui.registry.addMenuItem('tooltips', {
		text: _('Tooltip'),
		icon: 'comment',
		onAction: TooltipDialog.openToolTipDialog,
	});

	editor.on('init', function (e) {

		editor.dom.loadCSS(url + "/css/content.css");

		// jQuery is required
		if (typeof (jQuery) != 'function') {
			alert(_('Tooltip') + ": " + _('jQuery is required'));
			return false;
		}

		// i18n in CSS (type names in the right language)
		var d = editor.getDoc();
		var s = '<style type="text/css">';
		// Default title
		s += '.exe-tooltip-text:before{content:"' + _('Tooltip') + ' - ' + _("Definition") + '"}';
		// Get the text of each tooltip to replace the default title
		jQuery(".exe-tooltip-text", d).each(function () {
			var dt = jQuery("a[href$='" + this.id + "']", d);
			if (dt.length == 0) {
				// "The term could not be found"
				s += '#' + this.id + ':before{content:"' + _('Tooltip') + ' - ' + _("The term could not be found") + '"}';
			} else if (dt.length == 1) {
				var content = dt.text();
				if (content != "") s += '#' + this.id + ':before{content:"' + _('Tooltip') + ' - ' + _("Definition") + ' - ' + content + '"}';
			}
		});
		s += '</style>';
		jQuery("HEAD", d).append(s);

	});

});