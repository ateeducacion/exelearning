tinymce.PluginManager.add('exeeffects', function (editor, url) {

	var inBlock = false;
	var tabs = [2];

	function setDialogStyle() {
		let divDialog = $('div.tox-dialog').eq(0);
		tinymce.DOM.setStyles(divDialog, { 'min-width': 700 });

		let divBody = $('div.tox-dialog__body').eq(0);
		tinymce.DOM.setStyles(divBody, { 'display': 'grid', 'grid-template-columns': '1fr' });

		let divNavbar = $('div.tox-dialog__body-nav').eq(0);
		tinymce.DOM.removeClass(divNavbar, 'tox-dialog__body-nav');
		for (let i = 0; i < divNavbar.children().length; i++) {
			tinymce.DOM.setStyles(divNavbar.children().eq(i), { 'margin-left': 20 });
		}

		let divBodyContent = $('div.tox-dialog__body-content').eq(0);
		tinymce.DOM.setStyles(divBodyContent, { 'min-height': 300 });
	}

	function setGenTabStyle() {
		let divs = $('div.tox-form').eq(0).children();
		for (let i = 0; i < divs.length; i++) {
			tinymce.DOM.setStyles(divs.eq(i), { 'margin-bottom': 10 });
			if (i == 0) {
				tinymce.DOM.setStyles(divs.eq(i).children().eq(0), { 'font-weight': 'bold' });
			}
			if (i == 1) {
				tinymce.DOM.setStyles(divs.eq(i), { 'display': 'flex' });
				tinymce.DOM.setStyles(divs.eq(i).children().eq(0), { 'width': 150, 'padding': '8px 0' });
				tinymce.DOM.setStyles(divs.eq(i).children().eq(1), { 'display': 'flex', 'width': '100%' });
			}
		}
	}

	function setInstructionsTabStyle() {
		let divs = $('div.tox-form').eq(0).children();
		for (let i = 0; i < divs.length; i++) {
			tinymce.DOM.setStyles(divs.eq(i), { 'margin-bottom': 10 });
		}
		tinymce.DOM.setStyles(divs.eq(0).children().eq(0), { 'font-weight': 'bold' });
		tinymce.DOM.addClass(divs.eq(1).children().eq(0), 'tox-label' );

		tinymce.DOM.addClass(divs.eq(1).children().eq(1), 'tox-label' );
	}

	var eXeEffects = {

		previousType: 'type1',
		selectedType: '',
		openDialogeType: '',
		inBlock,
		tabs,
		// Available types
		types: [
			'accordion',
			'tabs',
			'paginated',
			'carousel',
			'timeline'
		],
		// Their description
		descriptions: [
			_("Collapsible content panels for presenting information in a limited space."),
			_("A single content area with multiple panels."),
			_("Divide your content into different pages."),
			_("Present a list of contents in horizontal order."),
			_("Simple, interactive timeline able to handle nearly any form of content.")
		],

		// Open the dialog
		open: function () {

			eXeEffects.mode = 'create'; // create or edit

			eXeEffects.currentType = 'accordion'; // Default value

			eXeEffects.getPreviousValues();

			eXeEffects.tabs[0] =
			// General tab
			{
				title: _('General'),
				name: 'general_tab',
				items: [
					{
						type: 'label',
						label: _("Please do not overuse these effects."),
						// style: 'font-weight:bold',
						items: []
					},
					{
						type: 'listbox',
						name: 'type',
						label: _("Choose a type:"),
						items: [
							{ text: _('Accordion'), value: 'type1' },
							{ text: _('Tabs'), value: 'type2' },
							{ text: _('Pagination'), value: 'type3' },
							{ text: _('Carousel'), value: 'type4' },
							{ text: _('Timeline'), value: 'type5' }
						]
					},
					{
						type: 'htmlpanel',
						html: '<p id="type-img" style="text-align:center;"> <img id="type-thumbnail" src="' + url + '/img/type1.png" width="297" height="131" alt="" /> </p>'
					},
					{
						type: 'htmlpanel',
						html: '<p id="type-desc" style="text-align:center">' + _
							("Collapsible content panels for presenting information in a limited space.") + '</p>'
					},
				]
			};

			eXeEffects.tabs[1] = {
				title: _('Instructions'),
				name: 'instructions_tab',
				items: [
					{
						type: 'label',
						label: _("Please do not overuse these effects."),
						items: []
					},
					{
						type: 'htmlpanel',
						html: '\
					<ol style="margin-left: 20px; margin-bottom: 10px;">\
						<li style="margin-bottom:5px">'+ _("Choose an effect (you can change it later).") + '</li>\
						<li style="margin-bottom:5px">'+ _("To add a new tab, block, page... just add a second level title (Heading 2) followed by its content.") + '</li>\
						<li style="margin-bottom:5px">'+ _("All blocks must start with a second level title (Heading 2).") + '</li>\
						<li style="margin-bottom:5px">'+ _('Timelines require a third level title (Heading 3) right after each Heading 2.') + '</li>\
					</ol>\
					<p>'+ _('Change the text of the tabs adding a title to each Heading 2 with the "Insert/Edit Attributes" option:') + ' <img src="' + url + '/img/attrs_icon.png" alt="" width="16" height="14" style="margin-left:2px;vertical-align:middle" /></p>\
				'
					}
				]
			};

			var body = {
				title: _('General'),
				type: 'tabpanel',
				tabs: eXeEffects.tabs,

			};

			config = {
				title: _("Effects"),
				body: body,
				buttons: [
					{
						type: 'cancel',
						text: _('Cancel')
					},
					{
						type: 'submit',
						text: _('Ok'),
						primary: true
					},
				],
				initialData: {
					type: eXeEffects.previousType
				},
				onTabChange: function (api, details) {
					if (details.newTabName === 'general_tab') {
						var val = eXeEffects.selectedType;
						eXeEffects.changeType(val, api);
						setGenTabStyle();
					} else {
						eXeEffects.selectedType = api.getData().type;
						setInstructionsTabStyle();
					}
				},
				onChange: function (api, changeData) {
					if (changeData.name === 'type') {
						eXeEffects.openDialogeType = eXeEffects.previousType;
						eXeEffects.selectedType = api.getData().type;
						var val = eXeEffects.selectedType;
						eXeEffects.changeType(val, api);
					}
				},
				onSubmit: function (api) {
					// Insert content when the window form is submitted
					eXeEffects.selectedType = api.getData().type;
					eXeEffects.insert();
					api.close();
				},
			};

			win = editor.windowManager.open(config);

			//Get the previous values
			setDialogStyle();
			setGenTabStyle();
			setInstructionsTabStyle();

			let no = parseFloat(eXeEffects.previousType.replace("type", ""));
			jQuery("#type-thumbnail").attr("src", url + "/img/" + eXeEffects.previousType + ".png");
			jQuery("#type-desc").html(eXeEffects.descriptions[no - 1]);
		},

		// Change the image and the description
		changeType: function (val, api) {

			var no = parseFloat(val.replace("type", ""));

			jQuery("#type-thumbnail").attr("src", url + "/img/" + val + ".png");
			jQuery("#type-desc").html(eXeEffects.descriptions[no - 1]);

			if (val == "type5" && eXeEffects.mode == "edit") {

				// You're trying to make a timeline out of any other effect (an accordion, for example)
				// Timelines have a different HTML
				if (eXeEffects.currentType != "timeline") {

					editor.windowManager.confirm(
						_('Timelines require a third level title (Heading 3) right after each Heading 2.') + '\n\n' + _("Make a timeline?"),
						function (s) {
							if (!s) {

								// Not confirmed: Back to the original type
								var no = eXeEffects.types.indexOf(eXeEffects.currentType);
								api.setData({ type: eXeEffects.openDialogeType });
								jQuery("#type-thumbnail").attr("src", url + "/img/type" + (no + 1) + ".png");
								jQuery("#type-desc").html(eXeEffects.descriptions[no]);

							}
						}
					);

				}
			}
		},

		getPreviousValues: function () {

			var elm = editor.selection.getNode();
			var e = jQuery(elm);
			var vals = eXeEffects.types;
			var parents;
			var classToSelect;

			// Check if we're in a block with effects
			for (var i = 0; i < vals.length; i++) {
				parents = e.parents(".exe-" + vals[i]);
				if (parents.length > 0 || elm.className == "exe-fx exe-" + vals[i]) {
					eXeEffects.mode = 'edit';
					classToSelect = vals[i];
					eXeEffects.currentType = classToSelect;
				}
			}

			// We are in a block with effects, so we choose the type and show its image and description
			if (eXeEffects.mode == 'edit') {

				if (elm.className == "exe-fx exe-" + classToSelect) {
					eXeEffects.currentElement = jQuery(elm);
				} else {
					eXeEffects.currentElement = jQuery(editor.selection.getNode()).parents(".exe-" + classToSelect);
				}

				var val = "type" + (eXeEffects.types.indexOf(classToSelect) + 1);

				eXeEffects.previousType = val;
				// eXeEffects.changeType(val, null);
			}

		},

		activateButton: function (node) {

			var activate = false;
			eXeEffects.inBlock = false;

			var e = jQuery(node);
			var vals = eXeEffects.types;
			var parents;

			// Check if we're in a block with effects
			for (var i = 0; i < vals.length; i++) {
				parents = e.parents(".exe-" + vals[i]);
				if (parents.length > 0 || node.className == "exe-fx exe-" + vals[i]) {
					activate = true;
					eXeEffects.inBlock = true;
				}
			}

			return activate;
		},

		insert: function () {

			var type = eXeEffects.selectedType;
			var vals = eXeEffects.types;

			// Get the CSS class
			var classToAdd = "exe-" + vals[(parseInt(type.replace("type", "")) - 1)];

			if (eXeEffects.mode == 'edit') {

				// Update the CSS class
				var div = eXeEffects.currentElement;
				div.attr("class", div.attr("class").replace("exe-" + eXeEffects.currentType, classToAdd));

			} else {

				// Create a new block
				var c = '<div class="exe-fx ' + classToAdd + '">';
				if (classToAdd == "exe-timeline") {
					c += '<h2>' + _("Heading 2") + '</h2>';
					c += '<h3>' + _("Heading 3") + '</h3>';
					c += '<p>' + _("Write your content...") + '</p>';
					c += '<h2>' + _("Heading 2") + '</h2>';
					c += '<h3>' + _("Heading 3") + '</h3>';
					c += '<p>' + _("Write your content...") + '</p>';
				} else {
					c += '<h2>' + _("Heading 2") + '</h2>';
					c += '<p>' + _("Write your content...") + '</p>';
					c += '<h2>' + _("Heading 2") + '</h2>';
					c += '<p>' + _("Write your content...") + '</p>';
				}
				c += '</div><br />';
				editor.execCommand('mceInsertContent', false, c);

			}

			// Allow undo + Close the dialog
			editor.execCommand("mceEndUndoLevel");
			editor.windowManager.close();

		}

	}
	editor.ui.registry.addIcon('exeeffects', `
	<?xml version="1.0" encoding="utf-8"?>
	<!-- Generator: Adobe Illustrator 16.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
	<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
	<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
		 width="24px" height="24px" viewBox="0 0 24 24" enable-background="new 0 0 24 24" xml:space="preserve">
	<desc>Created with Sketch.</desc>
	<polygon fill-rule="evenodd" clip-rule="evenodd" points="19.447,9.062 16.656,9.062 14.397,12.217 12.177,9.062 9.573,9.062
		7.302,9.062 7.302,7.812 11.469,7.812 11.469,5.021 7.302,5.021 4.552,5.021 4.552,7.812 4.552,9.062 4.552,11.229 4.552,15.02
		7.302,15.02 7.302,11.229 11.039,11.229 13.015,14.149 9.573,18.957 12.552,18.979 14.442,16.26 16.281,18.979 19.156,18.979
		15.834,14.258 "/>
	</svg>`);
	// addToggleButton en lugar de addButton
	editor.ui.registry.addToggleButton('exeeffects', {
		tooltip: _("Effects (accordion, tabs, pagination...)"),
		//image: url + '/img/exeeffects.png',
		icon: 'exeeffects',
		onAction: function () {
			// eXeEffects.getPreviousValues();
			eXeEffects.open();

		},
		onSetup: function (buttonApi) {
			var editorEventCallback = function (eventApi) {
				buttonApi.setActive(eXeEffects.activateButton(eventApi.element));
			};
			editor.on('NodeChange', editorEventCallback);
			return function (buttonApi) {
				editor.off('NodeChange', editorEventCallback);
			}
		}
	});

	editor.ui.registry.addMenuItem('exeeffects', {
		text: _("Effects (accordion, tabs, pagination...)"),
		icon: 'exeeffects',
		onAction: eXeEffects.open,
	});

	editor.on('init', function (e) {

		editor.dom.loadCSS(url + "/css/content.css");

		// jQuery is required
		if (typeof (jQuery) != 'function') {
			alert(_('Effects') + ": " + _('jQuery is required'));
			return false;
		}

		// i18n in CSS (type names in the right language)
		var d = editor.getDoc();
		var s = '<style type="text/css">';
		s += '.exe-fx.exe-accordion:before{content:"' + _('Accordion') + '"}';
		s += '.exe-fx.exe-tabs:before{content:"' + _('Tabs') + '"}';
		s += '.exe-fx.exe-paginated:before{content:"' + _('Pagination') + '"}';
		s += '.exe-fx.exe-carousel:before{content:"' + _('Carousel') + '"}';
		s += '.exe-fx.exe-timeline:before{content:"' + _('Timeline') + '"}';
		s += '</style>';
		jQuery("HEAD", d).append(s);

	});

	return {
		getMetadata: function () {
			return {
				name: "exeeffects",
				//url: "http://exampleplugindocsurl.com"
			};
		}
	};
});