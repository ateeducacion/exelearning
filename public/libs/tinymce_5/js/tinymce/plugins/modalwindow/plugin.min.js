/**
 * plugin.min.js
 *
 * Released under Attribution-ShareAlike 4.0 International License.
 * Author: Ignacio Gros (http://gros.es/) for http://exelearning.net/
 *
 * License: http://creativecommons.org/licenses/by-sa/4.0/
 */

/**
 * Create/edit modal dialogs (inline content in prettyPhoto)
 * To be used with prettyPhoto: /webui/scripts/exe_lightbox/*.*
 * prettyPhoto, by Stephane Caron, is licensed under the GPLv2 or CC-BY-2.5
 */
tinymce.PluginManager.add('modalwindow', function (editor, url) {

	let $ = tinymce.dom.DomQuery;

	function setDialogStyle() {
		let divDialog = $('div.tox-dialog').eq(0);
		tinymce.DOM.setStyles(divDialog, { 'min-width': 500 });
		
		let divBodyContent = $('div.tox-dialog__body-content').eq(0);
		tinymce.DOM.setStyles(divBodyContent, { 'min-height': 250 });

		$('div.tox-form__group').eq(2).hide();
	  }

	ModalWindowDialog = {

		actualTitle: '',
		actualHref: '',
		actualHtmlSource: '',

		getInitialData: function () {
			let data = {
				title: ModalWindowDialog.actualTitle,
				href: ModalWindowDialog.actualHref,
				htmlSource: ModalWindowDialog.actualHtmlSource
			}

			return data;
		},

		setDefaulData: function () {
			ModalWindowDialog.actualTitle = '';
			ModalWindowDialog.actualHref = '';
			ModalWindowDialog.actualHtmlSource = '';
		},

		getCurrentValues: function () {
			var elm;
			var editor = tinyMCE.activeEditor;
			elm = editor.selection.getNode();
			elm = editor.dom.getParent(elm, "A");
			if (elm != null) {

				var ref = editor.dom.getAttrib(elm, 'href');
				var tit = editor.dom.getAttrib(elm, 'title');

				// Set the Link (common)
				ModalWindowDialog.actualHref = ref;

				// Set the Title
				ModalWindowDialog.actualTitle = tit;

				// Set the dialog content
				var id = editor.dom.getAttrib(elm, 'id');

				id = id.replace("link", "t");
				var e = editor.dom.select(id);
				var e = editor.contentWindow.document.getElementById(id);
				if (e) {
					if (ref.indexOf("#") == 0) {
						ModalWindowDialog.actualHref = ref;
					}
					ModalWindowDialog.actualHtmlSource = e.innerHTML;
				}
			}
		},

		hasHTML: function (str) {
			var a = document.createElement('div');
			a.innerHTML = str;
			for (var c = a.childNodes, i = c.length; i--;) {
				if (c[i].nodeType == 1) return true;
			}
			return false;
		},

		generateID: (function () {
			function s4() {
				return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
			}
			return function () {
				return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
			};
		})(),

		setAttribs: function (elm, type) {
			var editor = tinyMCE.activeEditor;
			editor.dom.setAttrib(elm, 'href', actualHref.replace(/ /g, '%20'));
			editor.dom.setAttrib(elm, 'title', actualTitle);
			var e = jQuery(elm);
			var r = e.attr("rel");
			var v = 'lightbox';
			if (r && r.indexOf('lightbox') > -1) v = r;
			jQuery(elm).addClass('exe-dialog-link').attr("rel", v).removeAttr("target");
		},

		insert: function (api) {

			var editor = tinyMCE.activeEditor;
			actualTitle = api.getData().title;
			actualHref = api.getData().href;
			actualHtmlSource = api.getData().htmlSource;

			var content = api.getData().htmlSource;
			if (content == "") {
				editor.windowManager.alert(_('Please write the Content'));
				return false;
			}

			var elm, elementArray, i, editor;
			elm = editor.selection.getNode();
			elm = editor.dom.getParent(elm, "A");

			// Create new anchor elements
			if (elm == null) {
				editor.getDoc().execCommand("unlink", false, null);
				editor.execCommand("mceInsertLink", false, "#mce_temp_url#", { skip_undo: 1 });
				elementArray = tinymce.grep(editor.dom.select("a"), function (n) { return editor.dom.getAttrib(n, 'href') == '#mce_temp_url#'; });
				for (i = 0; i < elementArray.length; i++) {
					ModalWindowDialog.setAttribs(elm = elementArray[i]);
				}
			} else {
				ModalWindowDialog.setAttribs(elm);
			}

			// Don't move caret if selection was image
			if (elm.childNodes.length != 1 || elm.firstChild.nodeName != 'IMG') {
				editor.focus();
				editor.selection.select(elm);
				editor.selection.collapse(0);
			}

			// Wrap it if needed
			if (!ModalWindowDialog.hasHTML(content)) content = "<p>" + content + "</p>";

			// Get the link ID
			var id = "";
			id = editor.dom.getAttrib(elm, 'id');
			if (id == "") id = "link" + ModalWindowDialog.generateID();
			id = id.replace("link", "t");
			if (id != "") {

				var e = editor.dom.select("#" + id);
				// Create or update the content
				if (e.length == 0) {
					editor.dom.add(editor.getBody(), 'div', { id: id, class: 'exe-dialog-text js-hidden' }, content);
				} else {
					editor.dom.setHTML(e, content);
				}
			}

			editor.dom.setAttribs(elm, {
				// Make sure that you link to the anchor
				'href': '#' + id,
				// Update the id too
				'id': id.replace("t", "link")
			});

			// Get the text of the link and show it in the editor
			if (typeof (jQuery) == 'function') {
				var d = editor.getDoc();
				var dt = jQuery("a[href$='" + id + "']", d);
				if (dt.length == 1) {
					var linkText = dt.text();
					if (linkText != "") {
						var s = '<style type="text/css">#' + id + ':before{content:"' + editor.translate("Dialog Window") + ' - ' + linkText + '"}</style>';
						jQuery("HEAD", d).append(s);
					}
				}
			}

			editor.execCommand("mceEndUndoLevel");
			editor.windowManager.close();

		},

		open: function () {
			ModalWindowDialog.setDefaulData();

			ModalWindowDialog.getCurrentValues();

			var se = editor.selection;
			var a = editor.dom.getParent(se.getNode(), 'A');
			if (se.isCollapsed() && !a) {
				editor.windowManager.alert(_("No selection and not in link"));
				return false;
			}

			win = editor.windowManager.open({
				title: _('Dialog Window'),
				body: {
					type: 'panel',
					items: [
						{
							type: 'label',
							label: _('Dialog title (the title of the link)'),
							items: []
						},
						{
							type: 'input',
							name: 'title',
						},
						{
							type: 'input',
							name: 'href',
						},
						{
							type: 'label',
							label: _('Write the content of the dialog. You may use HTML and edit it in the editor.'),
							items: []
						},
						{
							type: 'textarea',
							name: 'htmlSource',
						}
					]
				},
				buttons: [
					{
						type: 'cancel',
						name: 'cancel',
						text: 'Cancel'
					},
					{
						type: 'submit',
						name: 'save',
						text: 'Save',
						primary: true
					}
				],
				initialData: ModalWindowDialog.getInitialData(),
				onSubmit: function (api) {
					ModalWindowDialog.insert(api)

				}
			});
			setDialogStyle();
		},

		activateButton: function (node) {

			var nodeName = node.nodeName;
			var activate = false;
			var parentA = editor.dom.getParent(node, 'A');

			if (nodeName == "A" && node.className.indexOf("exe-dialog-link") != -1) activate = true;
			else if (parentA && parentA.className.indexOf("exe-dialog-link") != -1) activate = true;

			return activate;

		}

	} // ModalWindowDialog

	editor.ui.registry.addIcon('modalwindow', `
	<?xml version="1.0" encoding="utf-8"?>
	<!-- Generator: Adobe Illustrator 16.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
	<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
	<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
		 width="24px" height="24px" viewBox="0 0 24 24" enable-background="new 0 0 24 24" xml:space="preserve">
	<desc>Created with Sketch.</desc>
	<path fill-rule="evenodd" clip-rule="evenodd" d="M5.021,5.067v13.865h13.959V5.067H5.021z M16.979,17.048H7.021v-7.98h9.959V17.048
		z"/>
	</svg>`);

	editor.ui.registry.addToggleButton('modalwindow', {
		tooltip: _('Dialog Window'),
		icon: "modalwindow",
		onAction: ModalWindowDialog.open,
		onSetup: function (buttonApi) {
			var editorEventCallback = function (eventApi) {
				buttonApi.setActive(ModalWindowDialog.activateButton(eventApi.element));
			};
			editor.on('NodeChange', editorEventCallback);
			return function (buttonApi) {
				editor.off('NodeChange', editorEventCallback);
			}
		}
	});

	editor.ui.registry.addMenuItem('modalwindow', {
		text: _('Dialog Window'),
		icon: 'modalwindow',
		onAction: ModalWindowDialog.open,
		context: 'insert'
	});

	editor.on('init', function (e) {

		editor.dom.loadCSS(url + "/css/content.css");

		// jQuery is required
		if (typeof (jQuery) != 'function') {
			alert(tinymce.translate('Dialog Window') + ": " + tinymce.translate('jQuery is required'));
			return false;
		}

		// i18n in CSS (texts in the right language)
		var d = editor.getDoc();
		var s = '<style type="text/css">';
		// Default title
		s += '.exe-dialog-text:before{content:"' + tinymce.translate('Dialog Window') + '"}';
		// Get the text of each dialog to replace the default value
		jQuery(".exe-dialog-text", d).each(function () {
			var dt = jQuery("a[href$='" + this.id + "']", d);
			if (dt.length == 0) {
				// Content not found
				s += '#' + this.id + ':before{content:"' + tinymce.translate('Dialog Window') + ' - ' + tinymce.translate("Link not found") + '"}';
			} else if (dt.length == 1) {
				var content = dt.text();
				if (content != "") s += '#' + this.id + ':before{content:"' + tinymce.translate('Dialog Window') + ' - ' + content + '"}';
			}
		});
		s += '</style>';
		jQuery("HEAD", d).append(s);

	});

});