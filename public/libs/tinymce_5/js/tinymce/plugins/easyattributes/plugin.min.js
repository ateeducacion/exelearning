/**
 * plugin.min.js
 *
 * Released under Attribution-ShareAlike 4.0 International License.
 * Author: Ignacio Gros (http://gros.es/) for http://exelearning.net/
 *
 * License: http://creativecommons.org/licenses/by-sa/4.0/
 */

/**
 * Insert/Edit Attributes Plugin
 * If you prefer a simpler solution check this plugin by Gagaro: https://github.com/Gagaro/tinymce-editattributes 
 * The "New attribute" idea was taken from Gagaro's plugin
 * Ideas by José Ramón Jiménez Reyes:
 *     Add styles from the current style's content.css file
 *     Add attributes just to the selection wrapping it in a SPAN tag
 */
tinymce.PluginManager.add('easyattributes', function (editor, url) {

	function setDialogStyle() {
		let divDialog = $('div.tox-dialog').eq(0);
		tinymce.DOM.setStyles(divDialog, { 'width': 500 });

		let divBody = $('div.tox-dialog__body').eq(0);
		tinymce.DOM.setStyles(divBody, { 'display': 'grid', 'grid-template-columns': '1fr' });

		let divNavbar = $('div.tox-dialog__body-nav').eq(0);
		tinymce.DOM.removeClass(divNavbar, 'tox-dialog__body-nav');
		tinymce.DOM.setStyle(divNavbar, 'margin-top', 10);

		for (let i = 0; i < divNavbar.children().length; i++) {
			tinymce.DOM.setStyles(divNavbar.children().eq(i), { 'margin-left': 20 });
		}

		let divBodyContent = $('div.tox-dialog__body-content').eq(0);
		tinymce.DOM.setStyles(divBodyContent, { 'max-height': 450 });
	}

	function setAttribsTabStyle() {
		
		let divGrid = $('div.tox-form__grid');
		let divs = $('div.tox-form').children();

		let labelGrid = divs.eq(divs.length-2).children().eq(0);
		labelGrid.after(divGrid);
		// let newGrid = tinymce.DOM.getOuterHTML(labelGrid).replace('</div>', '');
		// newGrid = newGrid + tinymce.DOM.getOuterHTML(divGrid) + '</div>';

		// tinymce.DOM.setOuterHTML(labelGrid, newGrid);

		divGrid = $('div.tox-form__grid');
		for (let i = 0; i < divs.length-1; i++) {
			tinymce.DOM.setStyles(divs.eq(i), { 'display': 'flex' });
			tinymce.DOM.setStyles(divs.eq(i).children().eq(0), { 'width': 200, 'padding': '8px 0' });
			tinymce.DOM.setStyles(divs.eq(i).children().eq(1), { 'display': 'flex', 'width': '100%' });
			if(i == divs.length-2){
				tinymce.DOM.setStyles(divs.eq(i).children().eq(1).children().eq(0), {'margin-right': 5});
				tinymce.DOM.setStyles(divs.eq(i).children().eq(1).children().eq(1), {'margin-left': 5});
				tinymce.DOM.removeClass(divs.eq(i).children().eq(1), 'tox-form__grid tox-form__grid--2col');
			}
		}

	}
	
	function setEventsTabStyle() {

		let divs = $('div.tox-form__group');
		for (let i = 0; i < divs.length; i++) {
			tinymce.DOM.setStyles(divs.eq(i), { 'display': 'flex' });
			tinymce.DOM.setStyles(divs.eq(i).children().eq(0), { 'width': 200, 'padding': '8px 0' });
			tinymce.DOM.setStyles(divs.eq(i).children().eq(1), { 'display': 'flex', 'width': '100%' });
			
		}

	}

	let defaultAttributes = [
		'title',
		'id',
		'class',
		'style',
		'dir',
		'lang',
		'tabindex',
		'accesskey'
	];

	function getInitialData(nodeAttrs) {
		let data = {
			title: getAttr('title', nodeAttrs),
			id: getAttr('id', nodeAttrs),
			class: getAttr('class', nodeAttrs),
			style: getAttr('style', nodeAttrs),
			dir: getAttr('dir', nodeAttrs),
			lang: getAttr('lang', nodeAttrs),
			tabindex: getAttr('tabindex', nodeAttrs),
			accesskey: getAttr('accesskey', nodeAttrs)

		}

		for (var i = 0; i < nodeAttrs.length; i++) {
			var attribute = nodeAttrs[i];
			if (attribute.name.indexOf("data-mce") != 0) {
				if (defaultAttributes.indexOf(attribute.name) == -1 && defaultEvents.indexOf(attribute.name) == -1) {
					data[attribute.name] = attribute.value
				}
			}
		}

		return data;
	}

	function getAttr(attr, nodeAttrs) {
		if (nodeAttrs[attr]) return nodeAttrs[attr].value;
		else return '';
	}

	function getAvailableClasses() {

		var sheets = document.styleSheets;
		var sheet, rule, rules, name, tmp;
		var classes = [];
		var names = [];

		// Add the CSS classes of the current theme to the list
		for (var i = 0, iLen = sheets.length; i < iLen; i++) {
			sheet = sheets[i];
			if (!sheet.href) {
				if (sheet.ownerNode&&sheet.ownerNode.classList&&sheet.ownerNode.classList.contains("theme-style")) {
					rules = sheet.rules || sheet.cssRules;
					for (var j = 0, jLen = rules.length; j < jLen; j++) {
						rule = rules[j];
						tmp = rule.cssText;
						tmp = tmp.split("{");
						tmp = tmp[0];
						tmp = tmp.split("(");
						tmp = tmp[0];
						tmp = tmp.trim();
						if (tmp.indexOf("body#tinymce ")==0||tmp.indexOf("#tinymce ")==0) {
							tmp = tmp.split(" ");
							tmp = tmp[tmp.length-1];
							if (tmp.length>2&&tmp.indexOf(".")==0) {
								classes.push(tmp);
							}
						}
					}
				}
			}
		}
		classes.sort();

		// Add some classes (exe-hidden, etc.)
		var rightClasses = [
			{ text: '-- Not Set --', value: '' },
			{ text: 'exe-hidden', value: 'exe-hidden' },
			{ text: 'exe-hidden-accessible', value: 'exe-hidden-accessible' },
			{ text: 'exe-block-warning', value: 'exe-block-warning' },
			{ text: 'exe-block-alert', value: 'exe-block-alert' },
			{ text: 'exe-block-danger', value: 'exe-block-danger' },
			{ text: 'exe-block-info', value: 'exe-block-info' },
			{ text: 'exe-block-success', value: 'exe-block-success' },
			{ text: 'auto-numbered', value: 'auto-numbered' }
		];

		for (var z = 0; z < classes.length; z++) {
			name = classes[z].replace('.', '');
			if (isNaN(classes[z].charAt(1)) && names.indexOf(name) == -1 && name.indexOf("iDevice") == -1 && name.indexOf("Idevice") == -1 && name != "js") {
				rightClasses.push({ text: name, value: name });
				names.push(name);
			}
		}

		return rightClasses;

	}

	// TinyMCE 3.5.11 events (see attributes.htm)	
	var defaultEvents = [
		'onfocus',
		'onblur',
		'onclick',
		'ondblclick',
		'onmousedown',
		// 'onmouseup',
		'onmouseover',
		'onmousemove',
		'onmouseout',
		'onkeypress',
		// 'onkeydown',
		'onkeyup'
	];

	// Get the Events tab content
	function getEvents(nodeAttrs) {

		var events = [];

		for (var e = 0; e < defaultEvents.length; e++) {
			events.push(
				{ type: 'input', name: defaultEvents[e], size: 40, label: defaultEvents[e], value: getAttr(defaultEvents[e], nodeAttrs) }
			);
		}

		return events;

	}

	// Get the Attributes tab content
	function getAttributes(nodeAttrs) {

		var attrs = [
			{ type: 'input', name: 'title', size: 40, label: _('Title'), value: getAttr('title', nodeAttrs) },
			{ type: 'input', name: 'id', size: 40, label: _('ID'), value: getAttr('id', nodeAttrs) },
			{ type: 'input', name: 'class', size: 40, label: _('CSS class'), value: getAttr('class', nodeAttrs) },
			{
				type: 'listbox',
				name: 'extraclasses',
				label: _("Add CSS class"),
				items: getAvailableClasses(),

			},
			{ type: 'input', name: 'style', size: 40, label: _('Style'), value: getAttr('style', nodeAttrs) },
			{
				type: 'listbox',
				name: 'dir',
				label: _("Text Direction"),
				items: [
					{ text: _("Default"), value: '' },
					{ text: _("Left to Right"), value: 'ltr' },
					{ text: _("Right to Left"), value: 'rtl' }
				],
				value: getAttr('dir', nodeAttrs)
			},
			{ type: 'input', name: 'lang', size: 40, label: _('Language'), value: getAttr('lang', nodeAttrs) },
			{ type: 'input', name: 'tabindex', size: 40, label: _('TabIndex'), value: getAttr('tabindex', nodeAttrs) },
			{ type: 'input', name: 'accesskey', size: 40, label: _('AccessKey'), value: getAttr('accesskey', nodeAttrs) }
		];

		for (var i = 0; i < nodeAttrs.length; i++) {
			var attribute = nodeAttrs[i];
			if (attribute.name.indexOf("data-mce") != 0) {
				if (defaultAttributes.indexOf(attribute.name) == -1 && defaultEvents.indexOf(attribute.name) == -1) {
					attrs.push(
						{ type: 'input', name: attribute.name, size: 40, label: attribute.name, value: attribute.value }
					);
				}
			}
		}

		attrs.push(
			// New attribute
			{
				type: 'label',
				label: _('New attribute'),
				items: []
			},
			{
				type: 'grid',
				columns: 2,
				label: _('New attribute'),
				items: [
					{ name: 'mce_new_name', type: 'input', ariaLabel: _('Name'), placeholder: _('Name').toLowerCase() },
					{ name: 'mce_new_value', type: 'input', ariaLabel: _('Value'), placeholder: _('Value').toLowerCase() },
				]
			}
		);

		return attrs;

	}

	// Set the attributes and events
	function setAttributes(e, api) {
		// Set the Attributes
		for (key in api.getData()) {
			editor.dom.setAttribs(e, api.getData());
		}

		// Set the Events
		for (var i = 0; i < defaultEvents.length; i++) {
			editor.dom.setAttrib(e, defaultEvents[i], api.getData()[defaultEvents[i]]);
		}
	}

	function showDialog() {

		var selectedNode = editor.selection.getNode();

		// VIDEO, AUDIO, IFRAME, etc.
		if ((selectedNode.nodeName == "IMG" || selectedNode.nodeName == "SPAN") && selectedNode.getAttribute('data-mce-object')) {
			try {
				tinymce.activeEditor.plugins.exemedia.showDialog();
			} catch (e) {
				editor.windowManager.alert(_('Error recovering data'));
			}
			return;
			// TABLE
		} else if (selectedNode.nodeName == "TABLE") {
			editor.windowManager.alert(_('Instructions') + ": " + _('Table') + " - " + _('Table Properties'));
			return;
		}

		var nodeAttrs = selectedNode.attributes;
		var body = {
			type: 'tabpanel',
			tabs: [
				{
					title: _('Attributes'),
					name: 'attributes',
					items: getAttributes(nodeAttrs)
				},
				{
					title: _('Events'),
					name: 'events',
					items: getEvents(nodeAttrs)
				}
			]
		};

		win = editor.windowManager.open({
			title: _("Insert/Edit Attributes"),
			body: body,
			buttons: [
				{
					type: 'cancel',
					name: 'cancel',
					text: 'Cancel'
				},
				{
					type: 'submit',
					name: 'save',
					text: 'Save',
					primary: true
				}
			],
			initialData: getInitialData(nodeAttrs),
			onTabChange: function(api, details){
				switch (details.newTabName) {
					case 'attributes':
						setAttribsTabStyle();
						break;
					case 'events':
						setEventsTabStyle();
						break;
				}
			},
			onChange: function (api, details) {
				switch (details.name) {
					case 'extraclasses':
						// addClass(api.getData().extraclasses);
						let exist = false;
						let allClasses = api.getData().class;
						let actualExtraclass = api.getData().extraclasses;
						let individualClasses = allClasses.split(' ');
						individualClasses.forEach(actualClass => {
							if (actualClass == actualExtraclass) {
								exist = true;
								return;
							}
						});

						if (!exist) {
							if (allClasses.length > 40) {
								// Warn the user so there's no doubt that the class was added (it's not visible)
								editor.windowManager.alert(_('Class added to the "CSS class" field.'));
							}
							allClasses += ' ' + actualExtraclass;
							api.setData({ class: allClasses });
						}

						break;
				}
			},
			onSubmit: function (api) {
				editor.undoManager.transact(function () {


					var new_name = api.getData().mce_new_name;
					var new_value = api.getData().mce_new_value;

					api.setData({ mce_new_name: '' });
					api.setData({ mce_new_value: '' });

					if (new_name.length > 0) {
						editor.dom.setAttrib(editor.selection.getNode(), new_name, new_value);
					}

					// Remove this attribute. Its value is already part of the "CSS class" field (see onselect)
					api.setData({ extraclasses: '' });

					var c = editor.selection.getContent();
					if (c != "") {
						if (selectedNode.nodeName == "IMG") {
							setAttributes(selectedNode, api);
							return false;
						} else if (selectedNode.nodeName == "OL" || selectedNode.nodeName == "UL") {
							setAttributes(selectedNode, api);
							return false;
						} else {
							// Add the attributes just to the selection, not to the whole paragraph. Create a SPAN tag if needed.
							if (selectedNode.nodeName != "SPAN") {
								var newElm = editor.dom.create('span', {}, c);
								setAttributes(newElm, api);
								editor.selection.setNode(newElm);
								editor.windowManager.close();
								return false;
							}
						}
					}

					// Update the attributes and events
					setAttributes(selectedNode, api);
				});

				api.close();
			}
		});

		setDialogStyle();
		setAttribsTabStyle();
		
	}

	editor.ui.registry.addButton('easyattributes', {
		icon: 'options',
		tooltip: _("Insert/Edit Attributes"),
		onAction: showDialog
	});

	editor.ui.registry.addMenuItem('easyattributes', {
		text: _("Insert/Edit Attributes"),
		onAction: showDialog,
		context: 'edit'
	});

	editor.on('init', function (e) {
		editor.dom.loadCSS(url + "/css/content.css");
	});

});