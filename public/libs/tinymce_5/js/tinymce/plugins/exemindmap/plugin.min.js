/**
 * Mind mapping plugin for TinyMCE
 *
 * Released under the MIT license.
 * Author: Ignacio Gros (http://gros.es/) for http://exelearning.net/ 
 *
 * It works with mindmaps (https://www.mindmaps.app/), by David Richard (http://drichard.org/), licensed under AGPL V3.
 * See /tools/mindmaps/LICENSE
 *
 * It includes:
 * Cropper (https://fengyuanchen.github.io/cropper) and jQuery Cropper (https://fengyuanchen.github.io/jquery-cropper), by Chen Fengyuan, under the MIT license.
 * jQuery JavaScript Library v1.6.1, by John Resig, under the MIT license.
 * FileSaver.js 1.3.3, by Eli Grey, under the MIT license.
 *
 * Plugin icons by Google (https://material.io/tools/icons/), available under the Apache license version 2.0. (http://www.apache.org/licenses/LICENSE-2.0)
 *
 * Loading icon: http://ajaxload.info/
 */
tinymce.PluginManager.add('exemindmap', function (editor, url) {

    let $ = tinymce.dom.DomQuery;

    let labelInstructions = '';


    function hideElements() {
        let divMain = $('div.tox-form').eq(0);

        let divInstructions = divMain.children().eq(0);
        labelInstructions = divInstructions.children().eq(0);
        tinymce.DOM.setAttrib(labelInstructions, 'id', 'mindmapImgInstructions');

        let divImgToSave = divMain.children().eq(1);
        let inputImgToSave = divImgToSave.children().eq(0);
        tinymce.DOM.setAttrib(inputImgToSave, 'id', 'mindmapImgToSave');
        divImgToSave.hide();

        let divCode = divMain.children().eq(2);
        let textareaCode = divCode.children().eq(0);
        tinymce.DOM.setAttrib(textareaCode, 'id', 'mindmapCode');
        divCode.hide();

        let divEditor = divMain.children().eq(3);
        let buttonEditor = divEditor.children().eq(0);
        tinymce.DOM.setStyle(buttonEditor, 'width', '100%');

        let divX = divMain.children().eq(7);
        tinymce.DOM.setAttrib(divMain.children().eq(0), 'id', 'originalWidth');
        tinymce.DOM.setAttrib(divMain.children().eq(2), 'id', 'originalHeight');
        divX.hide();

        let divDimensions = divMain.children().eq(8);

        // hide label width and hieght and block
        let divWidth = divDimensions.children().eq(0).children().eq(0);
        let labelWidth = divWidth.children().eq(0);
        labelWidth.hide();
        let inputWidth = divWidth.children().eq(1);
        tinymce.DOM.setAttrib(inputWidth, 'id', 'width');

        let divHeight = divDimensions.children().eq(0).children().eq(1);
        let labelHeight = divHeight.children().eq(0);
        labelHeight.hide();
        let inputHeight = divHeight.children().eq(1);
        tinymce.DOM.setAttrib(inputHeight, 'id', 'height');

        let divBlock = divDimensions.children().eq(0).children().eq(2);
        let labelBlock = divBlock.children().eq(0);
        labelBlock.hide();

        //Add label block dimensions
        let labelBlockDimensions = tinymce.DOM.create('label', { 'class': 'tox-label' }, _('Constrain proportions'));
        let divBlockDimensions = tinymce.DOM.create('div', { 'class': 'tox-form__group' }, labelBlockDimensions);
        divBlock.after(divBlockDimensions);

        //Add label dimensions
        let labelDimensions = tinymce.DOM.create('label', { 'class': 'tox-label' }, _('Dimensions'));
        let divLabelDimensions = tinymce.DOM.create('div', { 'class': 'tox-form__group' }, labelDimensions);
        divWidth.before(divLabelDimensions);

        labelInstructions.text(eXeMediaPluginDialog.actualImgInstructions);

    }

    function closeMindmap() {
        tinymce.activeEditor.windowManager.confirm('Do you want to do something?', (state) => {
            state ? editor.windowManager.close() : false;
        });
    }

    function getPreviousValues() {

        // Get the previous values
        var elm = editor.selection.getNode();
        var c = elm.className;
        if (c == "exe-mind-map") {
            var e = $(elm);
            var title = e.find('.title');
            var code = e.find(".exe-mindmap-code");
            var img = e.find("img");
            if (img.length == 1 && code.length == 1) {
                eXeMediaPluginDialog.mode = "edit";
                // Source code and image path
                eXeMediaPluginDialog.actualImgInstructions = _("You can edit the mind map...");
                eXeMediaPluginDialog.actualImgToSave = img.attr("src");
                var data = code.html();
                eXeMediaPluginDialog.actualCode = data;
                top.mindmapEditor.data = data;
                // Dimensions
                var w = img.attr("width");
                var h = img.attr("height");
                if (w > 0 && h > 0) {
                    eXeMediaPluginDialog.actualOriginalWidth = w;
                    eXeMediaPluginDialog.actualOriginalHeight = h;
                    eXeMediaPluginDialog.actualWidth = w;
                    eXeMediaPluginDialog.actualHeight = h;
                }
                if (title.length == 1) {
                    eXeMediaPluginDialog.actualMindMapTitle = title.text();
                } else {
                    var img = e.find("img").eq(0);
                    eXeMediaPluginDialog.actualMindMapTitle = img.attr("alt");
                    eXeMediaPluginDialog.actualMindMapCaption = false;
                }
                // Lightbox
                if (e.find("a[rel='lightbox']").length == 1) eXeMediaPluginDialog.actualFullSizeImg = true;
            }
        }
    };

    eXeMediaPluginDialog = {

        actualImgInstructions: _("Use the editor to create a new mind map..."),
        actualImgToSave: '',
        actualCode: '',
        actualMindMapTitle: '',
        actualMindMapCaption: true,
        actualFullSizeImg: false,
        actualOriginalWidth: '',
        actualOriginalHeight: '',
        actualWidth: '',
        actualHeight: '',


        getInitialData: function () {
            let data = {
                mindmapImgToSave: eXeMediaPluginDialog.actualImgToSave,
                mindmapCode: eXeMediaPluginDialog.actualCode,
                mindmapTitle: eXeMediaPluginDialog.actualMindMapTitle,
                mindmapCaption: eXeMediaPluginDialog.actualMindMapCaption,
                linkToFullSizeImage: eXeMediaPluginDialog.actualFullSizeImg,
                originalWidth: eXeMediaPluginDialog.actualOriginalWidth,
                originalHeight: eXeMediaPluginDialog.actualOriginalHeight,
                dimensions: {
                    width: eXeMediaPluginDialog.actualWidth,
                    height: eXeMediaPluginDialog.actualHeight
                },
            }
            return data;
        },

        setDefaultData: function () {
            eXeMediaPluginDialog.actualImgInstructions = _("Use the editor to create a new mind map...");
            eXeMediaPluginDialog.actualImgToSave = '';
            eXeMediaPluginDialog.actualCode = '',
                eXeMediaPluginDialog.actualMindMapTitle = '';
            eXeMediaPluginDialog.actualMindMapCaption = true;
            eXeMediaPluginDialog.actualFullSizeImg = false;
            eXeMediaPluginDialog.actualOriginalWidth = '';
            eXeMediaPluginDialog.actualOriginalHeight = '';
            eXeMediaPluginDialog.actualWidth = '';
            eXeMediaPluginDialog.actualHeight = '';
            eXeMediaPluginDialog.mode = 'new';
        },

        mode: "new", // new or edit

        uploadType: "file", // base64 or file

        openDialog: function () {

            // Contants
            top.mindmapEditor = {
                editor: "",
                data: "",
                closeConfirmed: false,
                tinymce: tinymce.activeEditor
            }

            getPreviousValues();

            // Open the dialog
            win = editor.windowManager.open({
                title: _('Mind map'),
                body: {
                    type: 'panel',
                    items: [
                        {
                            type: 'label',
                            name: 'mindmapImgInstructions',
                            label: '',
                            items: []
                        },
                        {
                            type: 'input',
                            name: 'mindmapImgToSave',
                        },
                        {
                            type: 'textarea',
                            name: 'mindmapCode',
                        },
                        {
                            type: 'button',
                            name: 'mindmapEditorButton',
                            primary: true,
                            text: _("Open the mind map editor"),
                        },
                        {
                            type: 'input',
                            name: 'mindmapTitle',
                            label: _('Descriptive title')
                        },
                        {
                            type: 'checkbox',
                            name: 'mindmapCaption',
                            label: _("Show the title under the image")
                        },
                        {
                            type: 'checkbox',
                            name: 'linkToFullSizeImage',
                            label: _("Link to full size image")
                        },
                        {
                            type: 'panel',
                            items: [
                                { name: 'originalWidth', type: 'input', maxLength: 5, size: 3 },
                                { type: 'label', label: 'x', items: [] },
                                { name: 'originalHeight', type: 'input', maxLength: 5, size: 3 }
                            ]
                        },
                        {
                            type: 'sizeinput',
                            label: 'Dimensions',
                            name: 'dimensions'
                        }
                    ]
                },
                buttons: [
                    {
                        type: 'cancel',
                        name: 'cancel',
                        text: 'Cancel'
                    },
                    {
                        type: 'submit',
                        name: 'save',
                        text: 'Save',
                        primary: true
                    }
                ],
                initialData: eXeMediaPluginDialog.getInitialData(),
                onAction: function (api, details) {
                    if (details.name === 'mindmapEditorButton') {

                        editor.windowManager.openUrl({
                            title: _('Editor'),
                            url: url + "/editor/index.html",
                        });

                        let divDialog = $('div.tox-dialog').eq(1);
                        tinymce.DOM.setAttrib(divDialog, 'id', 'interactiveVideoEditor');

                        let closeButton = divDialog.children().eq(0).children().eq(2);
                        tinymce.DOM.setAttribs(closeButton, { 'id': 'closebutton', });
                    }
                },
                onSubmit: function (api) {

                    eXeMediaPluginDialog.actualImgToSave = api.getData().mindmapImgToSave;
                    eXeMediaPluginDialog.actualCode = api.getData().mindmapCode;
                    eXeMediaPluginDialog.actualMindMapTitle = api.getData().mindmapTitle;
                    eXeMediaPluginDialog.actualMindMapCaption = api.getData().mindmapCaption;
                    eXeMediaPluginDialog.actualFullSizeImg = api.getData().linkToFullSizeImage;
                    eXeMediaPluginDialog.actualWidth = api.getData().dimensions.width;
                    eXeMediaPluginDialog.actualHeight = api.getData().dimensions.height;

                    var img = eXeMediaPluginDialog.actualImgToSave;
                    var code = eXeMediaPluginDialog.actualCode;
                    if (img == "" || code == "" || code.indexOf('{') != 0) {
                        editor.windowManager.alert(_('Please create a mind map.'));
                        return false;
                    }

                    var title = eXeMediaPluginDialog.actualMindMapTitle;

                    title = eXeMediaPluginDialog.stripHtml(title);

                    if (title == "") {
                        editor.windowManager.alert(_('Please provide a title.'));
                        return false;
                    }

                    var alt = title.replace(/"/g, '&quot;');

                    var figcaption = '';
                    if (eXeMediaPluginDialog.actualMindMapCaption) {
                        figcaption = '<figcaption class="figcaption"><span class="title"><em>' + title + '</em></span></figcaption>';
                    }

                    var a1 = "";
                    var a2 = "";
                    if (eXeMediaPluginDialog.uploadType == "file" && eXeMediaPluginDialog.actualFullSizeImg) {
                        a1 = '<a href="' + img + '" rel="lightbox" title="' + alt + '">';
                        a2 = '</a>';
                    }

                    // Dimensions
                    var w = 600;
                    var h = 400;
                    var _w = eXeMediaPluginDialog.actualWidth;
                    if (_w != "" && !isNaN(_w)) w = Math.round(_w);
                    var _h = eXeMediaPluginDialog.actualHeight;
                    if (_h != "" && !isNaN(_h)) h = Math.round(_h);


                    var content = `
                    <div class="exe-mind-map">
                        <figure class="exe-figure exe-image position-center" style="width: ${w}px;">
                            ${a1}<img src="${img}" width="${w}" height="${h}" alt="${alt}"/>${a2} 
                            ${figcaption}
                        </figure>
                        <p class="exe-mindmap-code">${code}</p>
                    </div>
                    `;


                    if (eXeMediaPluginDialog.mode == "edit") {
                        var node = editor.selection.getNode();
                        let oldImage = node.closest(".exe-mind-map");
                        // Remove the node instead of updating the HTML to avoid Base64 images
                        $(oldImage).remove();
                    } else {
                        content += "..."; // Add a P after the map    
                    }

                    // Add the new content
                    editor.execCommand('mceInsertContent', false, content, { skip_undo: 1 });

                    eXeMediaPluginDialog.showMindMapsTitles(editor);

                    editor.windowManager.close();

                    return false;

                },
                onClose: function () {
                    eXeMediaPluginDialog.setDefaultData();
                }

            });

            hideElements();

            top.mindmapEditor.pluginDialog = win;

        }, // openDialog

        recalcSize: function (origin) {
            if (win.find("#constrain")[0].checked()) {
                var originalWidth = win.find("#originalWidth")[0].value();
                var originalHeight = win.find("#originalHeight")[0].value();
                var wF = win.find("#width")[0];
                var hF = win.find("#height")[0];
                var w = wF.value();
                var h = hF.value();
                if (origin == "height") {
                    w = Math.round(h * originalWidth / originalHeight)
                    wF.value(w)
                } else {
                    h = Math.round(w * originalHeight / originalWidth)
                    hF.value(h)
                }
            }
        },

        showMindMapsTitles: function (editor) {
            var d = editor.getDoc();
            jQuery("HEAD #eXeMediaPluginDialogCSS", d).remove();
            var s = '<style type="text/css" id="eXeMediaPluginDialogCSS">';
            jQuery(".exe-mind-map", d).each(function (i) {
                var img = $("img", this);
                if (img.length == 1) {
                    img = img.eq(0);
                    var alt = img.attr("alt");
                    if (alt != "") s += '.exe-mind-map:nth-of-type(' + (i + 1) + '):before{content:"' + alt + '"}'
                }
            });
            s += '</style>';
            jQuery("HEAD", d).append(s);
        },

        activateButton: function (node) {
            var e = jQuery(node);
            if (e.attr("class") == 'exe-mind-map') return true;
            if (e.parents(".exe-mind-map").length > 0) return true;
            return false;
        },

        stripHtml: function (html) {
            var tmp = document.createElement("DIV");
            tmp.innerHTML = html;
            return tmp.textContent || tmp.innerText || "";
        }

    } // Dialog    

    // Plugin button
    editor.ui.registry.addIcon('exemindmap', '<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24"><path d="M0 0h24v24H0z" fill="none"/><path d="M22 11V3h-7v3H9V3H2v8h7V8h2v10h4v3h7v-8h-7v3h-2V8h2v3z"/></svg>');
    editor.ui.registry.addToggleButton('exemindmap', {
        icon: 'exemindmap',
        tooltip: _('Mind map'),
        onAction: eXeMediaPluginDialog.openDialog,
        onSetup: function (buttonApi) {
            var editorEventCallback = function (eventApi) {
                buttonApi.setActive(eXeMediaPluginDialog.activateButton(eventApi.element));
            };
            editor.on('NodeChange', editorEventCallback);
            return function (buttonApi) {
                editor.off('NodeChange', editorEventCallback);
            }
        }
    });

    editor.on('init', function (e) {
        editor.dom.loadCSS(url + "/css/content.css");
        eXeMediaPluginDialog.showMindMapsTitles(editor);
    });

});